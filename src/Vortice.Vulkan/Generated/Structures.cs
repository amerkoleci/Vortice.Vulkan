// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable CS0649
namespace Vortice.Vulkan;

public partial record struct VkExtent2D
{
	public uint width;
	public uint height;
}

public partial record struct VkExtent3D
{
	public uint width;
	public uint height;
	public uint depth;
}

public partial record struct VkOffset2D
{
	public int x;
	public int y;
}

public partial record struct VkOffset3D
{
	public int x;
	public int y;
	public int z;
}

public partial record struct VkRect2D
{
	public VkOffset2D offset;
	public VkExtent2D extent;
}

public unsafe partial struct VkBufferMemoryBarrier : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferMemoryBarrier;
	public void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;

	public VkBufferMemoryBarrier()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDispatchIndirectCommand
{
	public uint x;
	public uint y;
	public uint z;
}

public partial struct VkDrawIndexedIndirectCommand
{
	public uint indexCount;
	public uint instanceCount;
	public uint firstIndex;
	public int vertexOffset;
	public uint firstInstance;
}

public partial struct VkDrawIndirectCommand
{
	public uint vertexCount;
	public uint instanceCount;
	public uint firstVertex;
	public uint firstInstance;
}

public partial struct VkImageSubresourceRange
{
	public VkImageAspectFlags aspectMask;
	public uint baseMipLevel;
	public uint levelCount;
	public uint baseArrayLayer;
	public uint layerCount;
}

public unsafe partial struct VkImageMemoryBarrier : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageMemoryBarrier;
	public void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkImageLayout oldLayout;
	public VkImageLayout newLayout;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkImage image;
	public VkImageSubresourceRange subresourceRange;

	public VkImageMemoryBarrier()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryBarrier : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryBarrier;
	public void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;

	public VkMemoryBarrier()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineCacheHeaderVersionOne
{
	public uint headerSize;
	public VkPipelineCacheHeaderVersion headerVersion;
	public uint vendorID;
	public uint deviceID;
	public fixed byte pipelineCacheUUID[16];
}

public unsafe partial struct VkAllocationCallbacks
{
	public void* pUserData;
	public delegate* unmanaged<void*, ulong, ulong, VkSystemAllocationScope, void*> pfnAllocation;
	public delegate* unmanaged<void*, void*, ulong, ulong, VkSystemAllocationScope, void*> pfnReallocation;
	public delegate* unmanaged<void*, void*, void> pfnFree;
	public delegate* unmanaged<void*, ulong, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalAllocation;
	public delegate* unmanaged<void*, ulong, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalFree;
}

public unsafe partial struct VkApplicationInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ApplicationInfo;
	public void* pNext;
	public byte* pApplicationName;
	public VkVersion applicationVersion;
	public byte* pEngineName;
	public VkVersion engineVersion;
	public VkVersion apiVersion;

	public VkApplicationInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkFormatProperties
{
	public VkFormatFeatureFlags linearTilingFeatures;
	public VkFormatFeatureFlags optimalTilingFeatures;
	public VkFormatFeatureFlags bufferFeatures;
}

public partial struct VkImageFormatProperties
{
	public VkExtent3D maxExtent;
	public uint maxMipLevels;
	public uint maxArrayLayers;
	public VkSampleCountFlags sampleCounts;
	public ulong maxResourceSize;
}

public unsafe partial struct VkInstanceCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.InstanceCreateInfo;
	public void* pNext;
	public VkInstanceCreateFlags flags;
	public VkApplicationInfo* pApplicationInfo;
	public uint enabledLayerCount;
	public byte** ppEnabledLayerNames;
	public uint enabledExtensionCount;
	public byte** ppEnabledExtensionNames;

	public VkInstanceCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkMemoryHeap
{
	public ulong size;
	public VkMemoryHeapFlags flags;
}

public partial struct VkMemoryType
{
	public VkMemoryPropertyFlags propertyFlags;
	public uint heapIndex;
}

public partial struct VkPhysicalDeviceFeatures
{
	public VkBool32 robustBufferAccess;
	public VkBool32 fullDrawIndexUint32;
	public VkBool32 imageCubeArray;
	public VkBool32 independentBlend;
	public VkBool32 geometryShader;
	public VkBool32 tessellationShader;
	public VkBool32 sampleRateShading;
	public VkBool32 dualSrcBlend;
	public VkBool32 logicOp;
	public VkBool32 multiDrawIndirect;
	public VkBool32 drawIndirectFirstInstance;
	public VkBool32 depthClamp;
	public VkBool32 depthBiasClamp;
	public VkBool32 fillModeNonSolid;
	public VkBool32 depthBounds;
	public VkBool32 wideLines;
	public VkBool32 largePoints;
	public VkBool32 alphaToOne;
	public VkBool32 multiViewport;
	public VkBool32 samplerAnisotropy;
	public VkBool32 textureCompressionETC2;
	public VkBool32 textureCompressionASTC_LDR;
	public VkBool32 textureCompressionBC;
	public VkBool32 occlusionQueryPrecise;
	public VkBool32 pipelineStatisticsQuery;
	public VkBool32 vertexPipelineStoresAndAtomics;
	public VkBool32 fragmentStoresAndAtomics;
	public VkBool32 shaderTessellationAndGeometryPointSize;
	public VkBool32 shaderImageGatherExtended;
	public VkBool32 shaderStorageImageExtendedFormats;
	public VkBool32 shaderStorageImageMultisample;
	public VkBool32 shaderStorageImageReadWithoutFormat;
	public VkBool32 shaderStorageImageWriteWithoutFormat;
	public VkBool32 shaderUniformBufferArrayDynamicIndexing;
	public VkBool32 shaderSampledImageArrayDynamicIndexing;
	public VkBool32 shaderStorageBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageImageArrayDynamicIndexing;
	public VkBool32 shaderClipDistance;
	public VkBool32 shaderCullDistance;
	public VkBool32 shaderFloat64;
	public VkBool32 shaderInt64;
	public VkBool32 shaderInt16;
	public VkBool32 shaderResourceResidency;
	public VkBool32 shaderResourceMinLod;
	public VkBool32 sparseBinding;
	public VkBool32 sparseResidencyBuffer;
	public VkBool32 sparseResidencyImage2D;
	public VkBool32 sparseResidencyImage3D;
	public VkBool32 sparseResidency2Samples;
	public VkBool32 sparseResidency4Samples;
	public VkBool32 sparseResidency8Samples;
	public VkBool32 sparseResidency16Samples;
	public VkBool32 sparseResidencyAliased;
	public VkBool32 variableMultisampleRate;
	public VkBool32 inheritedQueries;
}

public unsafe partial struct VkPhysicalDeviceLimits
{
	public uint maxImageDimension1D;
	public uint maxImageDimension2D;
	public uint maxImageDimension3D;
	public uint maxImageDimensionCube;
	public uint maxImageArrayLayers;
	public uint maxTexelBufferElements;
	public uint maxUniformBufferRange;
	public uint maxStorageBufferRange;
	public uint maxPushConstantsSize;
	public uint maxMemoryAllocationCount;
	public uint maxSamplerAllocationCount;
	public ulong bufferImageGranularity;
	public ulong sparseAddressSpaceSize;
	public uint maxBoundDescriptorSets;
	public uint maxPerStageDescriptorSamplers;
	public uint maxPerStageDescriptorUniformBuffers;
	public uint maxPerStageDescriptorStorageBuffers;
	public uint maxPerStageDescriptorSampledImages;
	public uint maxPerStageDescriptorStorageImages;
	public uint maxPerStageDescriptorInputAttachments;
	public uint maxPerStageResources;
	public uint maxDescriptorSetSamplers;
	public uint maxDescriptorSetUniformBuffers;
	public uint maxDescriptorSetUniformBuffersDynamic;
	public uint maxDescriptorSetStorageBuffers;
	public uint maxDescriptorSetStorageBuffersDynamic;
	public uint maxDescriptorSetSampledImages;
	public uint maxDescriptorSetStorageImages;
	public uint maxDescriptorSetInputAttachments;
	public uint maxVertexInputAttributes;
	public uint maxVertexInputBindings;
	public uint maxVertexInputAttributeOffset;
	public uint maxVertexInputBindingStride;
	public uint maxVertexOutputComponents;
	public uint maxTessellationGenerationLevel;
	public uint maxTessellationPatchSize;
	public uint maxTessellationControlPerVertexInputComponents;
	public uint maxTessellationControlPerVertexOutputComponents;
	public uint maxTessellationControlPerPatchOutputComponents;
	public uint maxTessellationControlTotalOutputComponents;
	public uint maxTessellationEvaluationInputComponents;
	public uint maxTessellationEvaluationOutputComponents;
	public uint maxGeometryShaderInvocations;
	public uint maxGeometryInputComponents;
	public uint maxGeometryOutputComponents;
	public uint maxGeometryOutputVertices;
	public uint maxGeometryTotalOutputComponents;
	public uint maxFragmentInputComponents;
	public uint maxFragmentOutputAttachments;
	public uint maxFragmentDualSrcAttachments;
	public uint maxFragmentCombinedOutputResources;
	public uint maxComputeSharedMemorySize;
	public fixed uint maxComputeWorkGroupCount[3];
	public uint maxComputeWorkGroupInvocations;
	public fixed uint maxComputeWorkGroupSize[3];
	public uint subPixelPrecisionBits;
	public uint subTexelPrecisionBits;
	public uint mipmapPrecisionBits;
	public uint maxDrawIndexedIndexValue;
	public uint maxDrawIndirectCount;
	public float maxSamplerLodBias;
	public float maxSamplerAnisotropy;
	public uint maxViewports;
	public fixed uint maxViewportDimensions[2];
	public fixed float viewportBoundsRange[2];
	public uint viewportSubPixelBits;
	public ulong minMemoryMapAlignment;
	public ulong minTexelBufferOffsetAlignment;
	public ulong minUniformBufferOffsetAlignment;
	public ulong minStorageBufferOffsetAlignment;
	public int minTexelOffset;
	public uint maxTexelOffset;
	public int minTexelGatherOffset;
	public uint maxTexelGatherOffset;
	public float minInterpolationOffset;
	public float maxInterpolationOffset;
	public uint subPixelInterpolationOffsetBits;
	public uint maxFramebufferWidth;
	public uint maxFramebufferHeight;
	public uint maxFramebufferLayers;
	public VkSampleCountFlags framebufferColorSampleCounts;
	public VkSampleCountFlags framebufferDepthSampleCounts;
	public VkSampleCountFlags framebufferStencilSampleCounts;
	public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
	public uint maxColorAttachments;
	public VkSampleCountFlags sampledImageColorSampleCounts;
	public VkSampleCountFlags sampledImageIntegerSampleCounts;
	public VkSampleCountFlags sampledImageDepthSampleCounts;
	public VkSampleCountFlags sampledImageStencilSampleCounts;
	public VkSampleCountFlags storageImageSampleCounts;
	public uint maxSampleMaskWords;
	public VkBool32 timestampComputeAndGraphics;
	public float timestampPeriod;
	public uint maxClipDistances;
	public uint maxCullDistances;
	public uint maxCombinedClipAndCullDistances;
	public uint discreteQueuePriorities;
	public fixed float pointSizeRange[2];
	public fixed float lineWidthRange[2];
	public float pointSizeGranularity;
	public float lineWidthGranularity;
	public VkBool32 strictLines;
	public VkBool32 standardSampleLocations;
	public ulong optimalBufferCopyOffsetAlignment;
	public ulong optimalBufferCopyRowPitchAlignment;
	public ulong nonCoherentAtomSize;
}

public partial struct VkPhysicalDeviceMemoryProperties
{
	public uint memoryTypeCount;
	public memoryTypes__FixedBuffer memoryTypes;

	[InlineArray(32)]
	public partial struct memoryTypes__FixedBuffer
	{
		public VkMemoryType e0;
	}
	public uint memoryHeapCount;
	public memoryHeaps__FixedBuffer memoryHeaps;

	[InlineArray(16)]
	public partial struct memoryHeaps__FixedBuffer
	{
		public VkMemoryHeap e0;
	}
}

public partial struct VkPhysicalDeviceSparseProperties
{
	public VkBool32 residencyStandard2DBlockShape;
	public VkBool32 residencyStandard2DMultisampleBlockShape;
	public VkBool32 residencyStandard3DBlockShape;
	public VkBool32 residencyAlignedMipSize;
	public VkBool32 residencyNonResidentStrict;
}

public unsafe partial struct VkPhysicalDeviceProperties
{
	public VkVersion apiVersion;
	public uint driverVersion;
	public uint vendorID;
	public uint deviceID;
	public VkPhysicalDeviceType deviceType;
	public fixed byte deviceName[256];
	public fixed byte pipelineCacheUUID[16];
	public VkPhysicalDeviceLimits limits;
	public VkPhysicalDeviceSparseProperties sparseProperties;
}

public partial struct VkQueueFamilyProperties
{
	public VkQueueFlags queueFlags;
	public uint queueCount;
	public uint timestampValidBits;
	public VkExtent3D minImageTransferGranularity;
}

public unsafe partial struct VkDeviceQueueCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceQueueCreateInfo;
	public void* pNext;
	public VkDeviceQueueCreateFlags flags;
	public uint queueFamilyIndex;
	public uint queueCount;
	public float* pQueuePriorities;

	public VkDeviceQueueCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceCreateInfo;
	public void* pNext;
	public VkDeviceCreateFlags flags;
	public uint queueCreateInfoCount;
	public VkDeviceQueueCreateInfo* pQueueCreateInfos;
	public uint enabledLayerCount;
	public byte** ppEnabledLayerNames;
	public uint enabledExtensionCount;
	public byte** ppEnabledExtensionNames;
	public VkPhysicalDeviceFeatures* pEnabledFeatures;

	public VkDeviceCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExtensionProperties
{
	public fixed byte extensionName[256];
	public VkVersion specVersion;
}

public unsafe partial struct VkLayerProperties
{
	public fixed byte layerName[256];
	public VkVersion specVersion;
	public uint implementationVersion;
	public fixed byte description[256];
}

public unsafe partial struct VkSubmitInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubmitInfo;
	public void* pNext;
	public uint waitSemaphoreCount;
	public VkSemaphore* pWaitSemaphores;
	public VkPipelineStageFlags* pWaitDstStageMask;
	public uint commandBufferCount;
	public VkCommandBuffer* pCommandBuffers;
	public uint signalSemaphoreCount;
	public VkSemaphore* pSignalSemaphores;

	public VkSubmitInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMappedMemoryRange : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MappedMemoryRange;
	public void* pNext;
	public VkDeviceMemory memory;
	public ulong offset;
	public ulong size;

	public VkMappedMemoryRange()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryAllocateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryAllocateInfo;
	public void* pNext;
	public ulong allocationSize;
	public uint memoryTypeIndex;

	public VkMemoryAllocateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkMemoryRequirements
{
	public ulong size;
	public ulong alignment;
	public uint memoryTypeBits;
}

public partial struct VkSparseMemoryBind
{
	public ulong resourceOffset;
	public ulong size;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public VkSparseMemoryBindFlags flags;
}

public unsafe partial struct VkSparseBufferMemoryBindInfo
{
	public VkBuffer buffer;
	public uint bindCount;
	public VkSparseMemoryBind* pBinds;
}

public unsafe partial struct VkSparseImageOpaqueMemoryBindInfo
{
	public VkImage image;
	public uint bindCount;
	public VkSparseMemoryBind* pBinds;
}

public partial struct VkImageSubresource
{
	public VkImageAspectFlags aspectMask;
	public uint mipLevel;
	public uint arrayLayer;
}

public partial struct VkSparseImageMemoryBind
{
	public VkImageSubresource subresource;
	public VkOffset3D offset;
	public VkExtent3D extent;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public VkSparseMemoryBindFlags flags;
}

public unsafe partial struct VkSparseImageMemoryBindInfo
{
	public VkImage image;
	public uint bindCount;
	public VkSparseImageMemoryBind* pBinds;
}

public unsafe partial struct VkBindSparseInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindSparseInfo;
	public void* pNext;
	public uint waitSemaphoreCount;
	public VkSemaphore* pWaitSemaphores;
	public uint bufferBindCount;
	public VkSparseBufferMemoryBindInfo* pBufferBinds;
	public uint imageOpaqueBindCount;
	public VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
	public uint imageBindCount;
	public VkSparseImageMemoryBindInfo* pImageBinds;
	public uint signalSemaphoreCount;
	public VkSemaphore* pSignalSemaphores;

	public VkBindSparseInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkSparseImageFormatProperties
{
	public VkImageAspectFlags aspectMask;
	public VkExtent3D imageGranularity;
	public VkSparseImageFormatFlags flags;
}

public partial struct VkSparseImageMemoryRequirements
{
	public VkSparseImageFormatProperties formatProperties;
	public uint imageMipTailFirstLod;
	public ulong imageMipTailSize;
	public ulong imageMipTailOffset;
	public ulong imageMipTailStride;
}

public unsafe partial struct VkFenceCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FenceCreateInfo;
	public void* pNext;
	public VkFenceCreateFlags flags;

	public VkFenceCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSemaphoreCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SemaphoreCreateInfo;
	public void* pNext;
	public VkSemaphoreCreateFlags flags;

	public VkSemaphoreCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkEventCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.EventCreateInfo;
	public void* pNext;
	public VkEventCreateFlags flags;

	public VkEventCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueryPoolCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueryPoolCreateInfo;
	public void* pNext;
	public VkQueryPoolCreateFlags flags;
	public VkQueryType queryType;
	public uint queryCount;
	public VkQueryPipelineStatisticFlags pipelineStatistics;

	public VkQueryPoolCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferCreateInfo;
	public void* pNext;
	public VkBufferCreateFlags flags;
	public ulong size;
	public VkBufferUsageFlags usage;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public uint* pQueueFamilyIndices;

	public VkBufferCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferViewCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferViewCreateInfo;
	public void* pNext;
	public VkBufferViewCreateFlags flags;
	public VkBuffer buffer;
	public VkFormat format;
	public ulong offset;
	public ulong range;

	public VkBufferViewCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageCreateInfo;
	public void* pNext;
	public VkImageCreateFlags flags;
	public VkImageType imageType;
	public VkFormat format;
	public VkExtent3D extent;
	public uint mipLevels;
	public uint arrayLayers;
	public VkSampleCountFlags samples;
	public VkImageTiling tiling;
	public VkImageUsageFlags usage;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public uint* pQueueFamilyIndices;
	public VkImageLayout initialLayout;

	public VkImageCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkSubresourceLayout
{
	public ulong offset;
	public ulong size;
	public ulong rowPitch;
	public ulong arrayPitch;
	public ulong depthPitch;
}

public partial struct VkComponentMapping
{
	public VkComponentSwizzle r;
	public VkComponentSwizzle g;
	public VkComponentSwizzle b;
	public VkComponentSwizzle a;
}

public unsafe partial struct VkImageViewCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewCreateInfo;
	public void* pNext;
	public VkImageViewCreateFlags flags;
	public VkImage image;
	public VkImageViewType viewType;
	public VkFormat format;
	public VkComponentMapping components;
	public VkImageSubresourceRange subresourceRange;

	public VkImageViewCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkShaderModuleCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ShaderModuleCreateInfo;
	public void* pNext;
	public VkShaderModuleCreateFlags flags;
	public ulong codeSize;
	public uint* pCode;

	public VkShaderModuleCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineCacheCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineCacheCreateInfo;
	public void* pNext;
	public VkPipelineCacheCreateFlags flags;
	public ulong initialDataSize;
	public void* pInitialData;

	public VkPipelineCacheCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkSpecializationMapEntry
{
	public uint constantID;
	public uint offset;
	public ulong size;
}

public unsafe partial struct VkSpecializationInfo
{
	public uint mapEntryCount;
	public VkSpecializationMapEntry* pMapEntries;
	public ulong dataSize;
	public void* pData;
}

public unsafe partial struct VkPipelineShaderStageCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineShaderStageCreateInfo;
	public void* pNext;
	public VkPipelineShaderStageCreateFlags flags;
	public VkShaderStageFlags stage;
	public VkShaderModule module;
	public byte* pName;
	public VkSpecializationInfo* pSpecializationInfo;

	public VkPipelineShaderStageCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkComputePipelineCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ComputePipelineCreateInfo;
	public void* pNext;
	public VkPipelineCreateFlags flags;
	public VkPipelineShaderStageCreateInfo stage;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public VkComputePipelineCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkVertexInputBindingDescription
{
	public uint binding;
	public uint stride;
	public VkVertexInputRate inputRate;
}

public partial struct VkVertexInputAttributeDescription
{
	public uint location;
	public uint binding;
	public VkFormat format;
	public uint offset;
}

public unsafe partial struct VkPipelineVertexInputStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineVertexInputStateCreateInfo;
	public void* pNext;
	public VkPipelineVertexInputStateCreateFlags flags;
	public uint vertexBindingDescriptionCount;
	public VkVertexInputBindingDescription* pVertexBindingDescriptions;
	public uint vertexAttributeDescriptionCount;
	public VkVertexInputAttributeDescription* pVertexAttributeDescriptions;

	public VkPipelineVertexInputStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineInputAssemblyStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineInputAssemblyStateCreateInfo;
	public void* pNext;
	public VkPipelineInputAssemblyStateCreateFlags flags;
	public VkPrimitiveTopology topology;
	public VkBool32 primitiveRestartEnable;

	public VkPipelineInputAssemblyStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineTessellationStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineTessellationStateCreateInfo;
	public void* pNext;
	public VkPipelineTessellationStateCreateFlags flags;
	public uint patchControlPoints;

	public VkPipelineTessellationStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkViewport
{
	public float x;
	public float y;
	public float width;
	public float height;
	public float minDepth;
	public float maxDepth;
}

public unsafe partial struct VkPipelineViewportStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineViewportStateCreateInfo;
	public void* pNext;
	public VkPipelineViewportStateCreateFlags flags;
	public uint viewportCount;
	public VkViewport* pViewports;
	public uint scissorCount;
	public VkRect2D* pScissors;

	public VkPipelineViewportStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRasterizationStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRasterizationStateCreateInfo;
	public void* pNext;
	public VkPipelineRasterizationStateCreateFlags flags;
	public VkBool32 depthClampEnable;
	public VkBool32 rasterizerDiscardEnable;
	public VkPolygonMode polygonMode;
	public VkCullModeFlags cullMode;
	public VkFrontFace frontFace;
	public VkBool32 depthBiasEnable;
	public float depthBiasConstantFactor;
	public float depthBiasClamp;
	public float depthBiasSlopeFactor;
	public float lineWidth;

	public VkPipelineRasterizationStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineMultisampleStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineMultisampleStateCreateInfo;
	public void* pNext;
	public VkPipelineMultisampleStateCreateFlags flags;
	public VkSampleCountFlags rasterizationSamples;
	public VkBool32 sampleShadingEnable;
	public float minSampleShading;
	public uint* pSampleMask;
	public VkBool32 alphaToCoverageEnable;
	public VkBool32 alphaToOneEnable;

	public VkPipelineMultisampleStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkStencilOpState
{
	public VkStencilOp failOp;
	public VkStencilOp passOp;
	public VkStencilOp depthFailOp;
	public VkCompareOp compareOp;
	public uint compareMask;
	public uint writeMask;
	public uint reference;
}

public unsafe partial struct VkPipelineDepthStencilStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineDepthStencilStateCreateInfo;
	public void* pNext;
	public VkPipelineDepthStencilStateCreateFlags flags;
	public VkBool32 depthTestEnable;
	public VkBool32 depthWriteEnable;
	public VkCompareOp depthCompareOp;
	public VkBool32 depthBoundsTestEnable;
	public VkBool32 stencilTestEnable;
	public VkStencilOpState front;
	public VkStencilOpState back;
	public float minDepthBounds;
	public float maxDepthBounds;

	public VkPipelineDepthStencilStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkPipelineColorBlendAttachmentState
{
	public VkBool32 blendEnable;
	public VkBlendFactor srcColorBlendFactor;
	public VkBlendFactor dstColorBlendFactor;
	public VkBlendOp colorBlendOp;
	public VkBlendFactor srcAlphaBlendFactor;
	public VkBlendFactor dstAlphaBlendFactor;
	public VkBlendOp alphaBlendOp;
	public VkColorComponentFlags colorWriteMask;
}

public unsafe partial struct VkPipelineColorBlendStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineColorBlendStateCreateInfo;
	public void* pNext;
	public VkPipelineColorBlendStateCreateFlags flags;
	public VkBool32 logicOpEnable;
	public VkLogicOp logicOp;
	public uint attachmentCount;
	public VkPipelineColorBlendAttachmentState* pAttachments;
	public fixed float blendConstants[4];

	public VkPipelineColorBlendStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineDynamicStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineDynamicStateCreateInfo;
	public void* pNext;
	public VkPipelineDynamicStateCreateFlags flags;
	public uint dynamicStateCount;
	public VkDynamicState* pDynamicStates;

	public VkPipelineDynamicStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGraphicsPipelineCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GraphicsPipelineCreateInfo;
	public void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public VkPipelineShaderStageCreateInfo* pStages;
	public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
	public VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
	public VkPipelineTessellationStateCreateInfo* pTessellationState;
	public VkPipelineViewportStateCreateInfo* pViewportState;
	public VkPipelineRasterizationStateCreateInfo* pRasterizationState;
	public VkPipelineMultisampleStateCreateInfo* pMultisampleState;
	public VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
	public VkPipelineColorBlendStateCreateInfo* pColorBlendState;
	public VkPipelineDynamicStateCreateInfo* pDynamicState;
	public VkPipelineLayout layout;
	public VkRenderPass renderPass;
	public uint subpass;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public VkGraphicsPipelineCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkPushConstantRange
{
	public VkShaderStageFlags stageFlags;
	public uint offset;
	public uint size;
}

public unsafe partial struct VkPipelineLayoutCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineLayoutCreateInfo;
	public void* pNext;
	public VkPipelineLayoutCreateFlags flags;
	public uint setLayoutCount;
	public VkDescriptorSetLayout* pSetLayouts;
	public uint pushConstantRangeCount;
	public VkPushConstantRange* pPushConstantRanges;

	public VkPipelineLayoutCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerCreateInfo;
	public void* pNext;
	public VkSamplerCreateFlags flags;
	public VkFilter magFilter;
	public VkFilter minFilter;
	public VkSamplerMipmapMode mipmapMode;
	public VkSamplerAddressMode addressModeU;
	public VkSamplerAddressMode addressModeV;
	public VkSamplerAddressMode addressModeW;
	public float mipLodBias;
	public VkBool32 anisotropyEnable;
	public float maxAnisotropy;
	public VkBool32 compareEnable;
	public VkCompareOp compareOp;
	public float minLod;
	public float maxLod;
	public VkBorderColor borderColor;
	public VkBool32 unnormalizedCoordinates;

	public VkSamplerCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyDescriptorSet : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyDescriptorSet;
	public void* pNext;
	public VkDescriptorSet srcSet;
	public uint srcBinding;
	public uint srcArrayElement;
	public VkDescriptorSet dstSet;
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;

	public VkCopyDescriptorSet()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDescriptorBufferInfo
{
	public VkBuffer buffer;
	public ulong offset;
	public ulong range;
}

public partial struct VkDescriptorImageInfo
{
	public VkSampler sampler;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
}

public partial struct VkDescriptorPoolSize
{
	public VkDescriptorType type;
	public uint descriptorCount;
}

public unsafe partial struct VkDescriptorPoolCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorPoolCreateInfo;
	public void* pNext;
	public VkDescriptorPoolCreateFlags flags;
	public uint maxSets;
	public uint poolSizeCount;
	public VkDescriptorPoolSize* pPoolSizes;

	public VkDescriptorPoolCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorSetAllocateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorSetAllocateInfo;
	public void* pNext;
	public VkDescriptorPool descriptorPool;
	public uint descriptorSetCount;
	public VkDescriptorSetLayout* pSetLayouts;

	public VkDescriptorSetAllocateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorSetLayoutBinding
{
	public uint binding;
	public VkDescriptorType descriptorType;
	public uint descriptorCount;
	public VkShaderStageFlags stageFlags;
	public VkSampler* pImmutableSamplers;
}

public unsafe partial struct VkDescriptorSetLayoutCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorSetLayoutCreateInfo;
	public void* pNext;
	public VkDescriptorSetLayoutCreateFlags flags;
	public uint bindingCount;
	public VkDescriptorSetLayoutBinding* pBindings;

	public VkDescriptorSetLayoutCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWriteDescriptorSet : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WriteDescriptorSet;
	public void* pNext;
	public VkDescriptorSet dstSet;
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;
	public VkDescriptorType descriptorType;
	public VkDescriptorImageInfo* pImageInfo;
	public VkDescriptorBufferInfo* pBufferInfo;
	public VkBufferView* pTexelBufferView;

	public VkWriteDescriptorSet()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkAttachmentDescription
{
	public VkAttachmentDescriptionFlags flags;
	public VkFormat format;
	public VkSampleCountFlags samples;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkAttachmentLoadOp stencilLoadOp;
	public VkAttachmentStoreOp stencilStoreOp;
	public VkImageLayout initialLayout;
	public VkImageLayout finalLayout;
}

public partial struct VkAttachmentReference
{
	public uint attachment;
	public VkImageLayout layout;
}

public unsafe partial struct VkFramebufferCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FramebufferCreateInfo;
	public void* pNext;
	public VkFramebufferCreateFlags flags;
	public VkRenderPass renderPass;
	public uint attachmentCount;
	public VkImageView* pAttachments;
	public uint width;
	public uint height;
	public uint layers;

	public VkFramebufferCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubpassDescription
{
	public VkSubpassDescriptionFlags flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint inputAttachmentCount;
	public VkAttachmentReference* pInputAttachments;
	public uint colorAttachmentCount;
	public VkAttachmentReference* pColorAttachments;
	public VkAttachmentReference* pResolveAttachments;
	public VkAttachmentReference* pDepthStencilAttachment;
	public uint preserveAttachmentCount;
	public uint* pPreserveAttachments;
}

public partial struct VkSubpassDependency
{
	public uint srcSubpass;
	public uint dstSubpass;
	public VkPipelineStageFlags srcStageMask;
	public VkPipelineStageFlags dstStageMask;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkDependencyFlags dependencyFlags;
}

public unsafe partial struct VkRenderPassCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassCreateInfo;
	public void* pNext;
	public VkRenderPassCreateFlags flags;
	public uint attachmentCount;
	public VkAttachmentDescription* pAttachments;
	public uint subpassCount;
	public VkSubpassDescription* pSubpasses;
	public uint dependencyCount;
	public VkSubpassDependency* pDependencies;

	public VkRenderPassCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandPoolCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandPoolCreateInfo;
	public void* pNext;
	public VkCommandPoolCreateFlags flags;
	public uint queueFamilyIndex;

	public VkCommandPoolCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandBufferAllocateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandBufferAllocateInfo;
	public void* pNext;
	public VkCommandPool commandPool;
	public VkCommandBufferLevel level;
	public uint commandBufferCount;

	public VkCommandBufferAllocateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandBufferInheritanceInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandBufferInheritanceInfo;
	public void* pNext;
	public VkRenderPass renderPass;
	public uint subpass;
	public VkFramebuffer framebuffer;
	public VkBool32 occlusionQueryEnable;
	public VkQueryControlFlags queryFlags;
	public VkQueryPipelineStatisticFlags pipelineStatistics;

	public VkCommandBufferInheritanceInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandBufferBeginInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandBufferBeginInfo;
	public void* pNext;
	public VkCommandBufferUsageFlags flags;
	public VkCommandBufferInheritanceInfo* pInheritanceInfo;

	public VkCommandBufferBeginInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkBufferCopy
{
	public ulong srcOffset;
	public ulong dstOffset;
	public ulong size;
}

public partial struct VkImageSubresourceLayers
{
	public VkImageAspectFlags aspectMask;
	public uint mipLevel;
	public uint baseArrayLayer;
	public uint layerCount;
}

public partial struct VkBufferImageCopy
{
	public ulong bufferOffset;
	public uint bufferRowLength;
	public uint bufferImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;
}

public readonly partial struct VkClearDepthStencilValue
{
	public readonly float depth;
	public readonly uint stencil;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkClearValue
{
	[FieldOffset(0)]
	public VkClearColorValue color;
	[FieldOffset(0)]
	public VkClearDepthStencilValue depthStencil;
}

public partial struct VkClearAttachment
{
	public VkImageAspectFlags aspectMask;
	public uint colorAttachment;
	public VkClearValue clearValue;
}

public partial struct VkClearRect
{
	public VkRect2D rect;
	public uint baseArrayLayer;
	public uint layerCount;
}

public partial struct VkImageBlit
{
	public VkImageSubresourceLayers srcSubresource;
	public srcOffsets__FixedBuffer srcOffsets;

	[InlineArray(2)]
	public partial struct srcOffsets__FixedBuffer
	{
		public VkOffset3D e0;
	}
	public VkImageSubresourceLayers dstSubresource;
	public dstOffsets__FixedBuffer dstOffsets;

	[InlineArray(2)]
	public partial struct dstOffsets__FixedBuffer
	{
		public VkOffset3D e0;
	}
}

public partial struct VkImageCopy
{
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;
}

public partial struct VkImageResolve
{
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;
}

public unsafe partial struct VkRenderPassBeginInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassBeginInfo;
	public void* pNext;
	public VkRenderPass renderPass;
	public VkFramebuffer framebuffer;
	public VkRect2D renderArea;
	public uint clearValueCount;
	public VkClearValue* pClearValues;

	public VkRenderPassBeginInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSubgroupProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSubgroupProperties;
	public void* pNext;
	public uint subgroupSize;
	public VkShaderStageFlags supportedStages;
	public VkSubgroupFeatureFlags supportedOperations;
	public VkBool32 quadOperationsInAllStages;

	public VkPhysicalDeviceSubgroupProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindBufferMemoryInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindBufferMemoryInfo;
	public void* pNext;
	public VkBuffer buffer;
	public VkDeviceMemory memory;
	public ulong memoryOffset;

	public VkBindBufferMemoryInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindImageMemoryInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindImageMemoryInfo;
	public void* pNext;
	public VkImage image;
	public VkDeviceMemory memory;
	public ulong memoryOffset;

	public VkBindImageMemoryInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevice16BitStorageFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevice16BitStorageFeatures;
	public void* pNext;
	public VkBool32 storageBuffer16BitAccess;
	public VkBool32 uniformAndStorageBuffer16BitAccess;
	public VkBool32 storagePushConstant16;
	public VkBool32 storageInputOutput16;

	public VkPhysicalDevice16BitStorageFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryDedicatedRequirements : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryDedicatedRequirements;
	public void* pNext;
	public VkBool32 prefersDedicatedAllocation;
	public VkBool32 requiresDedicatedAllocation;

	public VkMemoryDedicatedRequirements()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryDedicatedAllocateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryDedicatedAllocateInfo;
	public void* pNext;
	public VkImage image;
	public VkBuffer buffer;

	public VkMemoryDedicatedAllocateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryAllocateFlagsInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryAllocateFlagsInfo;
	public void* pNext;
	public VkMemoryAllocateFlags flags;
	public uint deviceMask;

	public VkMemoryAllocateFlagsInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceGroupRenderPassBeginInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceGroupRenderPassBeginInfo;
	public void* pNext;
	public uint deviceMask;
	public uint deviceRenderAreaCount;
	public VkRect2D* pDeviceRenderAreas;

	public VkDeviceGroupRenderPassBeginInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceGroupCommandBufferBeginInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceGroupCommandBufferBeginInfo;
	public void* pNext;
	public uint deviceMask;

	public VkDeviceGroupCommandBufferBeginInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceGroupSubmitInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceGroupSubmitInfo;
	public void* pNext;
	public uint waitSemaphoreCount;
	public uint* pWaitSemaphoreDeviceIndices;
	public uint commandBufferCount;
	public uint* pCommandBufferDeviceMasks;
	public uint signalSemaphoreCount;
	public uint* pSignalSemaphoreDeviceIndices;

	public VkDeviceGroupSubmitInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceGroupBindSparseInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceGroupBindSparseInfo;
	public void* pNext;
	public uint resourceDeviceIndex;
	public uint memoryDeviceIndex;

	public VkDeviceGroupBindSparseInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindBufferMemoryDeviceGroupInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindBufferMemoryDeviceGroupInfo;
	public void* pNext;
	public uint deviceIndexCount;
	public uint* pDeviceIndices;

	public VkBindBufferMemoryDeviceGroupInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindImageMemoryDeviceGroupInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindImageMemoryDeviceGroupInfo;
	public void* pNext;
	public uint deviceIndexCount;
	public uint* pDeviceIndices;
	public uint splitInstanceBindRegionCount;
	public VkRect2D* pSplitInstanceBindRegions;

	public VkBindImageMemoryDeviceGroupInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceGroupProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceGroupProperties;
	public void* pNext;
	public uint physicalDeviceCount;
	public physicalDevices__FixedBuffer physicalDevices;

	[InlineArray(32)]
	public partial struct physicalDevices__FixedBuffer
	{
		public VkPhysicalDevice e0;
	}
	public VkBool32 subsetAllocation;

	public VkPhysicalDeviceGroupProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceGroupDeviceCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceGroupDeviceCreateInfo;
	public void* pNext;
	public uint physicalDeviceCount;
	public VkPhysicalDevice* pPhysicalDevices;

	public VkDeviceGroupDeviceCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferMemoryRequirementsInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferMemoryRequirementsInfo2;
	public void* pNext;
	public VkBuffer buffer;

	public VkBufferMemoryRequirementsInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageMemoryRequirementsInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageMemoryRequirementsInfo2;
	public void* pNext;
	public VkImage image;

	public VkImageMemoryRequirementsInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageSparseMemoryRequirementsInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageSparseMemoryRequirementsInfo2;
	public void* pNext;
	public VkImage image;

	public VkImageSparseMemoryRequirementsInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryRequirements2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryRequirements2;
	public void* pNext;
	public VkMemoryRequirements memoryRequirements;

	public VkMemoryRequirements2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSparseImageMemoryRequirements2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SparseImageMemoryRequirements2;
	public void* pNext;
	public VkSparseImageMemoryRequirements memoryRequirements;

	public VkSparseImageMemoryRequirements2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFeatures2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFeatures2;
	public void* pNext;
	public VkPhysicalDeviceFeatures features;

	public VkPhysicalDeviceFeatures2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceProperties2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceProperties2;
	public void* pNext;
	public VkPhysicalDeviceProperties properties;

	public VkPhysicalDeviceProperties2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFormatProperties2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FormatProperties2;
	public void* pNext;
	public VkFormatProperties formatProperties;

	public VkFormatProperties2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageFormatProperties2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageFormatProperties2;
	public void* pNext;
	public VkImageFormatProperties imageFormatProperties;

	public VkImageFormatProperties2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageFormatInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageFormatInfo2;
	public void* pNext;
	public VkFormat format;
	public VkImageType type;
	public VkImageTiling tiling;
	public VkImageUsageFlags usage;
	public VkImageCreateFlags flags;

	public VkPhysicalDeviceImageFormatInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueueFamilyProperties2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyProperties2;
	public void* pNext;
	public VkQueueFamilyProperties queueFamilyProperties;

	public VkQueueFamilyProperties2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMemoryProperties2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMemoryProperties2;
	public void* pNext;
	public VkPhysicalDeviceMemoryProperties memoryProperties;

	public VkPhysicalDeviceMemoryProperties2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSparseImageFormatProperties2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SparseImageFormatProperties2;
	public void* pNext;
	public VkSparseImageFormatProperties properties;

	public VkSparseImageFormatProperties2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSparseImageFormatInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSparseImageFormatInfo2;
	public void* pNext;
	public VkFormat format;
	public VkImageType type;
	public VkSampleCountFlags samples;
	public VkImageUsageFlags usage;
	public VkImageTiling tiling;

	public VkPhysicalDeviceSparseImageFormatInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePointClippingProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePointClippingProperties;
	public void* pNext;
	public VkPointClippingBehavior pointClippingBehavior;

	public VkPhysicalDevicePointClippingProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkInputAttachmentAspectReference
{
	public uint subpass;
	public uint inputAttachmentIndex;
	public VkImageAspectFlags aspectMask;
}

public unsafe partial struct VkRenderPassInputAttachmentAspectCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassInputAttachmentAspectCreateInfo;
	public void* pNext;
	public uint aspectReferenceCount;
	public VkInputAttachmentAspectReference* pAspectReferences;

	public VkRenderPassInputAttachmentAspectCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageViewUsageCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewUsageCreateInfo;
	public void* pNext;
	public VkImageUsageFlags usage;

	public VkImageViewUsageCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineTessellationDomainOriginStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineTessellationDomainOriginStateCreateInfo;
	public void* pNext;
	public VkTessellationDomainOrigin domainOrigin;

	public VkPipelineTessellationDomainOriginStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassMultiviewCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassMultiviewCreateInfo;
	public void* pNext;
	public uint subpassCount;
	public uint* pViewMasks;
	public uint dependencyCount;
	public int* pViewOffsets;
	public uint correlationMaskCount;
	public uint* pCorrelationMasks;

	public VkRenderPassMultiviewCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMultiviewFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMultiviewFeatures;
	public void* pNext;
	public VkBool32 multiview;
	public VkBool32 multiviewGeometryShader;
	public VkBool32 multiviewTessellationShader;

	public VkPhysicalDeviceMultiviewFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMultiviewProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMultiviewProperties;
	public void* pNext;
	public uint maxMultiviewViewCount;
	public uint maxMultiviewInstanceIndex;

	public VkPhysicalDeviceMultiviewProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVariablePointersFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVariablePointersFeatures;
	public void* pNext;
	public VkBool32 variablePointersStorageBuffer;
	public VkBool32 variablePointers;

	public VkPhysicalDeviceVariablePointersFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceProtectedMemoryFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceProtectedMemoryFeatures;
	public void* pNext;
	public VkBool32 protectedMemory;

	public VkPhysicalDeviceProtectedMemoryFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceProtectedMemoryProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceProtectedMemoryProperties;
	public void* pNext;
	public VkBool32 protectedNoFault;

	public VkPhysicalDeviceProtectedMemoryProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceQueueInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceQueueInfo2;
	public void* pNext;
	public VkDeviceQueueCreateFlags flags;
	public uint queueFamilyIndex;
	public uint queueIndex;

	public VkDeviceQueueInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkProtectedSubmitInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ProtectedSubmitInfo;
	public void* pNext;
	public VkBool32 protectedSubmit;

	public VkProtectedSubmitInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerYcbcrConversionCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerYcbcrConversionCreateInfo;
	public void* pNext;
	public VkFormat format;
	public VkSamplerYcbcrModelConversion ycbcrModel;
	public VkSamplerYcbcrRange ycbcrRange;
	public VkComponentMapping components;
	public VkChromaLocation xChromaOffset;
	public VkChromaLocation yChromaOffset;
	public VkFilter chromaFilter;
	public VkBool32 forceExplicitReconstruction;

	public VkSamplerYcbcrConversionCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerYcbcrConversionInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerYcbcrConversionInfo;
	public void* pNext;
	public VkSamplerYcbcrConversion conversion;

	public VkSamplerYcbcrConversionInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindImagePlaneMemoryInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindImagePlaneMemoryInfo;
	public void* pNext;
	public VkImageAspectFlags planeAspect;

	public VkBindImagePlaneMemoryInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImagePlaneMemoryRequirementsInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImagePlaneMemoryRequirementsInfo;
	public void* pNext;
	public VkImageAspectFlags planeAspect;

	public VkImagePlaneMemoryRequirementsInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSamplerYcbcrConversionFeatures;
	public void* pNext;
	public VkBool32 samplerYcbcrConversion;

	public VkPhysicalDeviceSamplerYcbcrConversionFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerYcbcrConversionImageFormatProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerYcbcrConversionImageFormatProperties;
	public void* pNext;
	public uint combinedImageSamplerDescriptorCount;

	public VkSamplerYcbcrConversionImageFormatProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDescriptorUpdateTemplateEntry
{
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;
	public VkDescriptorType descriptorType;
	public ulong offset;
	public ulong stride;
}

public unsafe partial struct VkDescriptorUpdateTemplateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorUpdateTemplateCreateInfo;
	public void* pNext;
	public VkDescriptorUpdateTemplateCreateFlags flags;
	public uint descriptorUpdateEntryCount;
	public VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
	public VkDescriptorUpdateTemplateType templateType;
	public VkDescriptorSetLayout descriptorSetLayout;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipelineLayout pipelineLayout;
	public uint set;

	public VkDescriptorUpdateTemplateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkExternalMemoryProperties
{
	public VkExternalMemoryFeatureFlags externalMemoryFeatures;
	public VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
}

public unsafe partial struct VkPhysicalDeviceExternalImageFormatInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalImageFormatInfo;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;

	public VkPhysicalDeviceExternalImageFormatInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalImageFormatProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalImageFormatProperties;
	public void* pNext;
	public VkExternalMemoryProperties externalMemoryProperties;

	public VkExternalImageFormatProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalBufferInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalBufferInfo;
	public void* pNext;
	public VkBufferCreateFlags flags;
	public VkBufferUsageFlags usage;
	public VkExternalMemoryHandleTypeFlags handleType;

	public VkPhysicalDeviceExternalBufferInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalBufferProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalBufferProperties;
	public void* pNext;
	public VkExternalMemoryProperties externalMemoryProperties;

	public VkExternalBufferProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceIDProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceIdProperties;
	public void* pNext;
	public fixed byte deviceUUID[16];
	public fixed byte driverUUID[16];
	public fixed byte deviceLUID[8];
	public uint deviceNodeMask;
	public VkBool32 deviceLUIDValid;

	public VkPhysicalDeviceIDProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalMemoryImageCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalMemoryImageCreateInfo;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;

	public VkExternalMemoryImageCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalMemoryBufferCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalMemoryBufferCreateInfo;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;

	public VkExternalMemoryBufferCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMemoryAllocateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMemoryAllocateInfo;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;

	public VkExportMemoryAllocateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalFenceInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalFenceInfo;
	public void* pNext;
	public VkExternalFenceHandleTypeFlags handleType;

	public VkPhysicalDeviceExternalFenceInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalFenceProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalFenceProperties;
	public void* pNext;
	public VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalFenceHandleTypeFlags compatibleHandleTypes;
	public VkExternalFenceFeatureFlags externalFenceFeatures;

	public VkExternalFenceProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportFenceCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportFenceCreateInfo;
	public void* pNext;
	public VkExternalFenceHandleTypeFlags handleTypes;

	public VkExportFenceCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportSemaphoreCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportSemaphoreCreateInfo;
	public void* pNext;
	public VkExternalSemaphoreHandleTypeFlags handleTypes;

	public VkExportSemaphoreCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalSemaphoreInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalSemaphoreInfo;
	public void* pNext;
	public VkExternalSemaphoreHandleTypeFlags handleType;

	public VkPhysicalDeviceExternalSemaphoreInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalSemaphoreProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalSemaphoreProperties;
	public void* pNext;
	public VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
	public VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;

	public VkExternalSemaphoreProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance3Properties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance3Properties;
	public void* pNext;
	public uint maxPerSetDescriptors;
	public ulong maxMemoryAllocationSize;

	public VkPhysicalDeviceMaintenance3Properties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorSetLayoutSupport : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorSetLayoutSupport;
	public void* pNext;
	public VkBool32 supported;

	public VkDescriptorSetLayoutSupport()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderDrawParametersFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderDrawParametersFeatures;
	public void* pNext;
	public VkBool32 shaderDrawParameters;

	public VkPhysicalDeviceShaderDrawParametersFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVulkan11Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkan11Features;
	public void* pNext;
	public VkBool32 storageBuffer16BitAccess;
	public VkBool32 uniformAndStorageBuffer16BitAccess;
	public VkBool32 storagePushConstant16;
	public VkBool32 storageInputOutput16;
	public VkBool32 multiview;
	public VkBool32 multiviewGeometryShader;
	public VkBool32 multiviewTessellationShader;
	public VkBool32 variablePointersStorageBuffer;
	public VkBool32 variablePointers;
	public VkBool32 protectedMemory;
	public VkBool32 samplerYcbcrConversion;
	public VkBool32 shaderDrawParameters;

	public VkPhysicalDeviceVulkan11Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVulkan11Properties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkan11Properties;
	public void* pNext;
	public fixed byte deviceUUID[16];
	public fixed byte driverUUID[16];
	public fixed byte deviceLUID[8];
	public uint deviceNodeMask;
	public VkBool32 deviceLUIDValid;
	public uint subgroupSize;
	public VkShaderStageFlags subgroupSupportedStages;
	public VkSubgroupFeatureFlags subgroupSupportedOperations;
	public VkBool32 subgroupQuadOperationsInAllStages;
	public VkPointClippingBehavior pointClippingBehavior;
	public uint maxMultiviewViewCount;
	public uint maxMultiviewInstanceIndex;
	public VkBool32 protectedNoFault;
	public uint maxPerSetDescriptors;
	public ulong maxMemoryAllocationSize;

	public VkPhysicalDeviceVulkan11Properties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVulkan12Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkan12Features;
	public void* pNext;
	public VkBool32 samplerMirrorClampToEdge;
	public VkBool32 drawIndirectCount;
	public VkBool32 storageBuffer8BitAccess;
	public VkBool32 uniformAndStorageBuffer8BitAccess;
	public VkBool32 storagePushConstant8;
	public VkBool32 shaderBufferInt64Atomics;
	public VkBool32 shaderSharedInt64Atomics;
	public VkBool32 shaderFloat16;
	public VkBool32 shaderInt8;
	public VkBool32 descriptorIndexing;
	public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
	public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
	public VkBool32 shaderSampledImageArrayNonUniformIndexing;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageImageArrayNonUniformIndexing;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
	public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
	public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
	public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUpdateUnusedWhilePending;
	public VkBool32 descriptorBindingPartiallyBound;
	public VkBool32 descriptorBindingVariableDescriptorCount;
	public VkBool32 runtimeDescriptorArray;
	public VkBool32 samplerFilterMinmax;
	public VkBool32 scalarBlockLayout;
	public VkBool32 imagelessFramebuffer;
	public VkBool32 uniformBufferStandardLayout;
	public VkBool32 shaderSubgroupExtendedTypes;
	public VkBool32 separateDepthStencilLayouts;
	public VkBool32 hostQueryReset;
	public VkBool32 timelineSemaphore;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;
	public VkBool32 vulkanMemoryModel;
	public VkBool32 vulkanMemoryModelDeviceScope;
	public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
	public VkBool32 shaderOutputViewportIndex;
	public VkBool32 shaderOutputLayer;
	public VkBool32 subgroupBroadcastDynamicId;

	public VkPhysicalDeviceVulkan12Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkConformanceVersion
{
	public byte major;
	public byte minor;
	public byte subminor;
	public byte patch;
}

public unsafe partial struct VkPhysicalDeviceVulkan12Properties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkan12Properties;
	public void* pNext;
	public VkDriverId driverID;
	public fixed byte driverName[256];
	public fixed byte driverInfo[256];
	public VkConformanceVersion conformanceVersion;
	public VkShaderFloatControlsIndependence denormBehaviorIndependence;
	public VkShaderFloatControlsIndependence roundingModeIndependence;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
	public VkBool32 shaderDenormPreserveFloat16;
	public VkBool32 shaderDenormPreserveFloat32;
	public VkBool32 shaderDenormPreserveFloat64;
	public VkBool32 shaderDenormFlushToZeroFloat16;
	public VkBool32 shaderDenormFlushToZeroFloat32;
	public VkBool32 shaderDenormFlushToZeroFloat64;
	public VkBool32 shaderRoundingModeRTEFloat16;
	public VkBool32 shaderRoundingModeRTEFloat32;
	public VkBool32 shaderRoundingModeRTEFloat64;
	public VkBool32 shaderRoundingModeRTZFloat16;
	public VkBool32 shaderRoundingModeRTZFloat32;
	public VkBool32 shaderRoundingModeRTZFloat64;
	public uint maxUpdateAfterBindDescriptorsInAllPools;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
	public VkBool32 robustBufferAccessUpdateAfterBind;
	public VkBool32 quadDivergentImplicitLod;
	public uint maxPerStageDescriptorUpdateAfterBindSamplers;
	public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint maxPerStageUpdateAfterBindResources;
	public uint maxDescriptorSetUpdateAfterBindSamplers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindSampledImages;
	public uint maxDescriptorSetUpdateAfterBindStorageImages;
	public uint maxDescriptorSetUpdateAfterBindInputAttachments;
	public VkResolveModeFlags supportedDepthResolveModes;
	public VkResolveModeFlags supportedStencilResolveModes;
	public VkBool32 independentResolveNone;
	public VkBool32 independentResolve;
	public VkBool32 filterMinmaxSingleComponentFormats;
	public VkBool32 filterMinmaxImageComponentMapping;
	public ulong maxTimelineSemaphoreValueDifference;
	public VkSampleCountFlags framebufferIntegerColorSampleCounts;

	public VkPhysicalDeviceVulkan12Properties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageFormatListCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageFormatListCreateInfo;
	public void* pNext;
	public uint viewFormatCount;
	public VkFormat* pViewFormats;

	public VkImageFormatListCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAttachmentDescription2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AttachmentDescription2;
	public void* pNext;
	public VkAttachmentDescriptionFlags flags;
	public VkFormat format;
	public VkSampleCountFlags samples;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkAttachmentLoadOp stencilLoadOp;
	public VkAttachmentStoreOp stencilStoreOp;
	public VkImageLayout initialLayout;
	public VkImageLayout finalLayout;

	public VkAttachmentDescription2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAttachmentReference2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AttachmentReference2;
	public void* pNext;
	public uint attachment;
	public VkImageLayout layout;
	public VkImageAspectFlags aspectMask;

	public VkAttachmentReference2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubpassDescription2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubpassDescription2;
	public void* pNext;
	public VkSubpassDescriptionFlags flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint viewMask;
	public uint inputAttachmentCount;
	public VkAttachmentReference2* pInputAttachments;
	public uint colorAttachmentCount;
	public VkAttachmentReference2* pColorAttachments;
	public VkAttachmentReference2* pResolveAttachments;
	public VkAttachmentReference2* pDepthStencilAttachment;
	public uint preserveAttachmentCount;
	public uint* pPreserveAttachments;

	public VkSubpassDescription2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubpassDependency2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubpassDependency2;
	public void* pNext;
	public uint srcSubpass;
	public uint dstSubpass;
	public VkPipelineStageFlags srcStageMask;
	public VkPipelineStageFlags dstStageMask;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkDependencyFlags dependencyFlags;
	public int viewOffset;

	public VkSubpassDependency2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassCreateInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassCreateInfo2;
	public void* pNext;
	public VkRenderPassCreateFlags flags;
	public uint attachmentCount;
	public VkAttachmentDescription2* pAttachments;
	public uint subpassCount;
	public VkSubpassDescription2* pSubpasses;
	public uint dependencyCount;
	public VkSubpassDependency2* pDependencies;
	public uint correlatedViewMaskCount;
	public uint* pCorrelatedViewMasks;

	public VkRenderPassCreateInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubpassBeginInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubpassBeginInfo;
	public void* pNext;
	public VkSubpassContents contents;

	public VkSubpassBeginInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubpassEndInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubpassEndInfo;
	public void* pNext;

	public VkSubpassEndInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevice8BitStorageFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevice8BitStorageFeatures;
	public void* pNext;
	public VkBool32 storageBuffer8BitAccess;
	public VkBool32 uniformAndStorageBuffer8BitAccess;
	public VkBool32 storagePushConstant8;

	public VkPhysicalDevice8BitStorageFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDriverProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDriverProperties;
	public void* pNext;
	public VkDriverId driverID;
	public fixed byte driverName[256];
	public fixed byte driverInfo[256];
	public VkConformanceVersion conformanceVersion;

	public VkPhysicalDeviceDriverProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderAtomicInt64Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderAtomicInt64Features;
	public void* pNext;
	public VkBool32 shaderBufferInt64Atomics;
	public VkBool32 shaderSharedInt64Atomics;

	public VkPhysicalDeviceShaderAtomicInt64Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderFloat16Int8Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderFloat16Int8Features;
	public void* pNext;
	public VkBool32 shaderFloat16;
	public VkBool32 shaderInt8;

	public VkPhysicalDeviceShaderFloat16Int8Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFloatControlsProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFloatControlsProperties;
	public void* pNext;
	public VkShaderFloatControlsIndependence denormBehaviorIndependence;
	public VkShaderFloatControlsIndependence roundingModeIndependence;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
	public VkBool32 shaderDenormPreserveFloat16;
	public VkBool32 shaderDenormPreserveFloat32;
	public VkBool32 shaderDenormPreserveFloat64;
	public VkBool32 shaderDenormFlushToZeroFloat16;
	public VkBool32 shaderDenormFlushToZeroFloat32;
	public VkBool32 shaderDenormFlushToZeroFloat64;
	public VkBool32 shaderRoundingModeRTEFloat16;
	public VkBool32 shaderRoundingModeRTEFloat32;
	public VkBool32 shaderRoundingModeRTEFloat64;
	public VkBool32 shaderRoundingModeRTZFloat16;
	public VkBool32 shaderRoundingModeRTZFloat32;
	public VkBool32 shaderRoundingModeRTZFloat64;

	public VkPhysicalDeviceFloatControlsProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorSetLayoutBindingFlagsCreateInfo;
	public void* pNext;
	public uint bindingCount;
	public VkDescriptorBindingFlags* pBindingFlags;

	public VkDescriptorSetLayoutBindingFlagsCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorIndexingFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorIndexingFeatures;
	public void* pNext;
	public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
	public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
	public VkBool32 shaderSampledImageArrayNonUniformIndexing;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageImageArrayNonUniformIndexing;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
	public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
	public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
	public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUpdateUnusedWhilePending;
	public VkBool32 descriptorBindingPartiallyBound;
	public VkBool32 descriptorBindingVariableDescriptorCount;
	public VkBool32 runtimeDescriptorArray;

	public VkPhysicalDeviceDescriptorIndexingFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorIndexingProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorIndexingProperties;
	public void* pNext;
	public uint maxUpdateAfterBindDescriptorsInAllPools;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
	public VkBool32 robustBufferAccessUpdateAfterBind;
	public VkBool32 quadDivergentImplicitLod;
	public uint maxPerStageDescriptorUpdateAfterBindSamplers;
	public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint maxPerStageUpdateAfterBindResources;
	public uint maxDescriptorSetUpdateAfterBindSamplers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindSampledImages;
	public uint maxDescriptorSetUpdateAfterBindStorageImages;
	public uint maxDescriptorSetUpdateAfterBindInputAttachments;

	public VkPhysicalDeviceDescriptorIndexingProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorSetVariableDescriptorCountAllocateInfo;
	public void* pNext;
	public uint descriptorSetCount;
	public uint* pDescriptorCounts;

	public VkDescriptorSetVariableDescriptorCountAllocateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorSetVariableDescriptorCountLayoutSupport;
	public void* pNext;
	public uint maxVariableDescriptorCount;

	public VkDescriptorSetVariableDescriptorCountLayoutSupport()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubpassDescriptionDepthStencilResolve : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubpassDescriptionDepthStencilResolve;
	public void* pNext;
	public VkResolveModeFlags depthResolveMode;
	public VkResolveModeFlags stencilResolveMode;
	public VkAttachmentReference2* pDepthStencilResolveAttachment;

	public VkSubpassDescriptionDepthStencilResolve()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDepthStencilResolveProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDepthStencilResolveProperties;
	public void* pNext;
	public VkResolveModeFlags supportedDepthResolveModes;
	public VkResolveModeFlags supportedStencilResolveModes;
	public VkBool32 independentResolveNone;
	public VkBool32 independentResolve;

	public VkPhysicalDeviceDepthStencilResolveProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceScalarBlockLayoutFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceScalarBlockLayoutFeatures;
	public void* pNext;
	public VkBool32 scalarBlockLayout;

	public VkPhysicalDeviceScalarBlockLayoutFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageStencilUsageCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageStencilUsageCreateInfo;
	public void* pNext;
	public VkImageUsageFlags stencilUsage;

	public VkImageStencilUsageCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerReductionModeCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerReductionModeCreateInfo;
	public void* pNext;
	public VkSamplerReductionMode reductionMode;

	public VkSamplerReductionModeCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSamplerFilterMinmaxProperties;
	public void* pNext;
	public VkBool32 filterMinmaxSingleComponentFormats;
	public VkBool32 filterMinmaxImageComponentMapping;

	public VkPhysicalDeviceSamplerFilterMinmaxProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVulkanMemoryModelFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkanMemoryModelFeatures;
	public void* pNext;
	public VkBool32 vulkanMemoryModel;
	public VkBool32 vulkanMemoryModelDeviceScope;
	public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;

	public VkPhysicalDeviceVulkanMemoryModelFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImagelessFramebufferFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImagelessFramebufferFeatures;
	public void* pNext;
	public VkBool32 imagelessFramebuffer;

	public VkPhysicalDeviceImagelessFramebufferFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFramebufferAttachmentImageInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FramebufferAttachmentImageInfo;
	public void* pNext;
	public VkImageCreateFlags flags;
	public VkImageUsageFlags usage;
	public uint width;
	public uint height;
	public uint layerCount;
	public uint viewFormatCount;
	public VkFormat* pViewFormats;

	public VkFramebufferAttachmentImageInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFramebufferAttachmentsCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FramebufferAttachmentsCreateInfo;
	public void* pNext;
	public uint attachmentImageInfoCount;
	public VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;

	public VkFramebufferAttachmentsCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassAttachmentBeginInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassAttachmentBeginInfo;
	public void* pNext;
	public uint attachmentCount;
	public VkImageView* pAttachments;

	public VkRenderPassAttachmentBeginInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceUniformBufferStandardLayoutFeatures;
	public void* pNext;
	public VkBool32 uniformBufferStandardLayout;

	public VkPhysicalDeviceUniformBufferStandardLayoutFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderSubgroupExtendedTypesFeatures;
	public void* pNext;
	public VkBool32 shaderSubgroupExtendedTypes;

	public VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSeparateDepthStencilLayoutsFeatures;
	public void* pNext;
	public VkBool32 separateDepthStencilLayouts;

	public VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAttachmentReferenceStencilLayout : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AttachmentReferenceStencilLayout;
	public void* pNext;
	public VkImageLayout stencilLayout;

	public VkAttachmentReferenceStencilLayout()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAttachmentDescriptionStencilLayout : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AttachmentDescriptionStencilLayout;
	public void* pNext;
	public VkImageLayout stencilInitialLayout;
	public VkImageLayout stencilFinalLayout;

	public VkAttachmentDescriptionStencilLayout()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceHostQueryResetFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceHostQueryResetFeatures;
	public void* pNext;
	public VkBool32 hostQueryReset;

	public VkPhysicalDeviceHostQueryResetFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTimelineSemaphoreFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTimelineSemaphoreFeatures;
	public void* pNext;
	public VkBool32 timelineSemaphore;

	public VkPhysicalDeviceTimelineSemaphoreFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTimelineSemaphoreProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTimelineSemaphoreProperties;
	public void* pNext;
	public ulong maxTimelineSemaphoreValueDifference;

	public VkPhysicalDeviceTimelineSemaphoreProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSemaphoreTypeCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SemaphoreTypeCreateInfo;
	public void* pNext;
	public VkSemaphoreType semaphoreType;
	public ulong initialValue;

	public VkSemaphoreTypeCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTimelineSemaphoreSubmitInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TimelineSemaphoreSubmitInfo;
	public void* pNext;
	public uint waitSemaphoreValueCount;
	public ulong* pWaitSemaphoreValues;
	public uint signalSemaphoreValueCount;
	public ulong* pSignalSemaphoreValues;

	public VkTimelineSemaphoreSubmitInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSemaphoreWaitInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SemaphoreWaitInfo;
	public void* pNext;
	public VkSemaphoreWaitFlags flags;
	public uint semaphoreCount;
	public VkSemaphore* pSemaphores;
	public ulong* pValues;

	public VkSemaphoreWaitInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSemaphoreSignalInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SemaphoreSignalInfo;
	public void* pNext;
	public VkSemaphore semaphore;
	public ulong value;

	public VkSemaphoreSignalInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceBufferDeviceAddressFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceBufferDeviceAddressFeatures;
	public void* pNext;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;

	public VkPhysicalDeviceBufferDeviceAddressFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferDeviceAddressInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferDeviceAddressInfo;
	public void* pNext;
	public VkBuffer buffer;

	public VkBufferDeviceAddressInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferOpaqueCaptureAddressCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferOpaqueCaptureAddressCreateInfo;
	public void* pNext;
	public ulong opaqueCaptureAddress;

	public VkBufferOpaqueCaptureAddressCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryOpaqueCaptureAddressAllocateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryOpaqueCaptureAddressAllocateInfo;
	public void* pNext;
	public ulong opaqueCaptureAddress;

	public VkMemoryOpaqueCaptureAddressAllocateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceMemoryOpaqueCaptureAddressInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceMemoryOpaqueCaptureAddressInfo;
	public void* pNext;
	public VkDeviceMemory memory;

	public VkDeviceMemoryOpaqueCaptureAddressInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVulkan13Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkan13Features;
	public void* pNext;
	public VkBool32 robustImageAccess;
	public VkBool32 inlineUniformBlock;
	public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
	public VkBool32 pipelineCreationCacheControl;
	public VkBool32 privateData;
	public VkBool32 shaderDemoteToHelperInvocation;
	public VkBool32 shaderTerminateInvocation;
	public VkBool32 subgroupSizeControl;
	public VkBool32 computeFullSubgroups;
	public VkBool32 synchronization2;
	public VkBool32 textureCompressionASTC_HDR;
	public VkBool32 shaderZeroInitializeWorkgroupMemory;
	public VkBool32 dynamicRendering;
	public VkBool32 shaderIntegerDotProduct;
	public VkBool32 maintenance4;

	public VkPhysicalDeviceVulkan13Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVulkan13Properties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkan13Properties;
	public void* pNext;
	public uint minSubgroupSize;
	public uint maxSubgroupSize;
	public uint maxComputeWorkgroupSubgroups;
	public VkShaderStageFlags requiredSubgroupSizeStages;
	public uint maxInlineUniformBlockSize;
	public uint maxPerStageDescriptorInlineUniformBlocks;
	public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	public uint maxDescriptorSetInlineUniformBlocks;
	public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	public uint maxInlineUniformTotalSize;
	public VkBool32 integerDotProduct8BitUnsignedAccelerated;
	public VkBool32 integerDotProduct8BitSignedAccelerated;
	public VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProduct16BitUnsignedAccelerated;
	public VkBool32 integerDotProduct16BitSignedAccelerated;
	public VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct32BitUnsignedAccelerated;
	public VkBool32 integerDotProduct32BitSignedAccelerated;
	public VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct64BitUnsignedAccelerated;
	public VkBool32 integerDotProduct64BitSignedAccelerated;
	public VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
	public ulong storageTexelBufferOffsetAlignmentBytes;
	public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
	public ulong uniformTexelBufferOffsetAlignmentBytes;
	public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
	public ulong maxBufferSize;

	public VkPhysicalDeviceVulkan13Properties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkPipelineCreationFeedback
{
	public VkPipelineCreationFeedbackFlags flags;
	public ulong duration;
}

public unsafe partial struct VkPipelineCreationFeedbackCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineCreationFeedbackCreateInfo;
	public void* pNext;
	public VkPipelineCreationFeedback* pPipelineCreationFeedback;
	public uint pipelineStageCreationFeedbackCount;
	public VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;

	public VkPipelineCreationFeedbackCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderTerminateInvocationFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderTerminateInvocationFeatures;
	public void* pNext;
	public VkBool32 shaderTerminateInvocation;

	public VkPhysicalDeviceShaderTerminateInvocationFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceToolProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceToolProperties;
	public void* pNext;
	public fixed byte name[256];
	public fixed byte version[256];
	public VkToolPurposeFlags purposes;
	public fixed byte description[256];
	public fixed byte layer[256];

	public VkPhysicalDeviceToolProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderDemoteToHelperInvocationFeatures;
	public void* pNext;
	public VkBool32 shaderDemoteToHelperInvocation;

	public VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePrivateDataFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePrivateDataFeatures;
	public void* pNext;
	public VkBool32 privateData;

	public VkPhysicalDevicePrivateDataFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDevicePrivateDataCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DevicePrivateDataCreateInfo;
	public void* pNext;
	public uint privateDataSlotRequestCount;

	public VkDevicePrivateDataCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPrivateDataSlotCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PrivateDataSlotCreateInfo;
	public void* pNext;
	public VkPrivateDataSlotCreateFlags flags;

	public VkPrivateDataSlotCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineCreationCacheControlFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineCreationCacheControlFeatures;
	public void* pNext;
	public VkBool32 pipelineCreationCacheControl;

	public VkPhysicalDevicePipelineCreationCacheControlFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryBarrier2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryBarrier2;
	public void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;

	public VkMemoryBarrier2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferMemoryBarrier2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferMemoryBarrier2;
	public void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;

	public VkBufferMemoryBarrier2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageMemoryBarrier2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageMemoryBarrier2;
	public void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;
	public VkImageLayout oldLayout;
	public VkImageLayout newLayout;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkImage image;
	public VkImageSubresourceRange subresourceRange;

	public VkImageMemoryBarrier2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDependencyInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DependencyInfo;
	public void* pNext;
	public VkDependencyFlags dependencyFlags;
	public uint memoryBarrierCount;
	public VkMemoryBarrier2* pMemoryBarriers;
	public uint bufferMemoryBarrierCount;
	public VkBufferMemoryBarrier2* pBufferMemoryBarriers;
	public uint imageMemoryBarrierCount;
	public VkImageMemoryBarrier2* pImageMemoryBarriers;

	public VkDependencyInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSemaphoreSubmitInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SemaphoreSubmitInfo;
	public void* pNext;
	public VkSemaphore semaphore;
	public ulong value;
	public VkPipelineStageFlags2 stageMask;
	public uint deviceIndex;

	public VkSemaphoreSubmitInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandBufferSubmitInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandBufferSubmitInfo;
	public void* pNext;
	public VkCommandBuffer commandBuffer;
	public uint deviceMask;

	public VkCommandBufferSubmitInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubmitInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubmitInfo2;
	public void* pNext;
	public VkSubmitFlags flags;
	public uint waitSemaphoreInfoCount;
	public VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
	public uint commandBufferInfoCount;
	public VkCommandBufferSubmitInfo* pCommandBufferInfos;
	public uint signalSemaphoreInfoCount;
	public VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;

	public VkSubmitInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSynchronization2Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSynchronization2Features;
	public void* pNext;
	public VkBool32 synchronization2;

	public VkPhysicalDeviceSynchronization2Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
	public void* pNext;
	public VkBool32 shaderZeroInitializeWorkgroupMemory;

	public VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageRobustnessFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageRobustnessFeatures;
	public void* pNext;
	public VkBool32 robustImageAccess;

	public VkPhysicalDeviceImageRobustnessFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferCopy2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferCopy2;
	public void* pNext;
	public ulong srcOffset;
	public ulong dstOffset;
	public ulong size;

	public VkBufferCopy2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyBufferInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyBufferInfo2;
	public void* pNext;
	public VkBuffer srcBuffer;
	public VkBuffer dstBuffer;
	public uint regionCount;
	public VkBufferCopy2* pRegions;

	public VkCopyBufferInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageCopy2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageCopy2;
	public void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;

	public VkImageCopy2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyImageInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyImageInfo2;
	public void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public VkImageCopy2* pRegions;

	public VkCopyImageInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferImageCopy2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferImageCopy2;
	public void* pNext;
	public ulong bufferOffset;
	public uint bufferRowLength;
	public uint bufferImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;

	public VkBufferImageCopy2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyBufferToImageInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyBufferToImageInfo2;
	public void* pNext;
	public VkBuffer srcBuffer;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public VkBufferImageCopy2* pRegions;

	public VkCopyBufferToImageInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyImageToBufferInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyImageToBufferInfo2;
	public void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkBuffer dstBuffer;
	public uint regionCount;
	public VkBufferImageCopy2* pRegions;

	public VkCopyImageToBufferInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageBlit2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageBlit2;
	public void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public srcOffsets__FixedBuffer srcOffsets;

	[InlineArray(2)]
	public partial struct srcOffsets__FixedBuffer
	{
		public VkOffset3D e0;
	}
	public VkImageSubresourceLayers dstSubresource;
	public dstOffsets__FixedBuffer dstOffsets;

	[InlineArray(2)]
	public partial struct dstOffsets__FixedBuffer
	{
		public VkOffset3D e0;
	}

	public VkImageBlit2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBlitImageInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BlitImageInfo2;
	public void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public VkImageBlit2* pRegions;
	public VkFilter filter;

	public VkBlitImageInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageResolve2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageResolve2;
	public void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;

	public VkImageResolve2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkResolveImageInfo2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ResolveImageInfo2;
	public void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public VkImageResolve2* pRegions;

	public VkResolveImageInfo2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSubgroupSizeControlFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSubgroupSizeControlFeatures;
	public void* pNext;
	public VkBool32 subgroupSizeControl;
	public VkBool32 computeFullSubgroups;

	public VkPhysicalDeviceSubgroupSizeControlFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSubgroupSizeControlProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSubgroupSizeControlProperties;
	public void* pNext;
	public uint minSubgroupSize;
	public uint maxSubgroupSize;
	public uint maxComputeWorkgroupSubgroups;
	public VkShaderStageFlags requiredSubgroupSizeStages;

	public VkPhysicalDeviceSubgroupSizeControlProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineShaderStageRequiredSubgroupSizeCreateInfo;
	public void* pNext;
	public uint requiredSubgroupSize;

	public VkPipelineShaderStageRequiredSubgroupSizeCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceInlineUniformBlockFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceInlineUniformBlockFeatures;
	public void* pNext;
	public VkBool32 inlineUniformBlock;
	public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;

	public VkPhysicalDeviceInlineUniformBlockFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceInlineUniformBlockProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceInlineUniformBlockProperties;
	public void* pNext;
	public uint maxInlineUniformBlockSize;
	public uint maxPerStageDescriptorInlineUniformBlocks;
	public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	public uint maxDescriptorSetInlineUniformBlocks;
	public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;

	public VkPhysicalDeviceInlineUniformBlockProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWriteDescriptorSetInlineUniformBlock : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WriteDescriptorSetInlineUniformBlock;
	public void* pNext;
	public uint dataSize;
	public void* pData;

	public VkWriteDescriptorSetInlineUniformBlock()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorPoolInlineUniformBlockCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorPoolInlineUniformBlockCreateInfo;
	public void* pNext;
	public uint maxInlineUniformBlockBindings;

	public VkDescriptorPoolInlineUniformBlockCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTextureCompressionASTCHDRFeatures;
	public void* pNext;
	public VkBool32 textureCompressionASTC_HDR;

	public VkPhysicalDeviceTextureCompressionASTCHDRFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderingAttachmentInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderingAttachmentInfo;
	public void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
	public VkResolveModeFlags resolveMode;
	public VkImageView resolveImageView;
	public VkImageLayout resolveImageLayout;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkClearValue clearValue;

	public VkRenderingAttachmentInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderingInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderingInfo;
	public void* pNext;
	public VkRenderingFlags flags;
	public VkRect2D renderArea;
	public uint layerCount;
	public uint viewMask;
	public uint colorAttachmentCount;
	public VkRenderingAttachmentInfo* pColorAttachments;
	public VkRenderingAttachmentInfo* pDepthAttachment;
	public VkRenderingAttachmentInfo* pStencilAttachment;

	public VkRenderingInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRenderingCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRenderingCreateInfo;
	public void* pNext;
	public uint viewMask;
	public uint colorAttachmentCount;
	public VkFormat* pColorAttachmentFormats;
	public VkFormat depthAttachmentFormat;
	public VkFormat stencilAttachmentFormat;

	public VkPipelineRenderingCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDynamicRenderingFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDynamicRenderingFeatures;
	public void* pNext;
	public VkBool32 dynamicRendering;

	public VkPhysicalDeviceDynamicRenderingFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandBufferInheritanceRenderingInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandBufferInheritanceRenderingInfo;
	public void* pNext;
	public VkRenderingFlags flags;
	public uint viewMask;
	public uint colorAttachmentCount;
	public VkFormat* pColorAttachmentFormats;
	public VkFormat depthAttachmentFormat;
	public VkFormat stencilAttachmentFormat;
	public VkSampleCountFlags rasterizationSamples;

	public VkCommandBufferInheritanceRenderingInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderIntegerDotProductFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderIntegerDotProductFeatures;
	public void* pNext;
	public VkBool32 shaderIntegerDotProduct;

	public VkPhysicalDeviceShaderIntegerDotProductFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderIntegerDotProductProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderIntegerDotProductProperties;
	public void* pNext;
	public VkBool32 integerDotProduct8BitUnsignedAccelerated;
	public VkBool32 integerDotProduct8BitSignedAccelerated;
	public VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProduct16BitUnsignedAccelerated;
	public VkBool32 integerDotProduct16BitSignedAccelerated;
	public VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct32BitUnsignedAccelerated;
	public VkBool32 integerDotProduct32BitSignedAccelerated;
	public VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct64BitUnsignedAccelerated;
	public VkBool32 integerDotProduct64BitSignedAccelerated;
	public VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;

	public VkPhysicalDeviceShaderIntegerDotProductProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTexelBufferAlignmentProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTexelBufferAlignmentProperties;
	public void* pNext;
	public ulong storageTexelBufferOffsetAlignmentBytes;
	public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
	public ulong uniformTexelBufferOffsetAlignmentBytes;
	public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;

	public VkPhysicalDeviceTexelBufferAlignmentProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFormatProperties3 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FormatProperties3;
	public void* pNext;
	public VkFormatFeatureFlags2 linearTilingFeatures;
	public VkFormatFeatureFlags2 optimalTilingFeatures;
	public VkFormatFeatureFlags2 bufferFeatures;

	public VkFormatProperties3()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance4Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance4Features;
	public void* pNext;
	public VkBool32 maintenance4;

	public VkPhysicalDeviceMaintenance4Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance4Properties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance4Properties;
	public void* pNext;
	public ulong maxBufferSize;

	public VkPhysicalDeviceMaintenance4Properties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceBufferMemoryRequirements : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceBufferMemoryRequirements;
	public void* pNext;
	public VkBufferCreateInfo* pCreateInfo;

	public VkDeviceBufferMemoryRequirements()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceImageMemoryRequirements : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceImageMemoryRequirements;
	public void* pNext;
	public VkImageCreateInfo* pCreateInfo;
	public VkImageAspectFlags planeAspect;

	public VkDeviceImageMemoryRequirements()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVulkan14Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkan14Features;
	public void* pNext;
	public VkBool32 globalPriorityQuery;
	public VkBool32 shaderSubgroupRotate;
	public VkBool32 shaderSubgroupRotateClustered;
	public VkBool32 shaderFloatControls2;
	public VkBool32 shaderExpectAssume;
	public VkBool32 rectangularLines;
	public VkBool32 bresenhamLines;
	public VkBool32 smoothLines;
	public VkBool32 stippledRectangularLines;
	public VkBool32 stippledBresenhamLines;
	public VkBool32 stippledSmoothLines;
	public VkBool32 vertexAttributeInstanceRateDivisor;
	public VkBool32 vertexAttributeInstanceRateZeroDivisor;
	public VkBool32 indexTypeUint8;
	public VkBool32 dynamicRenderingLocalRead;
	public VkBool32 maintenance5;
	public VkBool32 maintenance6;
	public VkBool32 pipelineProtectedAccess;
	public VkBool32 pipelineRobustness;
	public VkBool32 hostImageCopy;
	public VkBool32 pushDescriptor;

	public VkPhysicalDeviceVulkan14Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVulkan14Properties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVulkan14Properties;
	public void* pNext;
	public uint lineSubPixelPrecisionBits;
	public uint maxVertexAttribDivisor;
	public VkBool32 supportsNonZeroFirstInstance;
	public uint maxPushDescriptors;
	public VkBool32 dynamicRenderingLocalReadDepthStencilAttachments;
	public VkBool32 dynamicRenderingLocalReadMultisampledAttachments;
	public VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
	public VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
	public VkBool32 depthStencilSwizzleOneSupport;
	public VkBool32 polygonModePointSize;
	public VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
	public VkBool32 nonStrictWideLinesUseParallelogram;
	public VkBool32 blockTexelViewCompatibleMultipleLayers;
	public uint maxCombinedImageSamplerDescriptorCount;
	public VkBool32 fragmentShadingRateClampCombinerInputs;
	public VkPipelineRobustnessBufferBehavior defaultRobustnessStorageBuffers;
	public VkPipelineRobustnessBufferBehavior defaultRobustnessUniformBuffers;
	public VkPipelineRobustnessBufferBehavior defaultRobustnessVertexInputs;
	public VkPipelineRobustnessImageBehavior defaultRobustnessImages;
	public uint copySrcLayoutCount;
	public VkImageLayout* pCopySrcLayouts;
	public uint copyDstLayoutCount;
	public VkImageLayout* pCopyDstLayouts;
	public fixed byte optimalTilingLayoutUUID[16];
	public VkBool32 identicalMemoryTypeRequirements;

	public VkPhysicalDeviceVulkan14Properties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceQueueGlobalPriorityCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceQueueGlobalPriorityCreateInfo;
	public void* pNext;
	public VkQueueGlobalPriority globalPriority;

	public VkDeviceQueueGlobalPriorityCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceGlobalPriorityQueryFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceGlobalPriorityQueryFeatures;
	public void* pNext;
	public VkBool32 globalPriorityQuery;

	public VkPhysicalDeviceGlobalPriorityQueryFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueueFamilyGlobalPriorityProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyGlobalPriorityProperties;
	public void* pNext;
	public uint priorityCount;
	public priorities__FixedBuffer priorities;

	[InlineArray(16)]
	public partial struct priorities__FixedBuffer
	{
		public VkQueueGlobalPriority e0;
	}

	public VkQueueFamilyGlobalPriorityProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderSubgroupRotateFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderSubgroupRotateFeatures;
	public void* pNext;
	public VkBool32 shaderSubgroupRotate;
	public VkBool32 shaderSubgroupRotateClustered;

	public VkPhysicalDeviceShaderSubgroupRotateFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderFloatControls2Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderFloatControls2Features;
	public void* pNext;
	public VkBool32 shaderFloatControls2;

	public VkPhysicalDeviceShaderFloatControls2Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderExpectAssumeFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderExpectAssumeFeatures;
	public void* pNext;
	public VkBool32 shaderExpectAssume;

	public VkPhysicalDeviceShaderExpectAssumeFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLineRasterizationFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLineRasterizationFeatures;
	public void* pNext;
	public VkBool32 rectangularLines;
	public VkBool32 bresenhamLines;
	public VkBool32 smoothLines;
	public VkBool32 stippledRectangularLines;
	public VkBool32 stippledBresenhamLines;
	public VkBool32 stippledSmoothLines;

	public VkPhysicalDeviceLineRasterizationFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLineRasterizationProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLineRasterizationProperties;
	public void* pNext;
	public uint lineSubPixelPrecisionBits;

	public VkPhysicalDeviceLineRasterizationProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRasterizationLineStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRasterizationLineStateCreateInfo;
	public void* pNext;
	public VkLineRasterizationMode lineRasterizationMode;
	public VkBool32 stippledLineEnable;
	public uint lineStippleFactor;
	public ushort lineStipplePattern;

	public VkPipelineRasterizationLineStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVertexAttributeDivisorProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorProperties;
	public void* pNext;
	public uint maxVertexAttribDivisor;
	public VkBool32 supportsNonZeroFirstInstance;

	public VkPhysicalDeviceVertexAttributeDivisorProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkVertexInputBindingDivisorDescription
{
	public uint binding;
	public uint divisor;
}

public unsafe partial struct VkPipelineVertexInputDivisorStateCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineVertexInputDivisorStateCreateInfo;
	public void* pNext;
	public uint vertexBindingDivisorCount;
	public VkVertexInputBindingDivisorDescription* pVertexBindingDivisors;

	public VkPipelineVertexInputDivisorStateCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVertexAttributeDivisorFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorFeatures;
	public void* pNext;
	public VkBool32 vertexAttributeInstanceRateDivisor;
	public VkBool32 vertexAttributeInstanceRateZeroDivisor;

	public VkPhysicalDeviceVertexAttributeDivisorFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceIndexTypeUint8Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceIndexTypeUint8Features;
	public void* pNext;
	public VkBool32 indexTypeUint8;

	public VkPhysicalDeviceIndexTypeUint8Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryMapInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryMapInfo;
	public void* pNext;
	public VkMemoryMapFlags flags;
	public VkDeviceMemory memory;
	public ulong offset;
	public ulong size;

	public VkMemoryMapInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryUnmapInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryUnmapInfo;
	public void* pNext;
	public VkMemoryUnmapFlags flags;
	public VkDeviceMemory memory;

	public VkMemoryUnmapInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance5Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance5Features;
	public void* pNext;
	public VkBool32 maintenance5;

	public VkPhysicalDeviceMaintenance5Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance5Properties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance5Properties;
	public void* pNext;
	public VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
	public VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
	public VkBool32 depthStencilSwizzleOneSupport;
	public VkBool32 polygonModePointSize;
	public VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
	public VkBool32 nonStrictWideLinesUseParallelogram;

	public VkPhysicalDeviceMaintenance5Properties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderingAreaInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderingAreaInfo;
	public void* pNext;
	public uint viewMask;
	public uint colorAttachmentCount;
	public VkFormat* pColorAttachmentFormats;
	public VkFormat depthAttachmentFormat;
	public VkFormat stencilAttachmentFormat;

	public VkRenderingAreaInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageSubresource2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageSubresource2;
	public void* pNext;
	public VkImageSubresource imageSubresource;

	public VkImageSubresource2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceImageSubresourceInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceImageSubresourceInfo;
	public void* pNext;
	public VkImageCreateInfo* pCreateInfo;
	public VkImageSubresource2* pSubresource;

	public VkDeviceImageSubresourceInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubresourceLayout2 : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubresourceLayout2;
	public void* pNext;
	public VkSubresourceLayout subresourceLayout;

	public VkSubresourceLayout2()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineCreateFlags2CreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineCreateFlags2CreateInfo;
	public void* pNext;
	public VkPipelineCreateFlags2 flags;

	public VkPipelineCreateFlags2CreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferUsageFlags2CreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferUsageFlags2CreateInfo;
	public void* pNext;
	public VkBufferUsageFlags2 usage;

	public VkBufferUsageFlags2CreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePushDescriptorProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePushDescriptorProperties;
	public void* pNext;
	public uint maxPushDescriptors;

	public VkPhysicalDevicePushDescriptorProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDynamicRenderingLocalReadFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDynamicRenderingLocalReadFeatures;
	public void* pNext;
	public VkBool32 dynamicRenderingLocalRead;

	public VkPhysicalDeviceDynamicRenderingLocalReadFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderingAttachmentLocationInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderingAttachmentLocationInfo;
	public void* pNext;
	public uint colorAttachmentCount;
	public uint* pColorAttachmentLocations;

	public VkRenderingAttachmentLocationInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderingInputAttachmentIndexInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderingInputAttachmentIndexInfo;
	public void* pNext;
	public uint colorAttachmentCount;
	public uint* pColorAttachmentInputIndices;
	public uint* pDepthInputAttachmentIndex;
	public uint* pStencilInputAttachmentIndex;

	public VkRenderingInputAttachmentIndexInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance6Features : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance6Features;
	public void* pNext;
	public VkBool32 maintenance6;

	public VkPhysicalDeviceMaintenance6Features()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance6Properties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance6Properties;
	public void* pNext;
	public VkBool32 blockTexelViewCompatibleMultipleLayers;
	public uint maxCombinedImageSamplerDescriptorCount;
	public VkBool32 fragmentShadingRateClampCombinerInputs;

	public VkPhysicalDeviceMaintenance6Properties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindMemoryStatus : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindMemoryStatus;
	public void* pNext;
	public VkResult* pResult;

	public VkBindMemoryStatus()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindDescriptorSetsInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindDescriptorSetsInfo;
	public void* pNext;
	public VkShaderStageFlags stageFlags;
	public VkPipelineLayout layout;
	public uint firstSet;
	public uint descriptorSetCount;
	public VkDescriptorSet* pDescriptorSets;
	public uint dynamicOffsetCount;
	public uint* pDynamicOffsets;

	public VkBindDescriptorSetsInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPushConstantsInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PushConstantsInfo;
	public void* pNext;
	public VkPipelineLayout layout;
	public VkShaderStageFlags stageFlags;
	public uint offset;
	public uint size;
	public void* pValues;

	public VkPushConstantsInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPushDescriptorSetInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PushDescriptorSetInfo;
	public void* pNext;
	public VkShaderStageFlags stageFlags;
	public VkPipelineLayout layout;
	public uint set;
	public uint descriptorWriteCount;
	public VkWriteDescriptorSet* pDescriptorWrites;

	public VkPushDescriptorSetInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPushDescriptorSetWithTemplateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PushDescriptorSetWithTemplateInfo;
	public void* pNext;
	public VkDescriptorUpdateTemplate descriptorUpdateTemplate;
	public VkPipelineLayout layout;
	public uint set;
	public void* pData;

	public VkPushDescriptorSetWithTemplateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineProtectedAccessFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineProtectedAccessFeatures;
	public void* pNext;
	public VkBool32 pipelineProtectedAccess;

	public VkPhysicalDevicePipelineProtectedAccessFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineRobustnessFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineRobustnessFeatures;
	public void* pNext;
	public VkBool32 pipelineRobustness;

	public VkPhysicalDevicePipelineRobustnessFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineRobustnessProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineRobustnessProperties;
	public void* pNext;
	public VkPipelineRobustnessBufferBehavior defaultRobustnessStorageBuffers;
	public VkPipelineRobustnessBufferBehavior defaultRobustnessUniformBuffers;
	public VkPipelineRobustnessBufferBehavior defaultRobustnessVertexInputs;
	public VkPipelineRobustnessImageBehavior defaultRobustnessImages;

	public VkPhysicalDevicePipelineRobustnessProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRobustnessCreateInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRobustnessCreateInfo;
	public void* pNext;
	public VkPipelineRobustnessBufferBehavior storageBuffers;
	public VkPipelineRobustnessBufferBehavior uniformBuffers;
	public VkPipelineRobustnessBufferBehavior vertexInputs;
	public VkPipelineRobustnessImageBehavior images;

	public VkPipelineRobustnessCreateInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceHostImageCopyFeatures : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceHostImageCopyFeatures;
	public void* pNext;
	public VkBool32 hostImageCopy;

	public VkPhysicalDeviceHostImageCopyFeatures()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceHostImageCopyProperties : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceHostImageCopyProperties;
	public void* pNext;
	public uint copySrcLayoutCount;
	public VkImageLayout* pCopySrcLayouts;
	public uint copyDstLayoutCount;
	public VkImageLayout* pCopyDstLayouts;
	public fixed byte optimalTilingLayoutUUID[16];
	public VkBool32 identicalMemoryTypeRequirements;

	public VkPhysicalDeviceHostImageCopyProperties()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryToImageCopy : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryToImageCopy;
	public void* pNext;
	public void* pHostPointer;
	public uint memoryRowLength;
	public uint memoryImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;

	public VkMemoryToImageCopy()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageToMemoryCopy : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageToMemoryCopy;
	public void* pNext;
	public void* pHostPointer;
	public uint memoryRowLength;
	public uint memoryImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;

	public VkImageToMemoryCopy()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyMemoryToImageInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyMemoryToImageInfo;
	public void* pNext;
	public VkHostImageCopyFlags flags;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public VkMemoryToImageCopy* pRegions;

	public VkCopyMemoryToImageInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyImageToMemoryInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyImageToMemoryInfo;
	public void* pNext;
	public VkHostImageCopyFlags flags;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public uint regionCount;
	public VkImageToMemoryCopy* pRegions;

	public VkCopyImageToMemoryInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyImageToImageInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyImageToImageInfo;
	public void* pNext;
	public VkHostImageCopyFlags flags;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public VkImageCopy2* pRegions;

	public VkCopyImageToImageInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkHostImageLayoutTransitionInfo : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.HostImageLayoutTransitionInfo;
	public void* pNext;
	public VkImage image;
	public VkImageLayout oldLayout;
	public VkImageLayout newLayout;
	public VkImageSubresourceRange subresourceRange;

	public VkHostImageLayoutTransitionInfo()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubresourceHostMemcpySize : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubresourceHostMemcpySize;
	public void* pNext;
	public ulong size;

	public VkSubresourceHostMemcpySize()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkHostImageCopyDevicePerformanceQuery : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.HostImageCopyDevicePerformanceQuery;
	public void* pNext;
	public VkBool32 optimalDeviceAccess;
	public VkBool32 identicalMemoryLayout;

	public VkHostImageCopyDevicePerformanceQuery()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkSurfaceCapabilitiesKHR
{
	public uint minImageCount;
	public uint maxImageCount;
	public VkExtent2D currentExtent;
	public VkExtent2D minImageExtent;
	public VkExtent2D maxImageExtent;
	public uint maxImageArrayLayers;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkSurfaceTransformFlagsKHR currentTransform;
	public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
	public VkImageUsageFlags supportedUsageFlags;
}

public partial struct VkSurfaceFormatKHR
{
	public VkFormat format;
	public VkColorSpaceKHR colorSpace;
}

public unsafe partial struct VkSwapchainCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainCreateInfoKHR;
	public void* pNext;
	public VkSwapchainCreateFlagsKHR flags;
	public VkSurfaceKHR surface;
	public uint minImageCount;
	public VkFormat imageFormat;
	public VkColorSpaceKHR imageColorSpace;
	public VkExtent2D imageExtent;
	public uint imageArrayLayers;
	public VkImageUsageFlags imageUsage;
	public VkSharingMode imageSharingMode;
	public uint queueFamilyIndexCount;
	public uint* pQueueFamilyIndices;
	public VkSurfaceTransformFlagsKHR preTransform;
	public VkCompositeAlphaFlagsKHR compositeAlpha;
	public VkPresentModeKHR presentMode;
	public VkBool32 clipped;
	public VkSwapchainKHR oldSwapchain;

	public VkSwapchainCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPresentInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PresentInfoKHR;
	public void* pNext;
	public uint waitSemaphoreCount;
	public VkSemaphore* pWaitSemaphores;
	public uint swapchainCount;
	public VkSwapchainKHR* pSwapchains;
	public uint* pImageIndices;
	public VkResult* pResults;

	public VkPresentInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageSwapchainCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageSwapchainCreateInfoKHR;
	public void* pNext;
	public VkSwapchainKHR swapchain;

	public VkImageSwapchainCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindImageMemorySwapchainInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindImageMemorySwapchainInfoKHR;
	public void* pNext;
	public VkSwapchainKHR swapchain;
	public uint imageIndex;

	public VkBindImageMemorySwapchainInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAcquireNextImageInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AcquireNextImageInfoKHR;
	public void* pNext;
	public VkSwapchainKHR swapchain;
	public ulong timeout;
	public VkSemaphore semaphore;
	public VkFence fence;
	public uint deviceMask;

	public VkAcquireNextImageInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceGroupPresentCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceGroupPresentCapabilitiesKHR;
	public void* pNext;
	public fixed uint presentMask[32];
	public VkDeviceGroupPresentModeFlagsKHR modes;

	public VkDeviceGroupPresentCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceGroupPresentInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceGroupPresentInfoKHR;
	public void* pNext;
	public uint swapchainCount;
	public uint* pDeviceMasks;
	public VkDeviceGroupPresentModeFlagsKHR mode;

	public VkDeviceGroupPresentInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceGroupSwapchainCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceGroupSwapchainCreateInfoKHR;
	public void* pNext;
	public VkDeviceGroupPresentModeFlagsKHR modes;

	public VkDeviceGroupSwapchainCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDisplayModeParametersKHR
{
	public VkExtent2D visibleRegion;
	public uint refreshRate;
}

public unsafe partial struct VkDisplayModeCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayModeCreateInfoKHR;
	public void* pNext;
	public VkDisplayModeCreateFlagsKHR flags;
	public VkDisplayModeParametersKHR parameters;

	public VkDisplayModeCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDisplayModePropertiesKHR
{
	public VkDisplayModeKHR displayMode;
	public VkDisplayModeParametersKHR parameters;
}

public partial struct VkDisplayPlaneCapabilitiesKHR
{
	public VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
	public VkOffset2D minSrcPosition;
	public VkOffset2D maxSrcPosition;
	public VkExtent2D minSrcExtent;
	public VkExtent2D maxSrcExtent;
	public VkOffset2D minDstPosition;
	public VkOffset2D maxDstPosition;
	public VkExtent2D minDstExtent;
	public VkExtent2D maxDstExtent;
}

public partial struct VkDisplayPlanePropertiesKHR
{
	public VkDisplayKHR currentDisplay;
	public uint currentStackIndex;
}

public unsafe partial struct VkDisplayPropertiesKHR
{
	public VkDisplayKHR display;
	public byte* displayName;
	public VkExtent2D physicalDimensions;
	public VkExtent2D physicalResolution;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkBool32 planeReorderPossible;
	public VkBool32 persistentContent;
}

public unsafe partial struct VkDisplaySurfaceCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplaySurfaceCreateInfoKHR;
	public void* pNext;
	public VkDisplaySurfaceCreateFlagsKHR flags;
	public VkDisplayModeKHR displayMode;
	public uint planeIndex;
	public uint planeStackIndex;
	public VkSurfaceTransformFlagsKHR transform;
	public float globalAlpha;
	public VkDisplayPlaneAlphaFlagsKHR alphaMode;
	public VkExtent2D imageExtent;

	public VkDisplaySurfaceCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayPresentInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayPresentInfoKHR;
	public void* pNext;
	public VkRect2D srcRect;
	public VkRect2D dstRect;
	public VkBool32 persistent;

	public VkDisplayPresentInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueueFamilyQueryResultStatusPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyQueryResultStatusPropertiesKHR;
	public void* pNext;
	public VkBool32 queryResultStatusSupport;

	public VkQueueFamilyQueryResultStatusPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueueFamilyVideoPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyVideoPropertiesKHR;
	public void* pNext;
	public VkVideoCodecOperationFlagsKHR videoCodecOperations;

	public VkQueueFamilyVideoPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoProfileInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoProfileInfoKHR;
	public void* pNext;
	public VkVideoCodecOperationFlagsKHR videoCodecOperation;
	public VkVideoChromaSubsamplingFlagsKHR chromaSubsampling;
	public VkVideoComponentBitDepthFlagsKHR lumaBitDepth;
	public VkVideoComponentBitDepthFlagsKHR chromaBitDepth;

	public VkVideoProfileInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoProfileListInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoProfileListInfoKHR;
	public void* pNext;
	public uint profileCount;
	public VkVideoProfileInfoKHR* pProfiles;

	public VkVideoProfileListInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoCapabilitiesKHR;
	public void* pNext;
	public VkVideoCapabilityFlagsKHR flags;
	public ulong minBitstreamBufferOffsetAlignment;
	public ulong minBitstreamBufferSizeAlignment;
	public VkExtent2D pictureAccessGranularity;
	public VkExtent2D minCodedExtent;
	public VkExtent2D maxCodedExtent;
	public uint maxDpbSlots;
	public uint maxActiveReferencePictures;
	public VkExtensionProperties stdHeaderVersion;

	public VkVideoCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVideoFormatInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVideoFormatInfoKHR;
	public void* pNext;
	public VkImageUsageFlags imageUsage;

	public VkPhysicalDeviceVideoFormatInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoFormatPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoFormatPropertiesKHR;
	public void* pNext;
	public VkFormat format;
	public VkComponentMapping componentMapping;
	public VkImageCreateFlags imageCreateFlags;
	public VkImageType imageType;
	public VkImageTiling imageTiling;
	public VkImageUsageFlags imageUsageFlags;

	public VkVideoFormatPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoPictureResourceInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoPictureResourceInfoKHR;
	public void* pNext;
	public VkOffset2D codedOffset;
	public VkExtent2D codedExtent;
	public uint baseArrayLayer;
	public VkImageView imageViewBinding;

	public VkVideoPictureResourceInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoReferenceSlotInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoReferenceSlotInfoKHR;
	public void* pNext;
	public int slotIndex;
	public VkVideoPictureResourceInfoKHR* pPictureResource;

	public VkVideoReferenceSlotInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoSessionMemoryRequirementsKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoSessionMemoryRequirementsKHR;
	public void* pNext;
	public uint memoryBindIndex;
	public VkMemoryRequirements memoryRequirements;

	public VkVideoSessionMemoryRequirementsKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindVideoSessionMemoryInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindVideoSessionMemoryInfoKHR;
	public void* pNext;
	public uint memoryBindIndex;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public ulong memorySize;

	public VkBindVideoSessionMemoryInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoSessionCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoSessionCreateInfoKHR;
	public void* pNext;
	public uint queueFamilyIndex;
	public VkVideoSessionCreateFlagsKHR flags;
	public VkVideoProfileInfoKHR* pVideoProfile;
	public VkFormat pictureFormat;
	public VkExtent2D maxCodedExtent;
	public VkFormat referencePictureFormat;
	public uint maxDpbSlots;
	public uint maxActiveReferencePictures;
	public VkExtensionProperties* pStdHeaderVersion;

	public VkVideoSessionCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoSessionParametersCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoSessionParametersCreateInfoKHR;
	public void* pNext;
	public VkVideoSessionParametersCreateFlagsKHR flags;
	public VkVideoSessionParametersKHR videoSessionParametersTemplate;
	public VkVideoSessionKHR videoSession;

	public VkVideoSessionParametersCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoSessionParametersUpdateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoSessionParametersUpdateInfoKHR;
	public void* pNext;
	public uint updateSequenceCount;

	public VkVideoSessionParametersUpdateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoBeginCodingInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoBeginCodingInfoKHR;
	public void* pNext;
	public VkVideoBeginCodingFlagsKHR flags;
	public VkVideoSessionKHR videoSession;
	public VkVideoSessionParametersKHR videoSessionParameters;
	public uint referenceSlotCount;
	public VkVideoReferenceSlotInfoKHR* pReferenceSlots;

	public VkVideoBeginCodingInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEndCodingInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEndCodingInfoKHR;
	public void* pNext;
	public VkVideoEndCodingFlagsKHR flags;

	public VkVideoEndCodingInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoCodingControlInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoCodingControlInfoKHR;
	public void* pNext;
	public VkVideoCodingControlFlagsKHR flags;

	public VkVideoCodingControlInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeCapabilitiesKHR;
	public void* pNext;
	public VkVideoDecodeCapabilityFlagsKHR flags;

	public VkVideoDecodeCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeUsageInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeUsageInfoKHR;
	public void* pNext;
	public VkVideoDecodeUsageFlagsKHR videoUsageHints;

	public VkVideoDecodeUsageInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeInfoKHR;
	public void* pNext;
	public VkVideoDecodeFlagsKHR flags;
	public VkBuffer srcBuffer;
	public ulong srcBufferOffset;
	public ulong srcBufferRange;
	public VkVideoPictureResourceInfoKHR dstPictureResource;
	public VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
	public uint referenceSlotCount;
	public VkVideoReferenceSlotInfoKHR* pReferenceSlots;

	public VkVideoDecodeInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct StdVideoH264SpsVuiFlags
{
	public uint aspect_ratio_info_present_flag;
	public uint overscan_info_present_flag;
	public uint overscan_appropriate_flag;
	public uint video_signal_type_present_flag;
	public uint video_full_range_flag;
	public uint color_description_present_flag;
	public uint chroma_loc_info_present_flag;
	public uint timing_info_present_flag;
	public uint fixed_frame_rate_flag;
	public uint bitstream_restriction_flag;
	public uint nal_hrd_parameters_present_flag;
	public uint vcl_hrd_parameters_present_flag;
}

public unsafe partial struct StdVideoH264HrdParameters
{
	public byte cpb_cnt_minus1;
	public byte bit_rate_scale;
	public byte cpb_size_scale;
	public byte reserved1;
	public fixed uint bit_rate_value_minus1[32];
	public fixed uint cpb_size_value_minus1[32];
	public fixed byte cbr_flag[32];
	public uint initial_cpb_removal_delay_length_minus1;
	public uint cpb_removal_delay_length_minus1;
	public uint dpb_output_delay_length_minus1;
	public uint time_offset_length;
}

public unsafe partial struct StdVideoH264SequenceParameterSetVui
{
	public StdVideoH264SpsVuiFlags flags;
	public StdVideoH264AspectRatioIdc aspect_ratio_idc;
	public ushort sar_width;
	public ushort sar_height;
	public byte video_format;
	public byte colour_primaries;
	public byte transfer_characteristics;
	public byte matrix_coefficients;
	public uint num_units_in_tick;
	public uint time_scale;
	public byte max_num_reorder_frames;
	public byte max_dec_frame_buffering;
	public byte chroma_sample_loc_type_top_field;
	public byte chroma_sample_loc_type_bottom_field;
	public uint reserved1;
	public StdVideoH264HrdParameters* pHrdParameters;
}

public partial struct StdVideoH264SpsFlags
{
	public uint constraint_set0_flag;
	public uint constraint_set1_flag;
	public uint constraint_set2_flag;
	public uint constraint_set3_flag;
	public uint constraint_set4_flag;
	public uint constraint_set5_flag;
	public uint direct_8x8_inference_flag;
	public uint mb_adaptive_frame_field_flag;
	public uint frame_mbs_only_flag;
	public uint delta_pic_order_always_zero_flag;
	public uint separate_colour_plane_flag;
	public uint gaps_in_frame_num_value_allowed_flag;
	public uint qpprime_y_zero_transform_bypass_flag;
	public uint frame_cropping_flag;
	public uint seq_scaling_matrix_present_flag;
	public uint vui_parameters_present_flag;
}

public unsafe partial struct StdVideoH264ScalingLists
{
	public ushort scaling_list_present_mask;
	public ushort use_default_scaling_matrix_mask;
	public fixed byte ScalingList4x4[6 * 16];
	public fixed byte ScalingList8x8[6 * 64];
}

public unsafe partial struct StdVideoH264SequenceParameterSet
{
	public StdVideoH264SpsFlags flags;
	public StdVideoH264ProfileIdc profile_idc;
	public StdVideoH264LevelIdc level_idc;
	public StdVideoH264ChromaFormatIdc chroma_format_idc;
	public byte seq_parameter_set_id;
	public byte bit_depth_luma_minus8;
	public byte bit_depth_chroma_minus8;
	public byte log2_max_frame_num_minus4;
	public StdVideoH264PocType pic_order_cnt_type;
	public int offset_for_non_ref_pic;
	public int offset_for_top_to_bottom_field;
	public byte log2_max_pic_order_cnt_lsb_minus4;
	public byte num_ref_frames_in_pic_order_cnt_cycle;
	public byte max_num_ref_frames;
	public byte reserved1;
	public uint pic_width_in_mbs_minus1;
	public uint pic_height_in_map_units_minus1;
	public uint frame_crop_left_offset;
	public uint frame_crop_right_offset;
	public uint frame_crop_top_offset;
	public uint frame_crop_bottom_offset;
	public uint reserved2;
	public int* pOffsetForRefFrame;
	public StdVideoH264ScalingLists* pScalingLists;
	public StdVideoH264SequenceParameterSetVui* pSequenceParameterSetVui;
}

public partial struct StdVideoH264PpsFlags
{
	public uint transform_8x8_mode_flag;
	public uint redundant_pic_cnt_present_flag;
	public uint constrained_intra_pred_flag;
	public uint deblocking_filter_control_present_flag;
	public uint weighted_pred_flag;
	public uint bottom_field_pic_order_in_frame_present_flag;
	public uint entropy_coding_mode_flag;
	public uint pic_scaling_matrix_present_flag;
}

public unsafe partial struct StdVideoH264PictureParameterSet
{
	public StdVideoH264PpsFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public byte num_ref_idx_l0_default_active_minus1;
	public byte num_ref_idx_l1_default_active_minus1;
	public StdVideoH264WeightedBipredIdc weighted_bipred_idc;
	public byte pic_init_qp_minus26;
	public byte pic_init_qs_minus26;
	public byte chroma_qp_index_offset;
	public byte second_chroma_qp_index_offset;
	public StdVideoH264ScalingLists* pScalingLists;
}

public partial struct StdVideoEncodeH264WeightTableFlags
{
	public uint luma_weight_l0_flag;
	public uint chroma_weight_l0_flag;
	public uint luma_weight_l1_flag;
	public uint chroma_weight_l1_flag;
}

public unsafe partial struct StdVideoEncodeH264WeightTable
{
	public StdVideoEncodeH264WeightTableFlags flags;
	public byte luma_log2_weight_denom;
	public byte chroma_log2_weight_denom;
	public fixed byte luma_weight_l0[32];
	public fixed byte luma_offset_l0[32];
	public fixed byte chroma_weight_l0[32 * 2];
	public fixed byte chroma_offset_l0[32 * 2];
	public fixed byte luma_weight_l1[32];
	public fixed byte luma_offset_l1[32];
	public fixed byte chroma_weight_l1[32 * 2];
	public fixed byte chroma_offset_l1[32 * 2];
}

public partial struct StdVideoEncodeH264SliceHeaderFlags
{
	public uint direct_spatial_mv_pred_flag;
	public uint num_ref_idx_active_override_flag;
	public uint reserved;
}

public partial struct StdVideoEncodeH264PictureInfoFlags
{
	public uint IdrPicFlag;
	public uint is_reference;
	public uint no_output_of_prior_pics_flag;
	public uint long_term_reference_flag;
	public uint adaptive_ref_pic_marking_mode_flag;
	public uint reserved;
}

public partial struct StdVideoEncodeH264ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
	public uint reserved;
}

public partial struct StdVideoEncodeH264ReferenceListsInfoFlags
{
	public uint ref_pic_list_modification_flag_l0;
	public uint ref_pic_list_modification_flag_l1;
	public uint reserved;
}

public partial struct StdVideoEncodeH264RefListModEntry
{
	public StdVideoH264ModificationOfPicNumsIdc modification_of_pic_nums_idc;
	public ushort abs_diff_pic_num_minus1;
	public ushort long_term_pic_num;
}

public partial struct StdVideoEncodeH264RefPicMarkingEntry
{
	public StdVideoH264MemMgmtControlOp memory_management_control_operation;
	public ushort difference_of_pic_nums_minus1;
	public ushort long_term_pic_num;
	public ushort long_term_frame_idx;
	public ushort max_long_term_frame_idx_plus1;
}

public unsafe partial struct StdVideoEncodeH264ReferenceListsInfo
{
	public StdVideoEncodeH264ReferenceListsInfoFlags flags;
	public byte num_ref_idx_l0_active_minus1;
	public byte num_ref_idx_l1_active_minus1;
	public fixed byte RefPicList0[32];
	public fixed byte RefPicList1[32];
	public byte refList0ModOpCount;
	public byte refList1ModOpCount;
	public byte refPicMarkingOpCount;
	public fixed byte reserved1[7];
	public StdVideoEncodeH264RefListModEntry* pRefList0ModOperations;
	public StdVideoEncodeH264RefListModEntry* pRefList1ModOperations;
	public StdVideoEncodeH264RefPicMarkingEntry* pRefPicMarkingOperations;
}

public unsafe partial struct StdVideoEncodeH264PictureInfo
{
	public StdVideoEncodeH264PictureInfoFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public ushort idr_pic_id;
	public StdVideoH264PictureType primary_pic_type;
	public uint frame_num;
	public int PicOrderCnt;
	public byte temporal_id;
	public fixed byte reserved1[3];
	public StdVideoEncodeH264ReferenceListsInfo* pRefLists;
}

public partial struct StdVideoEncodeH264ReferenceInfo
{
	public StdVideoEncodeH264ReferenceInfoFlags flags;
	public StdVideoH264PictureType primary_pic_type;
	public uint FrameNum;
	public int PicOrderCnt;
	public ushort long_term_pic_num;
	public ushort long_term_frame_idx;
	public byte temporal_id;
}

public unsafe partial struct StdVideoEncodeH264SliceHeader
{
	public StdVideoEncodeH264SliceHeaderFlags flags;
	public uint first_mb_in_slice;
	public StdVideoH264SliceType slice_type;
	public byte slice_alpha_c0_offset_div2;
	public byte slice_beta_offset_div2;
	public byte slice_qp_delta;
	public byte reserved1;
	public StdVideoH264CabacInitIdc cabac_init_idc;
	public StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc;
	public StdVideoEncodeH264WeightTable* pWeightTable;
}

public unsafe partial struct VkVideoEncodeH264CapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264CapabilitiesKHR;
	public void* pNext;
	public VkVideoEncodeH264CapabilityFlagsKHR flags;
	public StdVideoH264LevelIdc maxLevelIdc;
	public uint maxSliceCount;
	public uint maxPPictureL0ReferenceCount;
	public uint maxBPictureL0ReferenceCount;
	public uint maxL1ReferenceCount;
	public uint maxTemporalLayerCount;
	public VkBool32 expectDyadicTemporalLayerPattern;
	public int minQp;
	public int maxQp;
	public VkBool32 prefersGopRemainingFrames;
	public VkBool32 requiresGopRemainingFrames;
	public VkVideoEncodeH264StdFlagsKHR stdSyntaxFlags;

	public VkVideoEncodeH264CapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkVideoEncodeH264QpKHR
{
	public int qpI;
	public int qpP;
	public int qpB;
}

public unsafe partial struct VkVideoEncodeH264QualityLevelPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264QualityLevelPropertiesKHR;
	public void* pNext;
	public VkVideoEncodeH264RateControlFlagsKHR preferredRateControlFlags;
	public uint preferredGopFrameCount;
	public uint preferredIdrPeriod;
	public uint preferredConsecutiveBFrameCount;
	public uint preferredTemporalLayerCount;
	public VkVideoEncodeH264QpKHR preferredConstantQp;
	public uint preferredMaxL0ReferenceCount;
	public uint preferredMaxL1ReferenceCount;
	public VkBool32 preferredStdEntropyCodingModeFlag;

	public VkVideoEncodeH264QualityLevelPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264SessionCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264SessionCreateInfoKHR;
	public void* pNext;
	public VkBool32 useMaxLevelIdc;
	public StdVideoH264LevelIdc maxLevelIdc;

	public VkVideoEncodeH264SessionCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264SessionParametersAddInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264SessionParametersAddInfoKHR;
	public void* pNext;
	public uint stdSPSCount;
	public StdVideoH264SequenceParameterSet* pStdSPSs;
	public uint stdPPSCount;
	public StdVideoH264PictureParameterSet* pStdPPSs;

	public VkVideoEncodeH264SessionParametersAddInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264SessionParametersCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264SessionParametersCreateInfoKHR;
	public void* pNext;
	public uint maxStdSPSCount;
	public uint maxStdPPSCount;
	public VkVideoEncodeH264SessionParametersAddInfoKHR* pParametersAddInfo;

	public VkVideoEncodeH264SessionParametersCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264SessionParametersGetInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264SessionParametersGetInfoKHR;
	public void* pNext;
	public VkBool32 writeStdSPS;
	public VkBool32 writeStdPPS;
	public uint stdSPSId;
	public uint stdPPSId;

	public VkVideoEncodeH264SessionParametersGetInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264SessionParametersFeedbackInfoKHR;
	public void* pNext;
	public VkBool32 hasStdSPSOverrides;
	public VkBool32 hasStdPPSOverrides;

	public VkVideoEncodeH264SessionParametersFeedbackInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264NaluSliceInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264NaluSliceInfoKHR;
	public void* pNext;
	public int constantQp;
	public StdVideoEncodeH264SliceHeader* pStdSliceHeader;

	public VkVideoEncodeH264NaluSliceInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264PictureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264PictureInfoKHR;
	public void* pNext;
	public uint naluSliceEntryCount;
	public VkVideoEncodeH264NaluSliceInfoKHR* pNaluSliceEntries;
	public StdVideoEncodeH264PictureInfo* pStdPictureInfo;
	public VkBool32 generatePrefixNalu;

	public VkVideoEncodeH264PictureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264DpbSlotInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264DpbSlotInfoKHR;
	public void* pNext;
	public StdVideoEncodeH264ReferenceInfo* pStdReferenceInfo;

	public VkVideoEncodeH264DpbSlotInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264ProfileInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264ProfileInfoKHR;
	public void* pNext;
	public StdVideoH264ProfileIdc stdProfileIdc;

	public VkVideoEncodeH264ProfileInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264RateControlInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264RateControlInfoKHR;
	public void* pNext;
	public VkVideoEncodeH264RateControlFlagsKHR flags;
	public uint gopFrameCount;
	public uint idrPeriod;
	public uint consecutiveBFrameCount;
	public uint temporalLayerCount;

	public VkVideoEncodeH264RateControlInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkVideoEncodeH264FrameSizeKHR
{
	public uint frameISize;
	public uint framePSize;
	public uint frameBSize;
}

public unsafe partial struct VkVideoEncodeH264RateControlLayerInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264RateControlLayerInfoKHR;
	public void* pNext;
	public VkBool32 useMinQp;
	public VkVideoEncodeH264QpKHR minQp;
	public VkBool32 useMaxQp;
	public VkVideoEncodeH264QpKHR maxQp;
	public VkBool32 useMaxFrameSize;
	public VkVideoEncodeH264FrameSizeKHR maxFrameSize;

	public VkVideoEncodeH264RateControlLayerInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264GopRemainingFrameInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264GopRemainingFrameInfoKHR;
	public void* pNext;
	public VkBool32 useGopRemainingFrames;
	public uint gopRemainingI;
	public uint gopRemainingP;
	public uint gopRemainingB;

	public VkVideoEncodeH264GopRemainingFrameInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct StdVideoH265DecPicBufMgr
{
	public fixed uint max_latency_increase_plus1[7];
	public fixed byte max_dec_pic_buffering_minus1[7];
	public fixed byte max_num_reorder_pics[7];
}

public unsafe partial struct StdVideoH265SubLayerHrdParameters
{
	public fixed uint bit_rate_value_minus1[32];
	public fixed uint cpb_size_value_minus1[32];
	public fixed uint cpb_size_du_value_minus1[32];
	public fixed uint bit_rate_du_value_minus1[32];
	public uint cbr_flag;
}

public partial struct StdVideoH265HrdFlags
{
	public uint nal_hrd_parameters_present_flag;
	public uint vcl_hrd_parameters_present_flag;
	public uint sub_pic_hrd_params_present_flag;
	public uint sub_pic_cpb_params_in_pic_timing_sei_flag;
	public uint fixed_pic_rate_general_flag;
	public uint fixed_pic_rate_within_cvs_flag;
	public uint low_delay_hrd_flag;
}

public unsafe partial struct StdVideoH265HrdParameters
{
	public StdVideoH265HrdFlags flags;
	public byte tick_divisor_minus2;
	public byte du_cpb_removal_delay_increment_length_minus1;
	public byte dpb_output_delay_du_length_minus1;
	public byte bit_rate_scale;
	public byte cpb_size_scale;
	public byte cpb_size_du_scale;
	public byte initial_cpb_removal_delay_length_minus1;
	public byte au_cpb_removal_delay_length_minus1;
	public byte dpb_output_delay_length_minus1;
	public fixed byte cpb_cnt_minus1[7];
	public fixed ushort elemental_duration_in_tc_minus1[7];
	public fixed ushort reserved[3];
	public StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal;
	public StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl;
}

public partial struct StdVideoH265VpsFlags
{
	public uint vps_temporal_id_nesting_flag;
	public uint vps_sub_layer_ordering_info_present_flag;
	public uint vps_timing_info_present_flag;
	public uint vps_poc_proportional_to_timing_flag;
}

public partial struct StdVideoH265ProfileTierLevelFlags
{
	public uint general_tier_flag;
	public uint general_progressive_source_flag;
	public uint general_interlaced_source_flag;
	public uint general_non_packed_constraint_flag;
	public uint general_frame_only_constraint_flag;
}

public partial struct StdVideoH265ProfileTierLevel
{
	public StdVideoH265ProfileTierLevelFlags flags;
	public StdVideoH265ProfileIdc general_profile_idc;
	public StdVideoH265LevelIdc general_level_idc;
}

public unsafe partial struct StdVideoH265VideoParameterSet
{
	public StdVideoH265VpsFlags flags;
	public byte vps_video_parameter_set_id;
	public byte vps_max_sub_layers_minus1;
	public byte reserved1;
	public byte reserved2;
	public uint vps_num_units_in_tick;
	public uint vps_time_scale;
	public uint vps_num_ticks_poc_diff_one_minus1;
	public uint reserved3;
	public StdVideoH265DecPicBufMgr* pDecPicBufMgr;
	public StdVideoH265HrdParameters* pHrdParameters;
	public StdVideoH265ProfileTierLevel* pProfileTierLevel;
}

public unsafe partial struct StdVideoH265ScalingLists
{
	public fixed byte ScalingList4x4[6 * 16];
	public fixed byte ScalingList8x8[6 * 64];
	public fixed byte ScalingList16x16[6 * 64];
	public fixed byte ScalingList32x32[2 * 64];
	public fixed byte ScalingListDCCoef16x16[6];
	public fixed byte ScalingListDCCoef32x32[2];
}

public partial struct StdVideoH265SpsVuiFlags
{
	public uint aspect_ratio_info_present_flag;
	public uint overscan_info_present_flag;
	public uint overscan_appropriate_flag;
	public uint video_signal_type_present_flag;
	public uint video_full_range_flag;
	public uint colour_description_present_flag;
	public uint chroma_loc_info_present_flag;
	public uint neutral_chroma_indication_flag;
	public uint field_seq_flag;
	public uint frame_field_info_present_flag;
	public uint default_display_window_flag;
	public uint vui_timing_info_present_flag;
	public uint vui_poc_proportional_to_timing_flag;
	public uint vui_hrd_parameters_present_flag;
	public uint bitstream_restriction_flag;
	public uint tiles_fixed_structure_flag;
	public uint motion_vectors_over_pic_boundaries_flag;
	public uint restricted_ref_pic_lists_flag;
}

public unsafe partial struct StdVideoH265SequenceParameterSetVui
{
	public StdVideoH265SpsVuiFlags flags;
	public StdVideoH265AspectRatioIdc aspect_ratio_idc;
	public ushort sar_width;
	public ushort sar_height;
	public byte video_format;
	public byte colour_primaries;
	public byte transfer_characteristics;
	public byte matrix_coeffs;
	public byte chroma_sample_loc_type_top_field;
	public byte chroma_sample_loc_type_bottom_field;
	public byte reserved1;
	public byte reserved2;
	public ushort def_disp_win_left_offset;
	public ushort def_disp_win_right_offset;
	public ushort def_disp_win_top_offset;
	public ushort def_disp_win_bottom_offset;
	public uint vui_num_units_in_tick;
	public uint vui_time_scale;
	public uint vui_num_ticks_poc_diff_one_minus1;
	public ushort min_spatial_segmentation_idc;
	public ushort reserved3;
	public byte max_bytes_per_pic_denom;
	public byte max_bits_per_min_cu_denom;
	public byte log2_max_mv_length_horizontal;
	public byte log2_max_mv_length_vertical;
	public StdVideoH265HrdParameters* pHrdParameters;
}

public unsafe partial struct StdVideoH265PredictorPaletteEntries
{
	public fixed ushort PredictorPaletteEntries[3 * 128];
}

public partial struct StdVideoH265SpsFlags
{
	public uint sps_temporal_id_nesting_flag;
	public uint separate_colour_plane_flag;
	public uint conformance_window_flag;
	public uint sps_sub_layer_ordering_info_present_flag;
	public uint scaling_list_enabled_flag;
	public uint sps_scaling_list_data_present_flag;
	public uint amp_enabled_flag;
	public uint sample_adaptive_offset_enabled_flag;
	public uint pcm_enabled_flag;
	public uint pcm_loop_filter_disabled_flag;
	public uint long_term_ref_pics_present_flag;
	public uint sps_temporal_mvp_enabled_flag;
	public uint strong_intra_smoothing_enabled_flag;
	public uint vui_parameters_present_flag;
	public uint sps_extension_present_flag;
	public uint sps_range_extension_flag;
	public uint transform_skip_rotation_enabled_flag;
	public uint transform_skip_context_enabled_flag;
	public uint implicit_rdpcm_enabled_flag;
	public uint explicit_rdpcm_enabled_flag;
	public uint extended_precision_processing_flag;
	public uint intra_smoothing_disabled_flag;
	public uint high_precision_offsets_enabled_flag;
	public uint persistent_rice_adaptation_enabled_flag;
	public uint cabac_bypass_alignment_enabled_flag;
	public uint sps_scc_extension_flag;
	public uint sps_curr_pic_ref_enabled_flag;
	public uint palette_mode_enabled_flag;
	public uint sps_palette_predictor_initializers_present_flag;
	public uint intra_boundary_filtering_disabled_flag;
}

public partial struct StdVideoH265ShortTermRefPicSetFlags
{
	public uint inter_ref_pic_set_prediction_flag;
	public uint delta_rps_sign;
}

public unsafe partial struct StdVideoH265ShortTermRefPicSet
{
	public StdVideoH265ShortTermRefPicSetFlags flags;
	public uint delta_idx_minus1;
	public ushort use_delta_flag;
	public ushort abs_delta_rps_minus1;
	public ushort used_by_curr_pic_flag;
	public ushort used_by_curr_pic_s0_flag;
	public ushort used_by_curr_pic_s1_flag;
	public ushort reserved1;
	public byte reserved2;
	public byte reserved3;
	public byte num_negative_pics;
	public byte num_positive_pics;
	public fixed ushort delta_poc_s0_minus1[16];
	public fixed ushort delta_poc_s1_minus1[16];
}

public unsafe partial struct StdVideoH265LongTermRefPicsSps
{
	public uint used_by_curr_pic_lt_sps_flag;
	public fixed uint lt_ref_pic_poc_lsb_sps[32];
}

public unsafe partial struct StdVideoH265SequenceParameterSet
{
	public StdVideoH265SpsFlags flags;
	public StdVideoH265ChromaFormatIdc chroma_format_idc;
	public uint pic_width_in_luma_samples;
	public uint pic_height_in_luma_samples;
	public byte sps_video_parameter_set_id;
	public byte sps_max_sub_layers_minus1;
	public byte sps_seq_parameter_set_id;
	public byte bit_depth_luma_minus8;
	public byte bit_depth_chroma_minus8;
	public byte log2_max_pic_order_cnt_lsb_minus4;
	public byte log2_min_luma_coding_block_size_minus3;
	public byte log2_diff_max_min_luma_coding_block_size;
	public byte log2_min_luma_transform_block_size_minus2;
	public byte log2_diff_max_min_luma_transform_block_size;
	public byte max_transform_hierarchy_depth_inter;
	public byte max_transform_hierarchy_depth_intra;
	public byte num_short_term_ref_pic_sets;
	public byte num_long_term_ref_pics_sps;
	public byte pcm_sample_bit_depth_luma_minus1;
	public byte pcm_sample_bit_depth_chroma_minus1;
	public byte log2_min_pcm_luma_coding_block_size_minus3;
	public byte log2_diff_max_min_pcm_luma_coding_block_size;
	public byte reserved1;
	public byte reserved2;
	public byte palette_max_size;
	public byte delta_palette_max_predictor_size;
	public byte motion_vector_resolution_control_idc;
	public byte sps_num_palette_predictor_initializers_minus1;
	public uint conf_win_left_offset;
	public uint conf_win_right_offset;
	public uint conf_win_top_offset;
	public uint conf_win_bottom_offset;
	public StdVideoH265ProfileTierLevel* pProfileTierLevel;
	public StdVideoH265DecPicBufMgr* pDecPicBufMgr;
	public StdVideoH265ScalingLists* pScalingLists;
	public StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
	public StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps;
	public StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
	public StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
}

public partial struct StdVideoH265PpsFlags
{
	public uint dependent_slice_segments_enabled_flag;
	public uint output_flag_present_flag;
	public uint sign_data_hiding_enabled_flag;
	public uint cabac_init_present_flag;
	public uint constrained_intra_pred_flag;
	public uint transform_skip_enabled_flag;
	public uint cu_qp_delta_enabled_flag;
	public uint pps_slice_chroma_qp_offsets_present_flag;
	public uint weighted_pred_flag;
	public uint weighted_bipred_flag;
	public uint transquant_bypass_enabled_flag;
	public uint tiles_enabled_flag;
	public uint entropy_coding_sync_enabled_flag;
	public uint uniform_spacing_flag;
	public uint loop_filter_across_tiles_enabled_flag;
	public uint pps_loop_filter_across_slices_enabled_flag;
	public uint deblocking_filter_control_present_flag;
	public uint deblocking_filter_override_enabled_flag;
	public uint pps_deblocking_filter_disabled_flag;
	public uint pps_scaling_list_data_present_flag;
	public uint lists_modification_present_flag;
	public uint slice_segment_header_extension_present_flag;
	public uint pps_extension_present_flag;
	public uint cross_component_prediction_enabled_flag;
	public uint chroma_qp_offset_list_enabled_flag;
	public uint pps_curr_pic_ref_enabled_flag;
	public uint residual_adaptive_colour_transform_enabled_flag;
	public uint pps_slice_act_qp_offsets_present_flag;
	public uint pps_palette_predictor_initializers_present_flag;
	public uint monochrome_palette_flag;
	public uint pps_range_extension_flag;
}

public unsafe partial struct StdVideoH265PictureParameterSet
{
	public StdVideoH265PpsFlags flags;
	public byte pps_pic_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte sps_video_parameter_set_id;
	public byte num_extra_slice_header_bits;
	public byte num_ref_idx_l0_default_active_minus1;
	public byte num_ref_idx_l1_default_active_minus1;
	public byte init_qp_minus26;
	public byte diff_cu_qp_delta_depth;
	public byte pps_cb_qp_offset;
	public byte pps_cr_qp_offset;
	public byte pps_beta_offset_div2;
	public byte pps_tc_offset_div2;
	public byte log2_parallel_merge_level_minus2;
	public byte log2_max_transform_skip_block_size_minus2;
	public byte diff_cu_chroma_qp_offset_depth;
	public byte chroma_qp_offset_list_len_minus1;
	public fixed byte cb_qp_offset_list[6];
	public fixed byte cr_qp_offset_list[6];
	public byte log2_sao_offset_scale_luma;
	public byte log2_sao_offset_scale_chroma;
	public byte pps_act_y_qp_offset_plus5;
	public byte pps_act_cb_qp_offset_plus5;
	public byte pps_act_cr_qp_offset_plus3;
	public byte pps_num_palette_predictor_initializers;
	public byte luma_bit_depth_entry_minus8;
	public byte chroma_bit_depth_entry_minus8;
	public byte num_tile_columns_minus1;
	public byte num_tile_rows_minus1;
	public byte reserved1;
	public byte reserved2;
	public fixed ushort column_width_minus1[19];
	public fixed ushort row_height_minus1[21];
	public uint reserved3;
	public StdVideoH265ScalingLists* pScalingLists;
	public StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
}

public partial struct StdVideoEncodeH265WeightTableFlags
{
	public ushort luma_weight_l0_flag;
	public ushort chroma_weight_l0_flag;
	public ushort luma_weight_l1_flag;
	public ushort chroma_weight_l1_flag;
}

public unsafe partial struct StdVideoEncodeH265WeightTable
{
	public StdVideoEncodeH265WeightTableFlags flags;
	public byte luma_log2_weight_denom;
	public byte delta_chroma_log2_weight_denom;
	public fixed byte delta_luma_weight_l0[15];
	public fixed byte luma_offset_l0[15];
	public fixed byte delta_chroma_weight_l0[15 * 2];
	public fixed byte delta_chroma_offset_l0[15 * 2];
	public fixed byte delta_luma_weight_l1[15];
	public fixed byte luma_offset_l1[15];
	public fixed byte delta_chroma_weight_l1[15 * 2];
	public fixed byte delta_chroma_offset_l1[15 * 2];
}

public partial struct StdVideoEncodeH265SliceSegmentHeaderFlags
{
	public uint first_slice_segment_in_pic_flag;
	public uint dependent_slice_segment_flag;
	public uint slice_sao_luma_flag;
	public uint slice_sao_chroma_flag;
	public uint num_ref_idx_active_override_flag;
	public uint mvd_l1_zero_flag;
	public uint cabac_init_flag;
	public uint cu_chroma_qp_offset_enabled_flag;
	public uint deblocking_filter_override_flag;
	public uint slice_deblocking_filter_disabled_flag;
	public uint collocated_from_l0_flag;
	public uint slice_loop_filter_across_slices_enabled_flag;
	public uint reserved;
}

public unsafe partial struct StdVideoEncodeH265SliceSegmentHeader
{
	public StdVideoEncodeH265SliceSegmentHeaderFlags flags;
	public StdVideoH265SliceType slice_type;
	public uint slice_segment_address;
	public byte collocated_ref_idx;
	public byte MaxNumMergeCand;
	public byte slice_cb_qp_offset;
	public byte slice_cr_qp_offset;
	public byte slice_beta_offset_div2;
	public byte slice_tc_offset_div2;
	public byte slice_act_y_qp_offset;
	public byte slice_act_cb_qp_offset;
	public byte slice_act_cr_qp_offset;
	public byte slice_qp_delta;
	public ushort reserved1;
	public StdVideoEncodeH265WeightTable* pWeightTable;
}

public partial struct StdVideoEncodeH265ReferenceListsInfoFlags
{
	public uint ref_pic_list_modification_flag_l0;
	public uint ref_pic_list_modification_flag_l1;
	public uint reserved;
}

public unsafe partial struct StdVideoEncodeH265ReferenceListsInfo
{
	public StdVideoEncodeH265ReferenceListsInfoFlags flags;
	public byte num_ref_idx_l0_active_minus1;
	public byte num_ref_idx_l1_active_minus1;
	public fixed byte RefPicList0[15];
	public fixed byte RefPicList1[15];
	public fixed byte list_entry_l0[15];
	public fixed byte list_entry_l1[15];
}

public partial struct StdVideoEncodeH265PictureInfoFlags
{
	public uint is_reference;
	public uint IrapPicFlag;
	public uint used_for_long_term_reference;
	public uint discardable_flag;
	public uint cross_layer_bla_flag;
	public uint pic_output_flag;
	public uint no_output_of_prior_pics_flag;
	public uint short_term_ref_pic_set_sps_flag;
	public uint slice_temporal_mvp_enabled_flag;
	public uint reserved;
}

public unsafe partial struct StdVideoEncodeH265LongTermRefPics
{
	public byte num_long_term_sps;
	public byte num_long_term_pics;
	public fixed byte lt_idx_sps[32];
	public fixed byte poc_lsb_lt[16];
	public ushort used_by_curr_pic_lt_flag;
	public fixed byte delta_poc_msb_present_flag[48];
	public fixed byte delta_poc_msb_cycle_lt[48];
}

public unsafe partial struct StdVideoEncodeH265PictureInfo
{
	public StdVideoEncodeH265PictureInfoFlags flags;
	public StdVideoH265PictureType pic_type;
	public byte sps_video_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte pps_pic_parameter_set_id;
	public byte short_term_ref_pic_set_idx;
	public int PicOrderCntVal;
	public byte TemporalId;
	public fixed byte reserved1[7];
	public StdVideoEncodeH265ReferenceListsInfo* pRefLists;
	public StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
	public StdVideoEncodeH265LongTermRefPics* pLongTermRefPics;
}

public partial struct StdVideoEncodeH265ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
	public uint unused_for_reference;
	public uint reserved;
}

public partial struct StdVideoEncodeH265ReferenceInfo
{
	public StdVideoEncodeH265ReferenceInfoFlags flags;
	public StdVideoH265PictureType pic_type;
	public int PicOrderCntVal;
	public byte TemporalId;
}

public unsafe partial struct VkVideoEncodeH265CapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265CapabilitiesKHR;
	public void* pNext;
	public VkVideoEncodeH265CapabilityFlagsKHR flags;
	public StdVideoH265LevelIdc maxLevelIdc;
	public uint maxSliceSegmentCount;
	public VkExtent2D maxTiles;
	public VkVideoEncodeH265CtbSizeFlagsKHR ctbSizes;
	public VkVideoEncodeH265TransformBlockSizeFlagsKHR transformBlockSizes;
	public uint maxPPictureL0ReferenceCount;
	public uint maxBPictureL0ReferenceCount;
	public uint maxL1ReferenceCount;
	public uint maxSubLayerCount;
	public VkBool32 expectDyadicTemporalSubLayerPattern;
	public int minQp;
	public int maxQp;
	public VkBool32 prefersGopRemainingFrames;
	public VkBool32 requiresGopRemainingFrames;
	public VkVideoEncodeH265StdFlagsKHR stdSyntaxFlags;

	public VkVideoEncodeH265CapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265SessionCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265SessionCreateInfoKHR;
	public void* pNext;
	public VkBool32 useMaxLevelIdc;
	public StdVideoH265LevelIdc maxLevelIdc;

	public VkVideoEncodeH265SessionCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkVideoEncodeH265QpKHR
{
	public int qpI;
	public int qpP;
	public int qpB;
}

public unsafe partial struct VkVideoEncodeH265QualityLevelPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265QualityLevelPropertiesKHR;
	public void* pNext;
	public VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags;
	public uint preferredGopFrameCount;
	public uint preferredIdrPeriod;
	public uint preferredConsecutiveBFrameCount;
	public uint preferredSubLayerCount;
	public VkVideoEncodeH265QpKHR preferredConstantQp;
	public uint preferredMaxL0ReferenceCount;
	public uint preferredMaxL1ReferenceCount;

	public VkVideoEncodeH265QualityLevelPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265SessionParametersAddInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265SessionParametersAddInfoKHR;
	public void* pNext;
	public uint stdVPSCount;
	public StdVideoH265VideoParameterSet* pStdVPSs;
	public uint stdSPSCount;
	public StdVideoH265SequenceParameterSet* pStdSPSs;
	public uint stdPPSCount;
	public StdVideoH265PictureParameterSet* pStdPPSs;

	public VkVideoEncodeH265SessionParametersAddInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265SessionParametersCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265SessionParametersCreateInfoKHR;
	public void* pNext;
	public uint maxStdVPSCount;
	public uint maxStdSPSCount;
	public uint maxStdPPSCount;
	public VkVideoEncodeH265SessionParametersAddInfoKHR* pParametersAddInfo;

	public VkVideoEncodeH265SessionParametersCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265SessionParametersGetInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265SessionParametersGetInfoKHR;
	public void* pNext;
	public VkBool32 writeStdVPS;
	public VkBool32 writeStdSPS;
	public VkBool32 writeStdPPS;
	public uint stdVPSId;
	public uint stdSPSId;
	public uint stdPPSId;

	public VkVideoEncodeH265SessionParametersGetInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265SessionParametersFeedbackInfoKHR;
	public void* pNext;
	public VkBool32 hasStdVPSOverrides;
	public VkBool32 hasStdSPSOverrides;
	public VkBool32 hasStdPPSOverrides;

	public VkVideoEncodeH265SessionParametersFeedbackInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265NaluSliceSegmentInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265NaluSliceSegmentInfoKHR;
	public void* pNext;
	public int constantQp;
	public StdVideoEncodeH265SliceSegmentHeader* pStdSliceSegmentHeader;

	public VkVideoEncodeH265NaluSliceSegmentInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265PictureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265PictureInfoKHR;
	public void* pNext;
	public uint naluSliceSegmentEntryCount;
	public VkVideoEncodeH265NaluSliceSegmentInfoKHR* pNaluSliceSegmentEntries;
	public StdVideoEncodeH265PictureInfo* pStdPictureInfo;

	public VkVideoEncodeH265PictureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265DpbSlotInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265DpbSlotInfoKHR;
	public void* pNext;
	public StdVideoEncodeH265ReferenceInfo* pStdReferenceInfo;

	public VkVideoEncodeH265DpbSlotInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265ProfileInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265ProfileInfoKHR;
	public void* pNext;
	public StdVideoH265ProfileIdc stdProfileIdc;

	public VkVideoEncodeH265ProfileInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265RateControlInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265RateControlInfoKHR;
	public void* pNext;
	public VkVideoEncodeH265RateControlFlagsKHR flags;
	public uint gopFrameCount;
	public uint idrPeriod;
	public uint consecutiveBFrameCount;
	public uint subLayerCount;

	public VkVideoEncodeH265RateControlInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkVideoEncodeH265FrameSizeKHR
{
	public uint frameISize;
	public uint framePSize;
	public uint frameBSize;
}

public unsafe partial struct VkVideoEncodeH265RateControlLayerInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265RateControlLayerInfoKHR;
	public void* pNext;
	public VkBool32 useMinQp;
	public VkVideoEncodeH265QpKHR minQp;
	public VkBool32 useMaxQp;
	public VkVideoEncodeH265QpKHR maxQp;
	public VkBool32 useMaxFrameSize;
	public VkVideoEncodeH265FrameSizeKHR maxFrameSize;

	public VkVideoEncodeH265RateControlLayerInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265GopRemainingFrameInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265GopRemainingFrameInfoKHR;
	public void* pNext;
	public VkBool32 useGopRemainingFrames;
	public uint gopRemainingI;
	public uint gopRemainingP;
	public uint gopRemainingB;

	public VkVideoEncodeH265GopRemainingFrameInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct StdVideoDecodeH264PictureInfoFlags
{
	public uint field_pic_flag;
	public uint is_intra;
	public uint IdrPicFlag;
	public uint bottom_field_flag;
	public uint is_reference;
	public uint complementary_field_pair;
}

public unsafe partial struct StdVideoDecodeH264PictureInfo
{
	public StdVideoDecodeH264PictureInfoFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public byte reserved1;
	public byte reserved2;
	public ushort frame_num;
	public ushort idr_pic_id;
	public fixed int PicOrderCnt[2];
}

public partial struct StdVideoDecodeH264ReferenceInfoFlags
{
	public uint top_field_flag;
	public uint bottom_field_flag;
	public uint used_for_long_term_reference;
	public uint is_non_existing;
}

public unsafe partial struct StdVideoDecodeH264ReferenceInfo
{
	public StdVideoDecodeH264ReferenceInfoFlags flags;
	public ushort FrameNum;
	public ushort reserved;
	public fixed int PicOrderCnt[2];
}

public unsafe partial struct VkVideoDecodeH264ProfileInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH264ProfileInfoKHR;
	public void* pNext;
	public StdVideoH264ProfileIdc stdProfileIdc;
	public VkVideoDecodeH264PictureLayoutFlagsKHR pictureLayout;

	public VkVideoDecodeH264ProfileInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH264CapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH264CapabilitiesKHR;
	public void* pNext;
	public StdVideoH264LevelIdc maxLevelIdc;
	public VkOffset2D fieldOffsetGranularity;

	public VkVideoDecodeH264CapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH264SessionParametersAddInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH264SessionParametersAddInfoKHR;
	public void* pNext;
	public uint stdSPSCount;
	public StdVideoH264SequenceParameterSet* pStdSPSs;
	public uint stdPPSCount;
	public StdVideoH264PictureParameterSet* pStdPPSs;

	public VkVideoDecodeH264SessionParametersAddInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH264SessionParametersCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH264SessionParametersCreateInfoKHR;
	public void* pNext;
	public uint maxStdSPSCount;
	public uint maxStdPPSCount;
	public VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo;

	public VkVideoDecodeH264SessionParametersCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH264PictureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH264PictureInfoKHR;
	public void* pNext;
	public StdVideoDecodeH264PictureInfo* pStdPictureInfo;
	public uint sliceCount;
	public uint* pSliceOffsets;

	public VkVideoDecodeH264PictureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH264DpbSlotInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH264DpbSlotInfoKHR;
	public void* pNext;
	public StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo;

	public VkVideoDecodeH264DpbSlotInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMemoryFdInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMemoryFDInfoKHR;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public int fd;

	public VkImportMemoryFdInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryFdPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryFDPropertiesKHR;
	public void* pNext;
	public uint memoryTypeBits;

	public VkMemoryFdPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryGetFdInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryGetFDInfoKHR;
	public void* pNext;
	public VkDeviceMemory memory;
	public VkExternalMemoryHandleTypeFlags handleType;

	public VkMemoryGetFdInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportSemaphoreFdInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportSemaphoreFDInfoKHR;
	public void* pNext;
	public VkSemaphore semaphore;
	public VkSemaphoreImportFlags flags;
	public VkExternalSemaphoreHandleTypeFlags handleType;
	public int fd;

	public VkImportSemaphoreFdInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSemaphoreGetFdInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SemaphoreGetFDInfoKHR;
	public void* pNext;
	public VkSemaphore semaphore;
	public VkExternalSemaphoreHandleTypeFlags handleType;

	public VkSemaphoreGetFdInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkRectLayerKHR
{
	public VkOffset2D offset;
	public VkExtent2D extent;
	public uint layer;
}

public unsafe partial struct VkPresentRegionKHR
{
	public uint rectangleCount;
	public VkRectLayerKHR* pRectangles;
}

public unsafe partial struct VkPresentRegionsKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PresentRegionsKHR;
	public void* pNext;
	public uint swapchainCount;
	public VkPresentRegionKHR* pRegions;

	public VkPresentRegionsKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSharedPresentSurfaceCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SharedPresentSurfaceCapabilitiesKHR;
	public void* pNext;
	public VkImageUsageFlags sharedPresentSupportedUsageFlags;

	public VkSharedPresentSurfaceCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportFenceFdInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportFenceFDInfoKHR;
	public void* pNext;
	public VkFence fence;
	public VkFenceImportFlags flags;
	public VkExternalFenceHandleTypeFlags handleType;
	public int fd;

	public VkImportFenceFdInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFenceGetFdInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FenceGetFDInfoKHR;
	public void* pNext;
	public VkFence fence;
	public VkExternalFenceHandleTypeFlags handleType;

	public VkFenceGetFdInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePerformanceQueryFeaturesKHR;
	public void* pNext;
	public VkBool32 performanceCounterQueryPools;
	public VkBool32 performanceCounterMultipleQueryPools;

	public VkPhysicalDevicePerformanceQueryFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePerformanceQueryPropertiesKHR;
	public void* pNext;
	public VkBool32 allowCommandBufferQueryCopies;

	public VkPhysicalDevicePerformanceQueryPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerformanceCounterKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerformanceCounterKHR;
	public void* pNext;
	public VkPerformanceCounterUnitKHR unit;
	public VkPerformanceCounterScopeKHR scope;
	public VkPerformanceCounterStorageKHR storage;
	public fixed byte uuid[16];

	public VkPerformanceCounterKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerformanceCounterDescriptionKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerformanceCounterDescriptionKHR;
	public void* pNext;
	public VkPerformanceCounterDescriptionFlagsKHR flags;
	public fixed byte name[256];
	public fixed byte category[256];
	public fixed byte description[256];

	public VkPerformanceCounterDescriptionKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueryPoolPerformanceCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueryPoolPerformanceCreateInfoKHR;
	public void* pNext;
	public uint queueFamilyIndex;
	public uint counterIndexCount;
	public uint* pCounterIndices;

	public VkQueryPoolPerformanceCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkPerformanceCounterResultKHR
{
	[FieldOffset(0)]
	public int int32;
	[FieldOffset(0)]
	public long int64;
	[FieldOffset(0)]
	public uint uint32;
	[FieldOffset(0)]
	public ulong uint64;
	[FieldOffset(0)]
	public float float32;
	[FieldOffset(0)]
	public double float64;
}

public unsafe partial struct VkAcquireProfilingLockInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AcquireProfilingLockInfoKHR;
	public void* pNext;
	public VkAcquireProfilingLockFlagsKHR flags;
	public ulong timeout;

	public VkAcquireProfilingLockInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerformanceQuerySubmitInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerformanceQuerySubmitInfoKHR;
	public void* pNext;
	public uint counterPassIndex;

	public VkPerformanceQuerySubmitInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSurfaceInfo2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSurfaceInfo2KHR;
	public void* pNext;
	public VkSurfaceKHR surface;

	public VkPhysicalDeviceSurfaceInfo2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceCapabilities2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceCapabilities2KHR;
	public void* pNext;
	public VkSurfaceCapabilitiesKHR surfaceCapabilities;

	public VkSurfaceCapabilities2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceFormat2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceFormat2KHR;
	public void* pNext;
	public VkSurfaceFormatKHR surfaceFormat;

	public VkSurfaceFormat2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayProperties2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayProperties2KHR;
	public void* pNext;
	public VkDisplayPropertiesKHR displayProperties;

	public VkDisplayProperties2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayPlaneProperties2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayPlaneProperties2KHR;
	public void* pNext;
	public VkDisplayPlanePropertiesKHR displayPlaneProperties;

	public VkDisplayPlaneProperties2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayModeProperties2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayModeProperties2KHR;
	public void* pNext;
	public VkDisplayModePropertiesKHR displayModeProperties;

	public VkDisplayModeProperties2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayPlaneInfo2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayPlaneInfo2KHR;
	public void* pNext;
	public VkDisplayModeKHR mode;
	public uint planeIndex;

	public VkDisplayPlaneInfo2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayPlaneCapabilities2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayPlaneCapabilities2KHR;
	public void* pNext;
	public VkDisplayPlaneCapabilitiesKHR capabilities;

	public VkDisplayPlaneCapabilities2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderBfloat16FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderBfloat16FeaturesKHR;
	public void* pNext;
	public VkBool32 shaderBFloat16Type;
	public VkBool32 shaderBFloat16DotProduct;
	public VkBool32 shaderBFloat16CooperativeMatrix;

	public VkPhysicalDeviceShaderBfloat16FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderClockFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderClockFeaturesKHR;
	public void* pNext;
	public VkBool32 shaderSubgroupClock;
	public VkBool32 shaderDeviceClock;

	public VkPhysicalDeviceShaderClockFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct StdVideoDecodeH265PictureInfoFlags
{
	public uint IrapPicFlag;
	public uint IdrPicFlag;
	public uint IsReference;
	public uint short_term_ref_pic_set_sps_flag;
}

public unsafe partial struct StdVideoDecodeH265PictureInfo
{
	public StdVideoDecodeH265PictureInfoFlags flags;
	public byte sps_video_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte pps_pic_parameter_set_id;
	public byte NumDeltaPocsOfRefRpsIdx;
	public int PicOrderCntVal;
	public ushort NumBitsForSTRefPicSetInSlice;
	public ushort reserved;
	public fixed byte RefPicSetStCurrBefore[8];
	public fixed byte RefPicSetStCurrAfter[8];
	public fixed byte RefPicSetLtCurr[8];
}

public partial struct StdVideoDecodeH265ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
	public uint unused_for_reference;
}

public partial struct StdVideoDecodeH265ReferenceInfo
{
	public StdVideoDecodeH265ReferenceInfoFlags flags;
	public int PicOrderCntVal;
}

public unsafe partial struct VkVideoDecodeH265ProfileInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH265ProfileInfoKHR;
	public void* pNext;
	public StdVideoH265ProfileIdc stdProfileIdc;

	public VkVideoDecodeH265ProfileInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH265CapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH265CapabilitiesKHR;
	public void* pNext;
	public StdVideoH265LevelIdc maxLevelIdc;

	public VkVideoDecodeH265CapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH265SessionParametersAddInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH265SessionParametersAddInfoKHR;
	public void* pNext;
	public uint stdVPSCount;
	public StdVideoH265VideoParameterSet* pStdVPSs;
	public uint stdSPSCount;
	public StdVideoH265SequenceParameterSet* pStdSPSs;
	public uint stdPPSCount;
	public StdVideoH265PictureParameterSet* pStdPPSs;

	public VkVideoDecodeH265SessionParametersAddInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH265SessionParametersCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH265SessionParametersCreateInfoKHR;
	public void* pNext;
	public uint maxStdVPSCount;
	public uint maxStdSPSCount;
	public uint maxStdPPSCount;
	public VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo;

	public VkVideoDecodeH265SessionParametersCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH265PictureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH265PictureInfoKHR;
	public void* pNext;
	public StdVideoDecodeH265PictureInfo* pStdPictureInfo;
	public uint sliceSegmentCount;
	public uint* pSliceSegmentOffsets;

	public VkVideoDecodeH265PictureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH265DpbSlotInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH265DpbSlotInfoKHR;
	public void* pNext;
	public StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo;

	public VkVideoDecodeH265DpbSlotInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFragmentShadingRateAttachmentInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FragmentShadingRateAttachmentInfoKHR;
	public void* pNext;
	public VkAttachmentReference2* pFragmentShadingRateAttachment;
	public VkExtent2D shadingRateAttachmentTexelSize;

	public VkFragmentShadingRateAttachmentInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineFragmentShadingRateStateCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineFragmentShadingRateStateCreateInfoKHR;
	public void* pNext;
	public VkExtent2D fragmentSize;
	public combinerOps__FixedBuffer combinerOps;

	[InlineArray(2)]
	public partial struct combinerOps__FixedBuffer
	{
		public VkFragmentShadingRateCombinerOpKHR e0;
	}

	public VkPipelineFragmentShadingRateStateCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentShadingRateFeaturesKHR;
	public void* pNext;
	public VkBool32 pipelineFragmentShadingRate;
	public VkBool32 primitiveFragmentShadingRate;
	public VkBool32 attachmentFragmentShadingRate;

	public VkPhysicalDeviceFragmentShadingRateFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentShadingRatePropertiesKHR;
	public void* pNext;
	public VkExtent2D minFragmentShadingRateAttachmentTexelSize;
	public VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
	public uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
	public VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
	public VkBool32 layeredShadingRateAttachments;
	public VkBool32 fragmentShadingRateNonTrivialCombinerOps;
	public VkExtent2D maxFragmentSize;
	public uint maxFragmentSizeAspectRatio;
	public uint maxFragmentShadingRateCoverageSamples;
	public VkSampleCountFlags maxFragmentShadingRateRasterizationSamples;
	public VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
	public VkBool32 fragmentShadingRateWithSampleMask;
	public VkBool32 fragmentShadingRateWithShaderSampleMask;
	public VkBool32 fragmentShadingRateWithConservativeRasterization;
	public VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
	public VkBool32 fragmentShadingRateWithCustomSampleLocations;
	public VkBool32 fragmentShadingRateStrictMultiplyCombiner;

	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentShadingRateKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentShadingRateKHR;
	public void* pNext;
	public VkSampleCountFlags sampleCounts;
	public VkExtent2D fragmentSize;

	public VkPhysicalDeviceFragmentShadingRateKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderingFragmentShadingRateAttachmentInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderingFragmentShadingRateAttachmentInfoKHR;
	public void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
	public VkExtent2D shadingRateAttachmentTexelSize;

	public VkRenderingFragmentShadingRateAttachmentInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderQuadControlFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderQuadControlFeaturesKHR;
	public void* pNext;
	public VkBool32 shaderQuadControl;

	public VkPhysicalDeviceShaderQuadControlFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceProtectedCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceProtectedCapabilitiesKHR;
	public void* pNext;
	public VkBool32 supportsProtected;

	public VkSurfaceProtectedCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePresentWaitFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePresentWaitFeaturesKHR;
	public void* pNext;
	public VkBool32 presentWait;

	public VkPhysicalDevicePresentWaitFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
	public void* pNext;
	public VkBool32 pipelineExecutableInfo;

	public VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineInfoKHR;
	public void* pNext;
	public VkPipeline pipeline;

	public VkPipelineInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineExecutablePropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineExecutablePropertiesKHR;
	public void* pNext;
	public VkShaderStageFlags stages;
	public fixed byte name[256];
	public fixed byte description[256];
	public uint subgroupSize;

	public VkPipelineExecutablePropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineExecutableInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineExecutableInfoKHR;
	public void* pNext;
	public VkPipeline pipeline;
	public uint executableIndex;

	public VkPipelineExecutableInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkPipelineExecutableStatisticValueKHR
{
	[FieldOffset(0)]
	public VkBool32 b32;
	[FieldOffset(0)]
	public long i64;
	[FieldOffset(0)]
	public ulong u64;
	[FieldOffset(0)]
	public double f64;
}

public unsafe partial struct VkPipelineExecutableStatisticKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineExecutableStatisticKHR;
	public void* pNext;
	public fixed byte name[256];
	public fixed byte description[256];
	public VkPipelineExecutableStatisticFormatKHR format;
	public VkPipelineExecutableStatisticValueKHR value;

	public VkPipelineExecutableStatisticKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineExecutableInternalRepresentationKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineExecutableInternalRepresentationKHR;
	public void* pNext;
	public fixed byte name[256];
	public fixed byte description[256];
	public VkBool32 isText;
	public ulong dataSize;
	public void* pData;

	public VkPipelineExecutableInternalRepresentationKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineLibraryCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineLibraryCreateInfoKHR;
	public void* pNext;
	public uint libraryCount;
	public VkPipeline* pLibraries;

	public VkPipelineLibraryCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPresentIdKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PresentIdKHR;
	public void* pNext;
	public uint swapchainCount;
	public ulong* pPresentIds;

	public VkPresentIdKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePresentIdFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePresentIdFeaturesKHR;
	public void* pNext;
	public VkBool32 presentId;

	public VkPhysicalDevicePresentIdFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeInfoKHR;
	public void* pNext;
	public VkVideoEncodeFlagsKHR flags;
	public VkBuffer dstBuffer;
	public ulong dstBufferOffset;
	public ulong dstBufferRange;
	public VkVideoPictureResourceInfoKHR srcPictureResource;
	public VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
	public uint referenceSlotCount;
	public VkVideoReferenceSlotInfoKHR* pReferenceSlots;
	public uint precedingExternallyEncodedBytes;

	public VkVideoEncodeInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeCapabilitiesKHR;
	public void* pNext;
	public VkVideoEncodeCapabilityFlagsKHR flags;
	public VkVideoEncodeRateControlModeFlagsKHR rateControlModes;
	public uint maxRateControlLayers;
	public ulong maxBitrate;
	public uint maxQualityLevels;
	public VkExtent2D encodeInputPictureGranularity;
	public VkVideoEncodeFeedbackFlagsKHR supportedEncodeFeedbackFlags;

	public VkVideoEncodeCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueryPoolVideoEncodeFeedbackCreateInfoKHR;
	public void* pNext;
	public VkVideoEncodeFeedbackFlagsKHR encodeFeedbackFlags;

	public VkQueryPoolVideoEncodeFeedbackCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeUsageInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeUsageInfoKHR;
	public void* pNext;
	public VkVideoEncodeUsageFlagsKHR videoUsageHints;
	public VkVideoEncodeContentFlagsKHR videoContentHints;
	public VkVideoEncodeTuningModeKHR tuningMode;

	public VkVideoEncodeUsageInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeRateControlLayerInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeRateControlLayerInfoKHR;
	public void* pNext;
	public ulong averageBitrate;
	public ulong maxBitrate;
	public uint frameRateNumerator;
	public uint frameRateDenominator;

	public VkVideoEncodeRateControlLayerInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeRateControlInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeRateControlInfoKHR;
	public void* pNext;
	public VkVideoEncodeRateControlFlagsKHR flags;
	public VkVideoEncodeRateControlModeFlagsKHR rateControlMode;
	public uint layerCount;
	public VkVideoEncodeRateControlLayerInfoKHR* pLayers;
	public uint virtualBufferSizeInMs;
	public uint initialVirtualBufferSizeInMs;

	public VkVideoEncodeRateControlInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVideoEncodeQualityLevelInfoKHR;
	public void* pNext;
	public VkVideoProfileInfoKHR* pVideoProfile;
	public uint qualityLevel;

	public VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeQualityLevelPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeQualityLevelPropertiesKHR;
	public void* pNext;
	public VkVideoEncodeRateControlModeFlagsKHR preferredRateControlMode;
	public uint preferredRateControlLayerCount;

	public VkVideoEncodeQualityLevelPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeQualityLevelInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeQualityLevelInfoKHR;
	public void* pNext;
	public uint qualityLevel;

	public VkVideoEncodeQualityLevelInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeSessionParametersGetInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeSessionParametersGetInfoKHR;
	public void* pNext;
	public VkVideoSessionParametersKHR videoSessionParameters;

	public VkVideoEncodeSessionParametersGetInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeSessionParametersFeedbackInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeSessionParametersFeedbackInfoKHR;
	public void* pNext;
	public VkBool32 hasOverrides;

	public VkVideoEncodeSessionParametersFeedbackInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
	public void* pNext;
	public VkBool32 fragmentShaderBarycentric;

	public VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentShaderBarycentricPropertiesKHR;
	public void* pNext;
	public VkBool32 triStripVertexOrderIndependentOfProvokingVertex;

	public VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
	public void* pNext;
	public VkBool32 shaderSubgroupUniformControlFlow;

	public VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
	public void* pNext;
	public VkBool32 workgroupMemoryExplicitLayout;
	public VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout;
	public VkBool32 workgroupMemoryExplicitLayout8BitAccess;
	public VkBool32 workgroupMemoryExplicitLayout16BitAccess;

	public VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingMaintenance1FeaturesKHR;
	public void* pNext;
	public VkBool32 rayTracingMaintenance1;
	public VkBool32 rayTracingPipelineTraceRaysIndirect2;

	public VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkTraceRaysIndirectCommand2KHR
{
	public ulong raygenShaderRecordAddress;
	public ulong raygenShaderRecordSize;
	public ulong missShaderBindingTableAddress;
	public ulong missShaderBindingTableSize;
	public ulong missShaderBindingTableStride;
	public ulong hitShaderBindingTableAddress;
	public ulong hitShaderBindingTableSize;
	public ulong hitShaderBindingTableStride;
	public ulong callableShaderBindingTableAddress;
	public ulong callableShaderBindingTableSize;
	public ulong callableShaderBindingTableStride;
	public uint width;
	public uint height;
	public uint depth;
}

public unsafe partial struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR;
	public void* pNext;
	public VkBool32 shaderMaximalReconvergence;

	public VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceCapabilitiesPresentId2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceCapabilitiesPresentId2KHR;
	public void* pNext;
	public VkBool32 presentId2Supported;

	public VkSurfaceCapabilitiesPresentId2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPresentId2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PresentId2KHR;
	public void* pNext;
	public uint swapchainCount;
	public ulong* pPresentIds;

	public VkPresentId2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePresentId2FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePresentId2FeaturesKHR;
	public void* pNext;
	public VkBool32 presentId2;

	public VkPhysicalDevicePresentId2FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceCapabilitiesPresentWait2KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceCapabilitiesPresentWait2KHR;
	public void* pNext;
	public VkBool32 presentWait2Supported;

	public VkSurfaceCapabilitiesPresentWait2KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePresentWait2FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePresentWait2FeaturesKHR;
	public void* pNext;
	public VkBool32 presentWait2;

	public VkPhysicalDevicePresentWait2FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPresentWait2InfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PresentWait2InfoKHR;
	public void* pNext;
	public ulong presentId;
	public ulong timeout;

	public VkPresentWait2InfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingPositionFetchFeaturesKHR;
	public void* pNext;
	public VkBool32 rayTracingPositionFetch;

	public VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineBinaryFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineBinaryFeaturesKHR;
	public void* pNext;
	public VkBool32 pipelineBinaries;

	public VkPhysicalDevicePipelineBinaryFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineBinaryPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineBinaryPropertiesKHR;
	public void* pNext;
	public VkBool32 pipelineBinaryInternalCache;
	public VkBool32 pipelineBinaryInternalCacheControl;
	public VkBool32 pipelineBinaryPrefersInternalCache;
	public VkBool32 pipelineBinaryPrecompiledInternalCache;
	public VkBool32 pipelineBinaryCompressedData;

	public VkPhysicalDevicePipelineBinaryPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDevicePipelineBinaryInternalCacheControlKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DevicePipelineBinaryInternalCacheControlKHR;
	public void* pNext;
	public VkBool32 disableInternalCache;

	public VkDevicePipelineBinaryInternalCacheControlKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineBinaryKeyKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineBinaryKeyKHR;
	public void* pNext;
	public uint keySize;
	public fixed byte key[32];

	public VkPipelineBinaryKeyKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineBinaryDataKHR
{
	public ulong dataSize;
	public void* pData;
}

public unsafe partial struct VkPipelineBinaryKeysAndDataKHR
{
	public uint binaryCount;
	public VkPipelineBinaryKeyKHR* pPipelineBinaryKeys;
	public VkPipelineBinaryDataKHR* pPipelineBinaryData;
}

public unsafe partial struct VkPipelineCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineCreateInfoKHR;
	public void* pNext;

	public VkPipelineCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineBinaryCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineBinaryCreateInfoKHR;
	public void* pNext;
	public VkPipelineBinaryKeysAndDataKHR* pKeysAndDataInfo;
	public VkPipeline pipeline;
	public VkPipelineCreateInfoKHR* pPipelineCreateInfo;

	public VkPipelineBinaryCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineBinaryInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineBinaryInfoKHR;
	public void* pNext;
	public uint binaryCount;
	public VkPipelineBinaryKHR* pPipelineBinaries;

	public VkPipelineBinaryInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkReleaseCapturedPipelineDataInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ReleaseCapturedPipelineDataInfoKHR;
	public void* pNext;
	public VkPipeline pipeline;

	public VkReleaseCapturedPipelineDataInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineBinaryDataInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineBinaryDataInfoKHR;
	public void* pNext;
	public VkPipelineBinaryKHR pipelineBinary;

	public VkPipelineBinaryDataInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineBinaryHandlesInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineBinaryHandlesInfoKHR;
	public void* pNext;
	public uint pipelineBinaryCount;
	public VkPipelineBinaryKHR* pPipelineBinaries;

	public VkPipelineBinaryHandlesInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfacePresentModeKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfacePresentModeKHR;
	public void* pNext;
	public VkPresentModeKHR presentMode;

	public VkSurfacePresentModeKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfacePresentScalingCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfacePresentScalingCapabilitiesKHR;
	public void* pNext;
	public VkPresentScalingFlagsKHR supportedPresentScaling;
	public VkPresentGravityFlagsKHR supportedPresentGravityX;
	public VkPresentGravityFlagsKHR supportedPresentGravityY;
	public VkExtent2D minScaledImageExtent;
	public VkExtent2D maxScaledImageExtent;

	public VkSurfacePresentScalingCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfacePresentModeCompatibilityKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfacePresentModeCompatibilityKHR;
	public void* pNext;
	public uint presentModeCount;
	public VkPresentModeKHR* pPresentModes;

	public VkSurfacePresentModeCompatibilityKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSwapchainMaintenance1FeaturesKHR;
	public void* pNext;
	public VkBool32 swapchainMaintenance1;

	public VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSwapchainPresentFenceInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainPresentFenceInfoKHR;
	public void* pNext;
	public uint swapchainCount;
	public VkFence* pFences;

	public VkSwapchainPresentFenceInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSwapchainPresentModesCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainPresentModesCreateInfoKHR;
	public void* pNext;
	public uint presentModeCount;
	public VkPresentModeKHR* pPresentModes;

	public VkSwapchainPresentModesCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSwapchainPresentModeInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainPresentModeInfoKHR;
	public void* pNext;
	public uint swapchainCount;
	public VkPresentModeKHR* pPresentModes;

	public VkSwapchainPresentModeInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSwapchainPresentScalingCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainPresentScalingCreateInfoKHR;
	public void* pNext;
	public VkPresentScalingFlagsKHR scalingBehavior;
	public VkPresentGravityFlagsKHR presentGravityX;
	public VkPresentGravityFlagsKHR presentGravityY;

	public VkSwapchainPresentScalingCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkReleaseSwapchainImagesInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ReleaseSwapchainImagesInfoKHR;
	public void* pNext;
	public VkSwapchainKHR swapchain;
	public uint imageIndexCount;
	public uint* pImageIndices;

	public VkReleaseSwapchainImagesInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCooperativeMatrixPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CooperativeMatrixPropertiesKHR;
	public void* pNext;
	public uint MSize;
	public uint NSize;
	public uint KSize;
	public VkComponentTypeKHR AType;
	public VkComponentTypeKHR BType;
	public VkComponentTypeKHR CType;
	public VkComponentTypeKHR ResultType;
	public VkBool32 saturatingAccumulation;
	public VkScopeKHR scope;

	public VkCooperativeMatrixPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCooperativeMatrixFeaturesKHR;
	public void* pNext;
	public VkBool32 cooperativeMatrix;
	public VkBool32 cooperativeMatrixRobustBufferAccess;

	public VkPhysicalDeviceCooperativeMatrixFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCooperativeMatrixPropertiesKHR;
	public void* pNext;
	public VkShaderStageFlags cooperativeMatrixSupportedStages;

	public VkPhysicalDeviceCooperativeMatrixPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceComputeShaderDerivativesFeaturesKHR;
	public void* pNext;
	public VkBool32 computeDerivativeGroupQuads;
	public VkBool32 computeDerivativeGroupLinear;

	public VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceComputeShaderDerivativesPropertiesKHR;
	public void* pNext;
	public VkBool32 meshAndTaskShaderDerivatives;

	public VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct StdVideoAV1ColorConfigFlags
{
	public uint mono_chrome;
	public uint color_range;
	public uint separate_uv_delta_q;
	public uint color_description_present_flag;
	public uint reserved;
}

public partial struct StdVideoAV1ColorConfig
{
	public StdVideoAV1ColorConfigFlags flags;
	public byte BitDepth;
	public byte subsampling_x;
	public byte subsampling_y;
	public byte reserved1;
	public StdVideoAV1ColorPrimaries color_primaries;
	public StdVideoAV1TransferCharacteristics transfer_characteristics;
	public StdVideoAV1MatrixCoefficients matrix_coefficients;
	public StdVideoAV1ChromaSamplePosition chroma_sample_position;
}

public partial struct StdVideoAV1TimingInfoFlags
{
	public uint equal_picture_interval;
	public uint reserved;
}

public partial struct StdVideoAV1TimingInfo
{
	public StdVideoAV1TimingInfoFlags flags;
	public uint num_units_in_display_tick;
	public uint time_scale;
	public uint num_ticks_per_picture_minus_1;
}

public partial struct StdVideoAV1LoopFilterFlags
{
	public uint loop_filter_delta_enabled;
	public uint loop_filter_delta_update;
	public uint reserved;
}

public unsafe partial struct StdVideoAV1LoopFilter
{
	public StdVideoAV1LoopFilterFlags flags;
	public fixed byte loop_filter_level[4];
	public byte loop_filter_sharpness;
	public byte update_ref_delta;
	public fixed byte loop_filter_ref_deltas[8];
	public byte update_mode_delta;
	public fixed byte loop_filter_mode_deltas[2];
}

public partial struct StdVideoAV1QuantizationFlags
{
	public uint using_qmatrix;
	public uint diff_uv_delta;
	public uint reserved;
}

public partial struct StdVideoAV1Quantization
{
	public StdVideoAV1QuantizationFlags flags;
	public byte base_q_idx;
	public byte DeltaQYDc;
	public byte DeltaQUDc;
	public byte DeltaQUAc;
	public byte DeltaQVDc;
	public byte DeltaQVAc;
	public byte qm_y;
	public byte qm_u;
	public byte qm_v;
}

public unsafe partial struct StdVideoAV1Segmentation
{
	public fixed byte FeatureEnabled[8];
	public fixed short FeatureData[8 * 8];
}

public partial struct StdVideoAV1TileInfoFlags
{
	public uint uniform_tile_spacing_flag;
	public uint reserved;
}

public unsafe partial struct StdVideoAV1TileInfo
{
	public StdVideoAV1TileInfoFlags flags;
	public byte TileCols;
	public byte TileRows;
	public ushort context_update_tile_id;
	public byte tile_size_bytes_minus_1;
	public fixed byte reserved1[7];
	public ushort* pMiColStarts;
	public ushort* pMiRowStarts;
	public ushort* pWidthInSbsMinus1;
	public ushort* pHeightInSbsMinus1;
}

public unsafe partial struct StdVideoAV1CDEF
{
	public byte cdef_damping_minus_3;
	public byte cdef_bits;
	public fixed byte cdef_y_pri_strength[8];
	public fixed byte cdef_y_sec_strength[8];
	public fixed byte cdef_uv_pri_strength[8];
	public fixed byte cdef_uv_sec_strength[8];
}

public unsafe partial struct StdVideoAV1LoopRestoration
{
	public FrameRestorationType__FixedBuffer FrameRestorationType;

	[InlineArray(3)]
	public partial struct FrameRestorationType__FixedBuffer
	{
		public StdVideoAV1FrameRestorationType e0;
	}
	public fixed ushort LoopRestorationSize[3];
}

public unsafe partial struct StdVideoAV1GlobalMotion
{
	public fixed byte GmType[8];
	public fixed int gm_params[8 * 6];
}

public partial struct StdVideoAV1FilmGrainFlags
{
	public uint chroma_scaling_from_luma;
	public uint overlap_flag;
	public uint clip_to_restricted_range;
	public uint update_grain;
	public uint reserved;
}

public unsafe partial struct StdVideoAV1FilmGrain
{
	public StdVideoAV1FilmGrainFlags flags;
	public byte grain_scaling_minus_8;
	public byte ar_coeff_lag;
	public byte ar_coeff_shift_minus_6;
	public byte grain_scale_shift;
	public ushort grain_seed;
	public byte film_grain_params_ref_idx;
	public byte num_y_points;
	public fixed byte point_y_value[14];
	public fixed byte point_y_scaling[14];
	public byte num_cb_points;
	public fixed byte point_cb_value[10];
	public fixed byte point_cb_scaling[10];
	public byte num_cr_points;
	public fixed byte point_cr_value[10];
	public fixed byte point_cr_scaling[10];
	public fixed byte ar_coeffs_y_plus_128[24];
	public fixed byte ar_coeffs_cb_plus_128[25];
	public fixed byte ar_coeffs_cr_plus_128[25];
	public byte cb_mult;
	public byte cb_luma_mult;
	public ushort cb_offset;
	public byte cr_mult;
	public byte cr_luma_mult;
	public ushort cr_offset;
}

public partial struct StdVideoAV1SequenceHeaderFlags
{
	public uint still_picture;
	public uint reduced_still_picture_header;
	public uint use_128x128_superblock;
	public uint enable_filter_intra;
	public uint enable_intra_edge_filter;
	public uint enable_interintra_compound;
	public uint enable_masked_compound;
	public uint enable_warped_motion;
	public uint enable_dual_filter;
	public uint enable_order_hint;
	public uint enable_jnt_comp;
	public uint enable_ref_frame_mvs;
	public uint frame_id_numbers_present_flag;
	public uint enable_superres;
	public uint enable_cdef;
	public uint enable_restoration;
	public uint film_grain_params_present;
	public uint timing_info_present_flag;
	public uint initial_display_delay_present_flag;
	public uint reserved;
}

public unsafe partial struct StdVideoAV1SequenceHeader
{
	public StdVideoAV1SequenceHeaderFlags flags;
	public StdVideoAV1Profile seq_profile;
	public byte frame_width_bits_minus_1;
	public byte frame_height_bits_minus_1;
	public ushort max_frame_width_minus_1;
	public ushort max_frame_height_minus_1;
	public byte delta_frame_id_length_minus_2;
	public byte additional_frame_id_length_minus_1;
	public byte order_hint_bits_minus_1;
	public byte seq_force_integer_mv;
	public byte seq_force_screen_content_tools;
	public fixed byte reserved1[5];
	public StdVideoAV1ColorConfig* pColorConfig;
	public StdVideoAV1TimingInfo* pTimingInfo;
}

public partial struct StdVideoDecodeAV1PictureInfoFlags
{
	public uint error_resilient_mode;
	public uint disable_cdf_update;
	public uint use_superres;
	public uint render_and_frame_size_different;
	public uint allow_screen_content_tools;
	public uint is_filter_switchable;
	public uint force_integer_mv;
	public uint frame_size_override_flag;
	public uint buffer_removal_time_present_flag;
	public uint allow_intrabc;
	public uint frame_refs_short_signaling;
	public uint allow_high_precision_mv;
	public uint is_motion_mode_switchable;
	public uint use_ref_frame_mvs;
	public uint disable_frame_end_update_cdf;
	public uint allow_warped_motion;
	public uint reduced_tx_set;
	public uint reference_select;
	public uint skip_mode_present;
	public uint delta_q_present;
	public uint delta_lf_present;
	public uint delta_lf_multi;
	public uint segmentation_enabled;
	public uint segmentation_update_map;
	public uint segmentation_temporal_update;
	public uint segmentation_update_data;
	public uint UsesLr;
	public uint usesChromaLr;
	public uint apply_grain;
	public uint reserved;
}

public unsafe partial struct StdVideoDecodeAV1PictureInfo
{
	public StdVideoDecodeAV1PictureInfoFlags flags;
	public StdVideoAV1FrameType frame_type;
	public uint current_frame_id;
	public byte OrderHint;
	public byte primary_ref_frame;
	public byte refresh_frame_flags;
	public byte reserved1;
	public StdVideoAV1InterpolationFilter interpolation_filter;
	public StdVideoAV1TxMode TxMode;
	public byte delta_q_res;
	public byte delta_lf_res;
	public fixed byte SkipModeFrame[2];
	public byte coded_denom;
	public fixed byte reserved2[3];
	public fixed byte OrderHints[8];
	public fixed uint expectedFrameId[8];
	public StdVideoAV1TileInfo* pTileInfo;
	public StdVideoAV1Quantization* pQuantization;
	public StdVideoAV1Segmentation* pSegmentation;
	public StdVideoAV1LoopFilter* pLoopFilter;
	public StdVideoAV1CDEF* pCDEF;
	public StdVideoAV1LoopRestoration* pLoopRestoration;
	public StdVideoAV1GlobalMotion* pGlobalMotion;
	public StdVideoAV1FilmGrain* pFilmGrain;
}

public partial struct StdVideoDecodeAV1ReferenceInfoFlags
{
	public uint disable_frame_end_update_cdf;
	public uint segmentation_enabled;
	public uint reserved;
}

public unsafe partial struct StdVideoDecodeAV1ReferenceInfo
{
	public StdVideoDecodeAV1ReferenceInfoFlags flags;
	public byte frame_type;
	public byte RefFrameSignBias;
	public byte OrderHint;
	public fixed byte SavedOrderHints[8];
}

public unsafe partial struct VkVideoDecodeAV1ProfileInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeAV1ProfileInfoKHR;
	public void* pNext;
	public StdVideoAV1Profile stdProfile;
	public VkBool32 filmGrainSupport;

	public VkVideoDecodeAV1ProfileInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeAV1CapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeAV1CapabilitiesKHR;
	public void* pNext;
	public StdVideoAV1Level maxLevel;

	public VkVideoDecodeAV1CapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeAV1SessionParametersCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeAV1SessionParametersCreateInfoKHR;
	public void* pNext;
	public StdVideoAV1SequenceHeader* pStdSequenceHeader;

	public VkVideoDecodeAV1SessionParametersCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeAV1PictureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeAV1PictureInfoKHR;
	public void* pNext;
	public StdVideoDecodeAV1PictureInfo* pStdPictureInfo;
	public fixed int referenceNameSlotIndices[7];
	public uint frameHeaderOffset;
	public uint tileCount;
	public uint* pTileOffsets;
	public uint* pTileSizes;

	public VkVideoDecodeAV1PictureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeAV1DpbSlotInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeAV1DpbSlotInfoKHR;
	public void* pNext;
	public StdVideoDecodeAV1ReferenceInfo* pStdReferenceInfo;

	public VkVideoDecodeAV1DpbSlotInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct StdVideoEncodeAV1DecoderModelInfo
{
	public byte buffer_delay_length_minus_1;
	public byte buffer_removal_time_length_minus_1;
	public byte frame_presentation_time_length_minus_1;
	public byte reserved1;
	public uint num_units_in_decoding_tick;
}

public partial struct StdVideoEncodeAV1ExtensionHeader
{
	public byte temporal_id;
	public byte spatial_id;
}

public partial struct StdVideoEncodeAV1OperatingPointInfoFlags
{
	public uint decoder_model_present_for_this_op;
	public uint low_delay_mode_flag;
	public uint initial_display_delay_present_for_this_op;
	public uint reserved;
}

public partial struct StdVideoEncodeAV1OperatingPointInfo
{
	public StdVideoEncodeAV1OperatingPointInfoFlags flags;
	public ushort operating_point_idc;
	public byte seq_level_idx;
	public byte seq_tier;
	public uint decoder_buffer_delay;
	public uint encoder_buffer_delay;
	public byte initial_display_delay_minus_1;
}

public partial struct StdVideoEncodeAV1PictureInfoFlags
{
	public uint error_resilient_mode;
	public uint disable_cdf_update;
	public uint use_superres;
	public uint render_and_frame_size_different;
	public uint allow_screen_content_tools;
	public uint is_filter_switchable;
	public uint force_integer_mv;
	public uint frame_size_override_flag;
	public uint buffer_removal_time_present_flag;
	public uint allow_intrabc;
	public uint frame_refs_short_signaling;
	public uint allow_high_precision_mv;
	public uint is_motion_mode_switchable;
	public uint use_ref_frame_mvs;
	public uint disable_frame_end_update_cdf;
	public uint allow_warped_motion;
	public uint reduced_tx_set;
	public uint skip_mode_present;
	public uint delta_q_present;
	public uint delta_lf_present;
	public uint delta_lf_multi;
	public uint segmentation_enabled;
	public uint segmentation_update_map;
	public uint segmentation_temporal_update;
	public uint segmentation_update_data;
	public uint UsesLr;
	public uint usesChromaLr;
	public uint show_frame;
	public uint showable_frame;
	public uint reserved;
}

public unsafe partial struct StdVideoEncodeAV1PictureInfo
{
	public StdVideoEncodeAV1PictureInfoFlags flags;
	public StdVideoAV1FrameType frame_type;
	public uint frame_presentation_time;
	public uint current_frame_id;
	public byte order_hint;
	public byte primary_ref_frame;
	public byte refresh_frame_flags;
	public byte coded_denom;
	public ushort render_width_minus_1;
	public ushort render_height_minus_1;
	public StdVideoAV1InterpolationFilter interpolation_filter;
	public StdVideoAV1TxMode TxMode;
	public byte delta_q_res;
	public byte delta_lf_res;
	public fixed byte ref_order_hint[8];
	public fixed byte ref_frame_idx[7];
	public fixed byte reserved1[3];
	public fixed uint delta_frame_id_minus_1[7];
	public StdVideoAV1TileInfo* pTileInfo;
	public StdVideoAV1Quantization* pQuantization;
	public StdVideoAV1Segmentation* pSegmentation;
	public StdVideoAV1LoopFilter* pLoopFilter;
	public StdVideoAV1CDEF* pCDEF;
	public StdVideoAV1LoopRestoration* pLoopRestoration;
	public StdVideoAV1GlobalMotion* pGlobalMotion;
	public StdVideoEncodeAV1ExtensionHeader* pExtensionHeader;
	public uint* pBufferRemovalTimes;
}

public partial struct StdVideoEncodeAV1ReferenceInfoFlags
{
	public uint disable_frame_end_update_cdf;
	public uint segmentation_enabled;
	public uint reserved;
}

public unsafe partial struct StdVideoEncodeAV1ReferenceInfo
{
	public StdVideoEncodeAV1ReferenceInfoFlags flags;
	public uint RefFrameId;
	public StdVideoAV1FrameType frame_type;
	public byte OrderHint;
	public fixed byte reserved1[3];
	public StdVideoEncodeAV1ExtensionHeader* pExtensionHeader;
}

public unsafe partial struct VkPhysicalDeviceVideoEncodeAV1FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVideoEncodeAV1FeaturesKHR;
	public void* pNext;
	public VkBool32 videoEncodeAV1;

	public VkPhysicalDeviceVideoEncodeAV1FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1CapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1CapabilitiesKHR;
	public void* pNext;
	public VkVideoEncodeAV1CapabilityFlagsKHR flags;
	public StdVideoAV1Level maxLevel;
	public VkExtent2D codedPictureAlignment;
	public VkExtent2D maxTiles;
	public VkExtent2D minTileSize;
	public VkExtent2D maxTileSize;
	public VkVideoEncodeAV1SuperblockSizeFlagsKHR superblockSizes;
	public uint maxSingleReferenceCount;
	public uint singleReferenceNameMask;
	public uint maxUnidirectionalCompoundReferenceCount;
	public uint maxUnidirectionalCompoundGroup1ReferenceCount;
	public uint unidirectionalCompoundReferenceNameMask;
	public uint maxBidirectionalCompoundReferenceCount;
	public uint maxBidirectionalCompoundGroup1ReferenceCount;
	public uint maxBidirectionalCompoundGroup2ReferenceCount;
	public uint bidirectionalCompoundReferenceNameMask;
	public uint maxTemporalLayerCount;
	public uint maxSpatialLayerCount;
	public uint maxOperatingPoints;
	public uint minQIndex;
	public uint maxQIndex;
	public VkBool32 prefersGopRemainingFrames;
	public VkBool32 requiresGopRemainingFrames;
	public VkVideoEncodeAV1StdFlagsKHR stdSyntaxFlags;

	public VkVideoEncodeAV1CapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkVideoEncodeAV1QIndexKHR
{
	public uint intraQIndex;
	public uint predictiveQIndex;
	public uint bipredictiveQIndex;
}

public unsafe partial struct VkVideoEncodeAV1QualityLevelPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1QualityLevelPropertiesKHR;
	public void* pNext;
	public VkVideoEncodeAV1RateControlFlagsKHR preferredRateControlFlags;
	public uint preferredGopFrameCount;
	public uint preferredKeyFramePeriod;
	public uint preferredConsecutiveBipredictiveFrameCount;
	public uint preferredTemporalLayerCount;
	public VkVideoEncodeAV1QIndexKHR preferredConstantQIndex;
	public uint preferredMaxSingleReferenceCount;
	public uint preferredSingleReferenceNameMask;
	public uint preferredMaxUnidirectionalCompoundReferenceCount;
	public uint preferredMaxUnidirectionalCompoundGroup1ReferenceCount;
	public uint preferredUnidirectionalCompoundReferenceNameMask;
	public uint preferredMaxBidirectionalCompoundReferenceCount;
	public uint preferredMaxBidirectionalCompoundGroup1ReferenceCount;
	public uint preferredMaxBidirectionalCompoundGroup2ReferenceCount;
	public uint preferredBidirectionalCompoundReferenceNameMask;

	public VkVideoEncodeAV1QualityLevelPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1SessionCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1SessionCreateInfoKHR;
	public void* pNext;
	public VkBool32 useMaxLevel;
	public StdVideoAV1Level maxLevel;

	public VkVideoEncodeAV1SessionCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1SessionParametersCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1SessionParametersCreateInfoKHR;
	public void* pNext;
	public StdVideoAV1SequenceHeader* pStdSequenceHeader;
	public StdVideoEncodeAV1DecoderModelInfo* pStdDecoderModelInfo;
	public uint stdOperatingPointCount;
	public StdVideoEncodeAV1OperatingPointInfo* pStdOperatingPoints;

	public VkVideoEncodeAV1SessionParametersCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1PictureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1PictureInfoKHR;
	public void* pNext;
	public VkVideoEncodeAV1PredictionModeKHR predictionMode;
	public VkVideoEncodeAV1RateControlGroupKHR rateControlGroup;
	public uint constantQIndex;
	public StdVideoEncodeAV1PictureInfo* pStdPictureInfo;
	public fixed int referenceNameSlotIndices[7];
	public VkBool32 primaryReferenceCdfOnly;
	public VkBool32 generateObuExtensionHeader;

	public VkVideoEncodeAV1PictureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1DpbSlotInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1DpbSlotInfoKHR;
	public void* pNext;
	public StdVideoEncodeAV1ReferenceInfo* pStdReferenceInfo;

	public VkVideoEncodeAV1DpbSlotInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1ProfileInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1ProfileInfoKHR;
	public void* pNext;
	public StdVideoAV1Profile stdProfile;

	public VkVideoEncodeAV1ProfileInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkVideoEncodeAV1FrameSizeKHR
{
	public uint intraFrameSize;
	public uint predictiveFrameSize;
	public uint bipredictiveFrameSize;
}

public unsafe partial struct VkVideoEncodeAV1GopRemainingFrameInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1GopRemainingFrameInfoKHR;
	public void* pNext;
	public VkBool32 useGopRemainingFrames;
	public uint gopRemainingIntra;
	public uint gopRemainingPredictive;
	public uint gopRemainingBipredictive;

	public VkVideoEncodeAV1GopRemainingFrameInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1RateControlInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1RateControlInfoKHR;
	public void* pNext;
	public VkVideoEncodeAV1RateControlFlagsKHR flags;
	public uint gopFrameCount;
	public uint keyFramePeriod;
	public uint consecutiveBipredictiveFrameCount;
	public uint temporalLayerCount;

	public VkVideoEncodeAV1RateControlInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1RateControlLayerInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1RateControlLayerInfoKHR;
	public void* pNext;
	public VkBool32 useMinQIndex;
	public VkVideoEncodeAV1QIndexKHR minQIndex;
	public VkBool32 useMaxQIndex;
	public VkVideoEncodeAV1QIndexKHR maxQIndex;
	public VkBool32 useMaxFrameSize;
	public VkVideoEncodeAV1FrameSizeKHR maxFrameSize;

	public VkVideoEncodeAV1RateControlLayerInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct StdVideoVP9ColorConfigFlags
{
	public uint color_range;
	public uint reserved;
}

public partial struct StdVideoVP9ColorConfig
{
	public StdVideoVP9ColorConfigFlags flags;
	public byte BitDepth;
	public byte subsampling_x;
	public byte subsampling_y;
	public byte reserved1;
	public StdVideoVP9ColorSpace color_space;
}

public partial struct StdVideoVP9LoopFilterFlags
{
	public uint loop_filter_delta_enabled;
	public uint loop_filter_delta_update;
	public uint reserved;
}

public unsafe partial struct StdVideoVP9LoopFilter
{
	public StdVideoVP9LoopFilterFlags flags;
	public byte loop_filter_level;
	public byte loop_filter_sharpness;
	public byte update_ref_delta;
	public fixed byte loop_filter_ref_deltas[4];
	public byte update_mode_delta;
	public fixed byte loop_filter_mode_deltas[2];
}

public partial struct StdVideoVP9SegmentationFlags
{
	public uint segmentation_update_map;
	public uint segmentation_temporal_update;
	public uint segmentation_update_data;
	public uint segmentation_abs_or_delta_update;
	public uint reserved;
}

public unsafe partial struct StdVideoVP9Segmentation
{
	public StdVideoVP9SegmentationFlags flags;
	public fixed byte segmentation_tree_probs[7];
	public fixed byte segmentation_pred_prob[3];
	public fixed byte FeatureEnabled[8];
	public fixed short FeatureData[8 * 4];
}

public partial struct StdVideoDecodeVP9PictureInfoFlags
{
	public uint error_resilient_mode;
	public uint intra_only;
	public uint allow_high_precision_mv;
	public uint refresh_frame_context;
	public uint frame_parallel_decoding_mode;
	public uint segmentation_enabled;
	public uint show_frame;
	public uint UsePrevFrameMvs;
	public uint reserved;
}

public unsafe partial struct StdVideoDecodeVP9PictureInfo
{
	public StdVideoDecodeVP9PictureInfoFlags flags;
	public StdVideoVP9Profile profile;
	public StdVideoVP9FrameType frame_type;
	public byte frame_context_idx;
	public byte reset_frame_context;
	public byte refresh_frame_flags;
	public byte ref_frame_sign_bias_mask;
	public StdVideoVP9InterpolationFilter interpolation_filter;
	public byte base_q_idx;
	public byte delta_q_y_dc;
	public byte delta_q_uv_dc;
	public byte delta_q_uv_ac;
	public byte tile_cols_log2;
	public byte tile_rows_log2;
	public fixed ushort reserved1[3];
	public StdVideoVP9ColorConfig* pColorConfig;
	public StdVideoVP9LoopFilter* pLoopFilter;
	public StdVideoVP9Segmentation* pSegmentation;
}

public unsafe partial struct VkPhysicalDeviceVideoDecodeVP9FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVideoDecodeVP9FeaturesKHR;
	public void* pNext;
	public VkBool32 videoDecodeVP9;

	public VkPhysicalDeviceVideoDecodeVP9FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeVP9ProfileInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeVP9ProfileInfoKHR;
	public void* pNext;
	public StdVideoVP9Profile stdProfile;

	public VkVideoDecodeVP9ProfileInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeVP9CapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeVP9CapabilitiesKHR;
	public void* pNext;
	public StdVideoVP9Level maxLevel;

	public VkVideoDecodeVP9CapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeVP9PictureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeVP9PictureInfoKHR;
	public void* pNext;
	public StdVideoDecodeVP9PictureInfo* pStdPictureInfo;
	public fixed int referenceNameSlotIndices[3];
	public uint uncompressedHeaderOffset;
	public uint compressedHeaderOffset;
	public uint tilesOffset;

	public VkVideoDecodeVP9PictureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVideoMaintenance1FeaturesKHR;
	public void* pNext;
	public VkBool32 videoMaintenance1;

	public VkPhysicalDeviceVideoMaintenance1FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoInlineQueryInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoInlineQueryInfoKHR;
	public void* pNext;
	public VkQueryPool queryPool;
	public uint firstQuery;
	public uint queryCount;

	public VkVideoInlineQueryInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceUnifiedImageLayoutsFeaturesKHR;
	public void* pNext;
	public VkBool32 unifiedImageLayouts;
	public VkBool32 unifiedImageLayoutsVideo;

	public VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAttachmentFeedbackLoopInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AttachmentFeedbackLoopInfoEXT;
	public void* pNext;
	public VkBool32 feedbackLoopEnable;

	public VkAttachmentFeedbackLoopInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCalibratedTimestampInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CalibratedTimestampInfoKHR;
	public void* pNext;
	public VkTimeDomainKHR timeDomain;

	public VkCalibratedTimestampInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSetDescriptorBufferOffsetsInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SetDescriptorBufferOffsetsInfoEXT;
	public void* pNext;
	public VkShaderStageFlags stageFlags;
	public VkPipelineLayout layout;
	public uint firstSet;
	public uint setCount;
	public uint* pBufferIndices;
	public ulong* pOffsets;

	public VkSetDescriptorBufferOffsetsInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindDescriptorBufferEmbeddedSamplersInfoEXT;
	public void* pNext;
	public VkShaderStageFlags stageFlags;
	public VkPipelineLayout layout;
	public uint set;

	public VkBindDescriptorBufferEmbeddedSamplersInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeIntraRefreshCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeIntraRefreshCapabilitiesKHR;
	public void* pNext;
	public VkVideoEncodeIntraRefreshModeFlagsKHR intraRefreshModes;
	public uint maxIntraRefreshCycleDuration;
	public uint maxIntraRefreshActiveReferencePictures;
	public VkBool32 partitionIndependentIntraRefreshRegions;
	public VkBool32 nonRectangularIntraRefreshRegions;

	public VkVideoEncodeIntraRefreshCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeSessionIntraRefreshCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeSessionIntraRefreshCreateInfoKHR;
	public void* pNext;
	public VkVideoEncodeIntraRefreshModeFlagsKHR intraRefreshMode;

	public VkVideoEncodeSessionIntraRefreshCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeIntraRefreshInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeIntraRefreshInfoKHR;
	public void* pNext;
	public uint intraRefreshCycleDuration;
	public uint intraRefreshIndex;

	public VkVideoEncodeIntraRefreshInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoReferenceIntraRefreshInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoReferenceIntraRefreshInfoKHR;
	public void* pNext;
	public uint dirtyIntraRefreshRegions;

	public VkVideoReferenceIntraRefreshInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR;
	public void* pNext;
	public VkBool32 videoEncodeIntraRefresh;

	public VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeQuantizationMapCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeQuantizationMapCapabilitiesKHR;
	public void* pNext;
	public VkExtent2D maxQuantizationMapExtent;

	public VkVideoEncodeQuantizationMapCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoFormatQuantizationMapPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoFormatQuantizationMapPropertiesKHR;
	public void* pNext;
	public VkExtent2D quantizationMapTexelSize;

	public VkVideoFormatQuantizationMapPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeQuantizationMapInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeQuantizationMapInfoKHR;
	public void* pNext;
	public VkImageView quantizationMap;
	public VkExtent2D quantizationMapExtent;

	public VkVideoEncodeQuantizationMapInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeQuantizationMapSessionParametersCreateInfoKHR;
	public void* pNext;
	public VkExtent2D quantizationMapTexelSize;

	public VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR;
	public void* pNext;
	public VkBool32 videoEncodeQuantizationMap;

	public VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH264QuantizationMapCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH264QuantizationMapCapabilitiesKHR;
	public void* pNext;
	public int minQpDelta;
	public int maxQpDelta;

	public VkVideoEncodeH264QuantizationMapCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeH265QuantizationMapCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeH265QuantizationMapCapabilitiesKHR;
	public void* pNext;
	public int minQpDelta;
	public int maxQpDelta;

	public VkVideoEncodeH265QuantizationMapCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoFormatH265QuantizationMapPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoFormatH265QuantizationMapPropertiesKHR;
	public void* pNext;
	public VkVideoEncodeH265CtbSizeFlagsKHR compatibleCtbSizes;

	public VkVideoFormatH265QuantizationMapPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoEncodeAV1QuantizationMapCapabilitiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoEncodeAV1QuantizationMapCapabilitiesKHR;
	public void* pNext;
	public int minQIndexDelta;
	public int maxQIndexDelta;

	public VkVideoEncodeAV1QuantizationMapCapabilitiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoFormatAV1QuantizationMapPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoFormatAV1QuantizationMapPropertiesKHR;
	public void* pNext;
	public VkVideoEncodeAV1SuperblockSizeFlagsKHR compatibleSuperblockSizes;

	public VkVideoFormatAV1QuantizationMapPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR;
	public void* pNext;
	public VkBool32 shaderRelaxedExtendedInstruction;

	public VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance7FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance7FeaturesKHR;
	public void* pNext;
	public VkBool32 maintenance7;

	public VkPhysicalDeviceMaintenance7FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance7PropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance7PropertiesKHR;
	public void* pNext;
	public VkBool32 robustFragmentShadingRateAttachmentAccess;
	public VkBool32 separateDepthStencilAttachmentAccess;
	public uint maxDescriptorSetTotalUniformBuffersDynamic;
	public uint maxDescriptorSetTotalStorageBuffersDynamic;
	public uint maxDescriptorSetTotalBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindTotalBuffersDynamic;

	public VkPhysicalDeviceMaintenance7PropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLayeredApiPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLayeredApiPropertiesKHR;
	public void* pNext;
	public uint vendorID;
	public uint deviceID;
	public VkPhysicalDeviceLayeredApiKHR layeredAPI;
	public fixed byte deviceName[256];

	public VkPhysicalDeviceLayeredApiPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLayeredApiPropertiesListKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLayeredApiPropertiesListKHR;
	public void* pNext;
	public uint layeredApiCount;
	public VkPhysicalDeviceLayeredApiPropertiesKHR* pLayeredApis;

	public VkPhysicalDeviceLayeredApiPropertiesListKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLayeredApiVulkanPropertiesKHR;
	public void* pNext;
	public VkPhysicalDeviceProperties2 properties;

	public VkPhysicalDeviceLayeredApiVulkanPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance8FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance8FeaturesKHR;
	public void* pNext;
	public VkBool32 maintenance8;

	public VkPhysicalDeviceMaintenance8FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryBarrierAccessFlags3KHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryBarrierAccessFlags3KHR;
	public void* pNext;
	public VkAccessFlags3KHR srcAccessMask3;
	public VkAccessFlags3KHR dstAccessMask3;

	public VkMemoryBarrierAccessFlags3KHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance9FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance9FeaturesKHR;
	public void* pNext;
	public VkBool32 maintenance9;

	public VkPhysicalDeviceMaintenance9FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMaintenance9PropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMaintenance9PropertiesKHR;
	public void* pNext;
	public VkBool32 image2DViewOf3DSparse;
	public VkDefaultVertexAttributeValueKHR defaultVertexAttributeValue;

	public VkPhysicalDeviceMaintenance9PropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueueFamilyOwnershipTransferPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyOwnershipTransferPropertiesKHR;
	public void* pNext;
	public uint optimalImageTransferToQueueFamilies;

	public VkQueueFamilyOwnershipTransferPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVideoMaintenance2FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVideoMaintenance2FeaturesKHR;
	public void* pNext;
	public VkBool32 videoMaintenance2;

	public VkPhysicalDeviceVideoMaintenance2FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH264InlineSessionParametersInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH264InlineSessionParametersInfoKHR;
	public void* pNext;
	public StdVideoH264SequenceParameterSet* pStdSPS;
	public StdVideoH264PictureParameterSet* pStdPPS;

	public VkVideoDecodeH264InlineSessionParametersInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeH265InlineSessionParametersInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeH265InlineSessionParametersInfoKHR;
	public void* pNext;
	public StdVideoH265VideoParameterSet* pStdVPS;
	public StdVideoH265SequenceParameterSet* pStdSPS;
	public StdVideoH265PictureParameterSet* pStdPPS;

	public VkVideoDecodeH265InlineSessionParametersInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVideoDecodeAV1InlineSessionParametersInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VideoDecodeAV1InlineSessionParametersInfoKHR;
	public void* pNext;
	public StdVideoAV1SequenceHeader* pStdSequenceHeader;

	public VkVideoDecodeAV1InlineSessionParametersInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDepthClampZeroOneFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDepthClampZeroOneFeaturesKHR;
	public void* pNext;
	public VkBool32 depthClampZeroOne;

	public VkPhysicalDeviceDepthClampZeroOneFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRobustness2FeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRobustness2FeaturesKHR;
	public void* pNext;
	public VkBool32 robustBufferAccess2;
	public VkBool32 robustImageAccess2;
	public VkBool32 nullDescriptor;

	public VkPhysicalDeviceRobustness2FeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRobustness2PropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRobustness2PropertiesKHR;
	public void* pNext;
	public ulong robustStorageBufferAccessSizeAlignment;
	public ulong robustUniformBufferAccessSizeAlignment;

	public VkPhysicalDeviceRobustness2PropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePresentModeFifoLatestReadyFeaturesKHR;
	public void* pNext;
	public VkBool32 presentModeFifoLatestReady;

	public VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugReportCallbackCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugReportCallbackCreateInfoEXT;
	public void* pNext;
	public VkDebugReportFlagsEXT flags;
	public delegate* unmanaged<VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, ulong, int, byte*, byte*, void*, uint> pfnCallback;
	public void* pUserData;

	public VkDebugReportCallbackCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRasterizationStateRasterizationOrderAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRasterizationStateRasterizationOrderAMD;
	public void* pNext;
	public VkRasterizationOrderAMD rasterizationOrder;

	public VkPipelineRasterizationStateRasterizationOrderAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugMarkerObjectNameInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugMarkerObjectNameInfoEXT;
	public void* pNext;
	public VkDebugReportObjectTypeEXT objectType;
	public ulong @object;
	public byte* pObjectName;

	public VkDebugMarkerObjectNameInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugMarkerObjectTagInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugMarkerObjectTagInfoEXT;
	public void* pNext;
	public VkDebugReportObjectTypeEXT objectType;
	public ulong @object;
	public ulong tagName;
	public ulong tagSize;
	public void* pTag;

	public VkDebugMarkerObjectTagInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugMarkerMarkerInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugMarkerMarkerInfoEXT;
	public void* pNext;
	public byte* pMarkerName;
	public fixed float color[4];

	public VkDebugMarkerMarkerInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDedicatedAllocationImageCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DedicatedAllocationImageCreateInfoNV;
	public void* pNext;
	public VkBool32 dedicatedAllocation;

	public VkDedicatedAllocationImageCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDedicatedAllocationBufferCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DedicatedAllocationBufferCreateInfoNV;
	public void* pNext;
	public VkBool32 dedicatedAllocation;

	public VkDedicatedAllocationBufferCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDedicatedAllocationMemoryAllocateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DedicatedAllocationMemoryAllocateInfoNV;
	public void* pNext;
	public VkImage image;
	public VkBuffer buffer;

	public VkDedicatedAllocationMemoryAllocateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTransformFeedbackFeaturesEXT;
	public void* pNext;
	public VkBool32 transformFeedback;
	public VkBool32 geometryStreams;

	public VkPhysicalDeviceTransformFeedbackFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTransformFeedbackPropertiesEXT;
	public void* pNext;
	public uint maxTransformFeedbackStreams;
	public uint maxTransformFeedbackBuffers;
	public ulong maxTransformFeedbackBufferSize;
	public uint maxTransformFeedbackStreamDataSize;
	public uint maxTransformFeedbackBufferDataSize;
	public uint maxTransformFeedbackBufferDataStride;
	public VkBool32 transformFeedbackQueries;
	public VkBool32 transformFeedbackStreamsLinesTriangles;
	public VkBool32 transformFeedbackRasterizationStreamSelect;
	public VkBool32 transformFeedbackDraw;

	public VkPhysicalDeviceTransformFeedbackPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRasterizationStateStreamCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRasterizationStateStreamCreateInfoEXT;
	public void* pNext;
	public VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
	public uint rasterizationStream;

	public VkPipelineRasterizationStateStreamCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCuModuleCreateInfoNVX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CuModuleCreateInfoNVX;
	public void* pNext;
	public ulong dataSize;
	public void* pData;

	public VkCuModuleCreateInfoNVX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCuModuleTexturingModeCreateInfoNVX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CuModuleTexturingModeCreateInfoNVX;
	public void* pNext;
	public VkBool32 use64bitTexturing;

	public VkCuModuleTexturingModeCreateInfoNVX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCuFunctionCreateInfoNVX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CuFunctionCreateInfoNVX;
	public void* pNext;
	public VkCuModuleNVX module;
	public byte* pName;

	public VkCuFunctionCreateInfoNVX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCuLaunchInfoNVX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CuLaunchInfoNVX;
	public void* pNext;
	public VkCuFunctionNVX function;
	public uint gridDimX;
	public uint gridDimY;
	public uint gridDimZ;
	public uint blockDimX;
	public uint blockDimY;
	public uint blockDimZ;
	public uint sharedMemBytes;
	public ulong paramCount;
	public void** pParams;
	public ulong extraCount;
	public void** pExtras;

	public VkCuLaunchInfoNVX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageViewHandleInfoNVX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewHandleInfoNVX;
	public void* pNext;
	public VkImageView imageView;
	public VkDescriptorType descriptorType;
	public VkSampler sampler;

	public VkImageViewHandleInfoNVX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageViewAddressPropertiesNVX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewAddressPropertiesNVX;
	public void* pNext;
	public ulong deviceAddress;
	public ulong size;

	public VkImageViewAddressPropertiesNVX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTextureLODGatherFormatPropertiesAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TextureLODGatherFormatPropertiesAMD;
	public void* pNext;
	public VkBool32 supportsTextureGatherLODBiasAMD;

	public VkTextureLODGatherFormatPropertiesAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkShaderResourceUsageAMD
{
	public uint numUsedVgprs;
	public uint numUsedSgprs;
	public uint ldsSizePerLocalWorkGroup;
	public ulong ldsUsageSizeInBytes;
	public ulong scratchMemUsageInBytes;
}

public unsafe partial struct VkShaderStatisticsInfoAMD
{
	public VkShaderStageFlags shaderStageMask;
	public VkShaderResourceUsageAMD resourceUsage;
	public uint numPhysicalVgprs;
	public uint numPhysicalSgprs;
	public uint numAvailableVgprs;
	public uint numAvailableSgprs;
	public fixed uint computeWorkGroupSize[3];
}

public unsafe partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCornerSampledImageFeaturesNV;
	public void* pNext;
	public VkBool32 cornerSampledImage;

	public VkPhysicalDeviceCornerSampledImageFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkExternalImageFormatPropertiesNV
{
	public VkImageFormatProperties imageFormatProperties;
	public VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
	public VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
	public VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
}

public unsafe partial struct VkExternalMemoryImageCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalMemoryImageCreateInfoNV;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlagsNV handleTypes;

	public VkExternalMemoryImageCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMemoryAllocateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMemoryAllocateInfoNV;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlagsNV handleTypes;

	public VkExportMemoryAllocateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkValidationFlagsEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ValidationFlagsEXT;
	public void* pNext;
	public uint disabledValidationCheckCount;
	public VkValidationCheckEXT* pDisabledValidationChecks;

	public VkValidationFlagsEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageViewASTCDecodeModeEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewASTCDecodeModeEXT;
	public void* pNext;
	public VkFormat decodeMode;

	public VkImageViewASTCDecodeModeEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceASTCDecodeFeaturesEXT;
	public void* pNext;
	public VkBool32 decodeModeSharedExponent;

	public VkPhysicalDeviceASTCDecodeFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkConditionalRenderingBeginInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ConditionalRenderingBeginInfoEXT;
	public void* pNext;
	public VkBuffer buffer;
	public ulong offset;
	public VkConditionalRenderingFlagsEXT flags;

	public VkConditionalRenderingBeginInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceConditionalRenderingFeaturesEXT;
	public void* pNext;
	public VkBool32 conditionalRendering;
	public VkBool32 inheritedConditionalRendering;

	public VkPhysicalDeviceConditionalRenderingFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandBufferInheritanceConditionalRenderingInfoEXT;
	public void* pNext;
	public VkBool32 conditionalRenderingEnable;

	public VkCommandBufferInheritanceConditionalRenderingInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkViewportWScalingNV
{
	public float xcoeff;
	public float ycoeff;
}

public unsafe partial struct VkPipelineViewportWScalingStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineViewportWScalingStateCreateInfoNV;
	public void* pNext;
	public VkBool32 viewportWScalingEnable;
	public uint viewportCount;
	public VkViewportWScalingNV* pViewportWScalings;

	public VkPipelineViewportWScalingStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceCapabilities2EXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceCapabilities2EXT;
	public void* pNext;
	public uint minImageCount;
	public uint maxImageCount;
	public VkExtent2D currentExtent;
	public VkExtent2D minImageExtent;
	public VkExtent2D maxImageExtent;
	public uint maxImageArrayLayers;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkSurfaceTransformFlagsKHR currentTransform;
	public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
	public VkImageUsageFlags supportedUsageFlags;
	public VkSurfaceCounterFlagsEXT supportedSurfaceCounters;

	public VkSurfaceCapabilities2EXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayPowerInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayPowerInfoEXT;
	public void* pNext;
	public VkDisplayPowerStateEXT powerState;

	public VkDisplayPowerInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceEventInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceEventInfoEXT;
	public void* pNext;
	public VkDeviceEventTypeEXT deviceEvent;

	public VkDeviceEventInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayEventInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayEventInfoEXT;
	public void* pNext;
	public VkDisplayEventTypeEXT displayEvent;

	public VkDisplayEventInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSwapchainCounterCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainCounterCreateInfoEXT;
	public void* pNext;
	public VkSurfaceCounterFlagsEXT surfaceCounters;

	public VkSwapchainCounterCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkRefreshCycleDurationGOOGLE
{
	public ulong refreshDuration;
}

public partial struct VkPastPresentationTimingGOOGLE
{
	public uint presentID;
	public ulong desiredPresentTime;
	public ulong actualPresentTime;
	public ulong earliestPresentTime;
	public ulong presentMargin;
}

public partial struct VkPresentTimeGOOGLE
{
	public uint presentID;
	public ulong desiredPresentTime;
}

public unsafe partial struct VkPresentTimesInfoGOOGLE : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PresentTimesInfoGOOGLE;
	public void* pNext;
	public uint swapchainCount;
	public VkPresentTimeGOOGLE* pTimes;

	public VkPresentTimesInfoGOOGLE()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
	public void* pNext;
	public VkBool32 perViewPositionAllComponents;

	public VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMultiviewPerViewAttributesInfoNVX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MultiviewPerViewAttributesInfoNVX;
	public void* pNext;
	public VkBool32 perViewAttributes;
	public VkBool32 perViewAttributesPositionXOnly;

	public VkMultiviewPerViewAttributesInfoNVX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkViewportSwizzleNV
{
	public VkViewportCoordinateSwizzleNV x;
	public VkViewportCoordinateSwizzleNV y;
	public VkViewportCoordinateSwizzleNV z;
	public VkViewportCoordinateSwizzleNV w;
}

public unsafe partial struct VkPipelineViewportSwizzleStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineViewportSwizzleStateCreateInfoNV;
	public void* pNext;
	public VkPipelineViewportSwizzleStateCreateFlagsNV flags;
	public uint viewportCount;
	public VkViewportSwizzleNV* pViewportSwizzles;

	public VkPipelineViewportSwizzleStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDiscardRectanglePropertiesEXT;
	public void* pNext;
	public uint maxDiscardRectangles;

	public VkPhysicalDeviceDiscardRectanglePropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineDiscardRectangleStateCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineDiscardRectangleStateCreateInfoEXT;
	public void* pNext;
	public VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
	public VkDiscardRectangleModeEXT discardRectangleMode;
	public uint discardRectangleCount;
	public VkRect2D* pDiscardRectangles;

	public VkPipelineDiscardRectangleStateCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceConservativeRasterizationPropertiesEXT;
	public void* pNext;
	public float primitiveOverestimationSize;
	public float maxExtraPrimitiveOverestimationSize;
	public float extraPrimitiveOverestimationSizeGranularity;
	public VkBool32 primitiveUnderestimation;
	public VkBool32 conservativePointAndLineRasterization;
	public VkBool32 degenerateTrianglesRasterized;
	public VkBool32 degenerateLinesRasterized;
	public VkBool32 fullyCoveredFragmentShaderInputVariable;
	public VkBool32 conservativeRasterizationPostDepthCoverage;

	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRasterizationConservativeStateCreateInfoEXT;
	public void* pNext;
	public VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
	public VkConservativeRasterizationModeEXT conservativeRasterizationMode;
	public float extraPrimitiveOverestimationSize;

	public VkPipelineRasterizationConservativeStateCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDepthClipEnableFeaturesEXT;
	public void* pNext;
	public VkBool32 depthClipEnable;

	public VkPhysicalDeviceDepthClipEnableFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRasterizationDepthClipStateCreateInfoEXT;
	public void* pNext;
	public VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
	public VkBool32 depthClipEnable;

	public VkPipelineRasterizationDepthClipStateCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkXYColorEXT
{
	public float x;
	public float y;
}

public unsafe partial struct VkHdrMetadataEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.HdrMetadataEXT;
	public void* pNext;
	public VkXYColorEXT displayPrimaryRed;
	public VkXYColorEXT displayPrimaryGreen;
	public VkXYColorEXT displayPrimaryBlue;
	public VkXYColorEXT whitePoint;
	public float maxLuminance;
	public float minLuminance;
	public float maxContentLightLevel;
	public float maxFrameAverageLightLevel;

	public VkHdrMetadataEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRelaxedLineRasterizationFeaturesIMG;
	public void* pNext;
	public VkBool32 relaxedLineRasterization;

	public VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugUtilsLabelEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugUtilsLabelEXT;
	public void* pNext;
	public byte* pLabelName;
	public fixed float color[4];

	public VkDebugUtilsLabelEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugUtilsObjectNameInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugUtilsObjectNameInfoEXT;
	public void* pNext;
	public VkObjectType objectType;
	public ulong objectHandle;
	public byte* pObjectName;

	public VkDebugUtilsObjectNameInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugUtilsMessengerCallbackDataEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugUtilsMessengerCallbackDataEXT;
	public void* pNext;
	public VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
	public byte* pMessageIdName;
	public int messageIdNumber;
	public byte* pMessage;
	public uint queueLabelCount;
	public VkDebugUtilsLabelEXT* pQueueLabels;
	public uint cmdBufLabelCount;
	public VkDebugUtilsLabelEXT* pCmdBufLabels;
	public uint objectCount;
	public VkDebugUtilsObjectNameInfoEXT* pObjects;

	public VkDebugUtilsMessengerCallbackDataEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugUtilsMessengerCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugUtilsMessengerCreateInfoEXT;
	public void* pNext;
	public VkDebugUtilsMessengerCreateFlagsEXT flags;
	public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
	public VkDebugUtilsMessageTypeFlagsEXT messageType;
	public delegate* unmanaged<VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void*, uint> pfnUserCallback;
	public void* pUserData;

	public VkDebugUtilsMessengerCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDebugUtilsObjectTagInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DebugUtilsObjectTagInfoEXT;
	public void* pNext;
	public VkObjectType objectType;
	public ulong objectHandle;
	public ulong tagName;
	public ulong tagSize;
	public void* pTag;

	public VkDebugUtilsObjectTagInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAttachmentSampleCountInfoAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AttachmentSampleCountInfoAMD;
	public void* pNext;
	public uint colorAttachmentCount;
	public VkSampleCountFlags* pColorAttachmentSamples;
	public VkSampleCountFlags depthStencilAttachmentSamples;

	public VkAttachmentSampleCountInfoAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkSampleLocationEXT
{
	public float x;
	public float y;
}

public unsafe partial struct VkSampleLocationsInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SampleLocationsInfoEXT;
	public void* pNext;
	public VkSampleCountFlags sampleLocationsPerPixel;
	public VkExtent2D sampleLocationGridSize;
	public uint sampleLocationsCount;
	public VkSampleLocationEXT* pSampleLocations;

	public VkSampleLocationsInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkAttachmentSampleLocationsEXT
{
	public uint attachmentIndex;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;
}

public partial struct VkSubpassSampleLocationsEXT
{
	public uint subpassIndex;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;
}

public unsafe partial struct VkRenderPassSampleLocationsBeginInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassSampleLocationsBeginInfoEXT;
	public void* pNext;
	public uint attachmentInitialSampleLocationsCount;
	public VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
	public uint postSubpassSampleLocationsCount;
	public VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;

	public VkRenderPassSampleLocationsBeginInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineSampleLocationsStateCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineSampleLocationsStateCreateInfoEXT;
	public void* pNext;
	public VkBool32 sampleLocationsEnable;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;

	public VkPipelineSampleLocationsStateCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSampleLocationsPropertiesEXT;
	public void* pNext;
	public VkSampleCountFlags sampleLocationSampleCounts;
	public VkExtent2D maxSampleLocationGridSize;
	public fixed float sampleLocationCoordinateRange[2];
	public uint sampleLocationSubPixelBits;
	public VkBool32 variableSampleLocations;

	public VkPhysicalDeviceSampleLocationsPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMultisamplePropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MultisamplePropertiesEXT;
	public void* pNext;
	public VkExtent2D maxSampleLocationGridSize;

	public VkMultisamplePropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceBlendOperationAdvancedFeaturesEXT;
	public void* pNext;
	public VkBool32 advancedBlendCoherentOperations;

	public VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceBlendOperationAdvancedPropertiesEXT;
	public void* pNext;
	public uint advancedBlendMaxColorAttachments;
	public VkBool32 advancedBlendIndependentBlend;
	public VkBool32 advancedBlendNonPremultipliedSrcColor;
	public VkBool32 advancedBlendNonPremultipliedDstColor;
	public VkBool32 advancedBlendCorrelatedOverlap;
	public VkBool32 advancedBlendAllOperations;

	public VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineColorBlendAdvancedStateCreateInfoEXT;
	public void* pNext;
	public VkBool32 srcPremultiplied;
	public VkBool32 dstPremultiplied;
	public VkBlendOverlapEXT blendOverlap;

	public VkPipelineColorBlendAdvancedStateCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineCoverageToColorStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineCoverageToColorStateCreateInfoNV;
	public void* pNext;
	public VkPipelineCoverageToColorStateCreateFlagsNV flags;
	public VkBool32 coverageToColorEnable;
	public uint coverageToColorLocation;

	public VkPipelineCoverageToColorStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineCoverageModulationStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineCoverageModulationStateCreateInfoNV;
	public void* pNext;
	public VkPipelineCoverageModulationStateCreateFlagsNV flags;
	public VkCoverageModulationModeNV coverageModulationMode;
	public VkBool32 coverageModulationTableEnable;
	public uint coverageModulationTableCount;
	public float* pCoverageModulationTable;

	public VkPipelineCoverageModulationStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderSMBuiltinsPropertiesNV;
	public void* pNext;
	public uint shaderSMCount;
	public uint shaderWarpsPerSM;

	public VkPhysicalDeviceShaderSMBuiltinsPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderSMBuiltinsFeaturesNV;
	public void* pNext;
	public VkBool32 shaderSMBuiltins;

	public VkPhysicalDeviceShaderSMBuiltinsFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDrmFormatModifierPropertiesEXT
{
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public VkFormatFeatureFlags drmFormatModifierTilingFeatures;
}

public unsafe partial struct VkDrmFormatModifierPropertiesListEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DrmFormatModifierPropertiesListEXT;
	public void* pNext;
	public uint drmFormatModifierCount;
	public VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;

	public VkDrmFormatModifierPropertiesListEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageDrmFormatModifierInfoEXT;
	public void* pNext;
	public ulong drmFormatModifier;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public uint* pQueueFamilyIndices;

	public VkPhysicalDeviceImageDrmFormatModifierInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageDrmFormatModifierListCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageDrmFormatModifierListCreateInfoEXT;
	public void* pNext;
	public uint drmFormatModifierCount;
	public ulong* pDrmFormatModifiers;

	public VkImageDrmFormatModifierListCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageDrmFormatModifierExplicitCreateInfoEXT;
	public void* pNext;
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public VkSubresourceLayout* pPlaneLayouts;

	public VkImageDrmFormatModifierExplicitCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageDrmFormatModifierPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageDrmFormatModifierPropertiesEXT;
	public void* pNext;
	public ulong drmFormatModifier;

	public VkImageDrmFormatModifierPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDrmFormatModifierProperties2EXT
{
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
}

public unsafe partial struct VkDrmFormatModifierPropertiesList2EXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DrmFormatModifierPropertiesList2EXT;
	public void* pNext;
	public uint drmFormatModifierCount;
	public VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;

	public VkDrmFormatModifierPropertiesList2EXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkValidationCacheCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ValidationCacheCreateInfoEXT;
	public void* pNext;
	public VkValidationCacheCreateFlagsEXT flags;
	public ulong initialDataSize;
	public void* pInitialData;

	public VkValidationCacheCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkShaderModuleValidationCacheCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ShaderModuleValidationCacheCreateInfoEXT;
	public void* pNext;
	public VkValidationCacheEXT validationCache;

	public VkShaderModuleValidationCacheCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkShadingRatePaletteNV
{
	public uint shadingRatePaletteEntryCount;
	public VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
}

public unsafe partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineViewportShadingRateImageStateCreateInfoNV;
	public void* pNext;
	public VkBool32 shadingRateImageEnable;
	public uint viewportCount;
	public VkShadingRatePaletteNV* pShadingRatePalettes;

	public VkPipelineViewportShadingRateImageStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShadingRateImageFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShadingRateImageFeaturesNV;
	public void* pNext;
	public VkBool32 shadingRateImage;
	public VkBool32 shadingRateCoarseSampleOrder;

	public VkPhysicalDeviceShadingRateImageFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShadingRateImagePropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShadingRateImagePropertiesNV;
	public void* pNext;
	public VkExtent2D shadingRateTexelSize;
	public uint shadingRatePaletteSize;
	public uint shadingRateMaxCoarseSamples;

	public VkPhysicalDeviceShadingRateImagePropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkCoarseSampleLocationNV
{
	public uint pixelX;
	public uint pixelY;
	public uint sample;
}

public unsafe partial struct VkCoarseSampleOrderCustomNV
{
	public VkShadingRatePaletteEntryNV shadingRate;
	public uint sampleCount;
	public uint sampleLocationCount;
	public VkCoarseSampleLocationNV* pSampleLocations;
}

public unsafe partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineViewportCoarseSampleOrderStateCreateInfoNV;
	public void* pNext;
	public VkCoarseSampleOrderTypeNV sampleOrderType;
	public uint customSampleOrderCount;
	public VkCoarseSampleOrderCustomNV* pCustomSampleOrders;

	public VkPipelineViewportCoarseSampleOrderStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRayTracingShaderGroupCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RayTracingShaderGroupCreateInfoNV;
	public void* pNext;
	public VkRayTracingShaderGroupTypeKHR type;
	public uint generalShader;
	public uint closestHitShader;
	public uint anyHitShader;
	public uint intersectionShader;

	public VkRayTracingShaderGroupCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRayTracingPipelineCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RayTracingPipelineCreateInfoNV;
	public void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public VkPipelineShaderStageCreateInfo* pStages;
	public uint groupCount;
	public VkRayTracingShaderGroupCreateInfoNV* pGroups;
	public uint maxRecursionDepth;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public VkRayTracingPipelineCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGeometryTrianglesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeometryTrianglesNV;
	public void* pNext;
	public VkBuffer vertexData;
	public ulong vertexOffset;
	public uint vertexCount;
	public ulong vertexStride;
	public VkFormat vertexFormat;
	public VkBuffer indexData;
	public ulong indexOffset;
	public uint indexCount;
	public VkIndexType indexType;
	public VkBuffer transformData;
	public ulong transformOffset;

	public VkGeometryTrianglesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGeometryAABBNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeometryAABBNV;
	public void* pNext;
	public VkBuffer aabbData;
	public uint numAABBs;
	public uint stride;
	public ulong offset;

	public VkGeometryAABBNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkGeometryDataNV
{
	public VkGeometryTrianglesNV triangles;
	public VkGeometryAABBNV aabbs;
}

public unsafe partial struct VkGeometryNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeometryNV;
	public void* pNext;
	public VkGeometryTypeKHR geometryType;
	public VkGeometryDataNV geometry;
	public VkGeometryFlagsKHR flags;

	public VkGeometryNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureInfoNV;
	public void* pNext;
	public VkAccelerationStructureTypeKHR type;
	public VkBuildAccelerationStructureFlagsNV flags;
	public uint instanceCount;
	public uint geometryCount;
	public VkGeometryNV* pGeometries;

	public VkAccelerationStructureInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureCreateInfoNV;
	public void* pNext;
	public ulong compactedSize;
	public VkAccelerationStructureInfoNV info;

	public VkAccelerationStructureCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindAccelerationStructureMemoryInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindAccelerationStructureMemoryInfoNV;
	public void* pNext;
	public VkAccelerationStructureKHR accelerationStructure;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public uint deviceIndexCount;
	public uint* pDeviceIndices;

	public VkBindAccelerationStructureMemoryInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWriteDescriptorSetAccelerationStructureNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WriteDescriptorSetAccelerationStructureNV;
	public void* pNext;
	public uint accelerationStructureCount;
	public VkAccelerationStructureKHR* pAccelerationStructures;

	public VkWriteDescriptorSetAccelerationStructureNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureMemoryRequirementsInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureMemoryRequirementsInfoNV;
	public void* pNext;
	public VkAccelerationStructureMemoryRequirementsTypeKHR type;
	public VkAccelerationStructureKHR accelerationStructure;

	public VkAccelerationStructureMemoryRequirementsInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRayTracingPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingPropertiesNV;
	public void* pNext;
	public uint shaderGroupHandleSize;
	public uint maxRecursionDepth;
	public uint maxShaderGroupStride;
	public uint shaderGroupBaseAlignment;
	public ulong maxGeometryCount;
	public ulong maxInstanceCount;
	public ulong maxTriangleCount;
	public uint maxDescriptorSetAccelerationStructures;

	public VkPhysicalDeviceRayTracingPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkAabbPositionsKHR
{
	public float minX;
	public float minY;
	public float minZ;
	public float maxX;
	public float maxY;
	public float maxZ;
}

public unsafe partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRepresentativeFragmentTestFeaturesNV;
	public void* pNext;
	public VkBool32 representativeFragmentTest;

	public VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRepresentativeFragmentTestStateCreateInfoNV;
	public void* pNext;
	public VkBool32 representativeFragmentTestEnable;

	public VkPipelineRepresentativeFragmentTestStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageViewImageFormatInfoEXT;
	public void* pNext;
	public VkImageViewType imageViewType;

	public VkPhysicalDeviceImageViewImageFormatInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFilterCubicImageViewImageFormatPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FilterCubicImageViewImageFormatPropertiesEXT;
	public void* pNext;
	public VkBool32 filterCubic;
	public VkBool32 filterCubicMinmax;

	public VkFilterCubicImageViewImageFormatPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMemoryHostPointerInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMemoryHostPointerInfoEXT;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public void* pHostPointer;

	public VkImportMemoryHostPointerInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryHostPointerPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryHostPointerPropertiesEXT;
	public void* pNext;
	public uint memoryTypeBits;

	public VkMemoryHostPointerPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalMemoryHostPropertiesEXT;
	public void* pNext;
	public ulong minImportedHostPointerAlignment;

	public VkPhysicalDeviceExternalMemoryHostPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineCompilerControlCreateInfoAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineCompilerControlCreateInfoAMD;
	public void* pNext;
	public VkPipelineCompilerControlFlagsAMD compilerControlFlags;

	public VkPipelineCompilerControlCreateInfoAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderCorePropertiesAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderCorePropertiesAMD;
	public void* pNext;
	public uint shaderEngineCount;
	public uint shaderArraysPerEngineCount;
	public uint computeUnitsPerShaderArray;
	public uint simdPerComputeUnit;
	public uint wavefrontsPerSimd;
	public uint wavefrontSize;
	public uint sgprsPerSimd;
	public uint minSgprAllocation;
	public uint maxSgprAllocation;
	public uint sgprAllocationGranularity;
	public uint vgprsPerSimd;
	public uint minVgprAllocation;
	public uint maxVgprAllocation;
	public uint vgprAllocationGranularity;

	public VkPhysicalDeviceShaderCorePropertiesAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceMemoryOverallocationCreateInfoAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceMemoryOverallocationCreateInfoAMD;
	public void* pNext;
	public VkMemoryOverallocationBehaviorAMD overallocationBehavior;

	public VkDeviceMemoryOverallocationCreateInfoAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorPropertiesEXT;
	public void* pNext;
	public uint maxVertexAttribDivisor;

	public VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMeshShaderFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMeshShaderFeaturesNV;
	public void* pNext;
	public VkBool32 taskShader;
	public VkBool32 meshShader;

	public VkPhysicalDeviceMeshShaderFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMeshShaderPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMeshShaderPropertiesNV;
	public void* pNext;
	public uint maxDrawMeshTasksCount;
	public uint maxTaskWorkGroupInvocations;
	public fixed uint maxTaskWorkGroupSize[3];
	public uint maxTaskTotalMemorySize;
	public uint maxTaskOutputCount;
	public uint maxMeshWorkGroupInvocations;
	public fixed uint maxMeshWorkGroupSize[3];
	public uint maxMeshTotalMemorySize;
	public uint maxMeshOutputVertices;
	public uint maxMeshOutputPrimitives;
	public uint maxMeshMultiviewViewCount;
	public uint meshOutputPerVertexGranularity;
	public uint meshOutputPerPrimitiveGranularity;

	public VkPhysicalDeviceMeshShaderPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDrawMeshTasksIndirectCommandNV
{
	public uint taskCount;
	public uint firstTask;
}

public unsafe partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderImageFootprintFeaturesNV;
	public void* pNext;
	public VkBool32 imageFootprint;

	public VkPhysicalDeviceShaderImageFootprintFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineViewportExclusiveScissorStateCreateInfoNV;
	public void* pNext;
	public uint exclusiveScissorCount;
	public VkRect2D* pExclusiveScissors;

	public VkPipelineViewportExclusiveScissorStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExclusiveScissorFeaturesNV;
	public void* pNext;
	public VkBool32 exclusiveScissor;

	public VkPhysicalDeviceExclusiveScissorFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueueFamilyCheckpointPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyCheckpointPropertiesNV;
	public void* pNext;
	public VkPipelineStageFlags checkpointExecutionStageMask;

	public VkQueueFamilyCheckpointPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCheckpointDataNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CheckpointDataNV;
	public void* pNext;
	public VkPipelineStageFlags stage;
	public void* pCheckpointMarker;

	public VkCheckpointDataNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueueFamilyCheckpointProperties2NV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyCheckpointProperties2NV;
	public void* pNext;
	public VkPipelineStageFlags2 checkpointExecutionStageMask;

	public VkQueueFamilyCheckpointProperties2NV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCheckpointData2NV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CheckpointData2NV;
	public void* pNext;
	public VkPipelineStageFlags2 stage;
	public void* pCheckpointMarker;

	public VkCheckpointData2NV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
	public void* pNext;
	public VkBool32 shaderIntegerFunctions2;

	public VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct VkPerformanceValueDataINTEL
{
	[FieldOffset(0)]
	public uint value32;
	[FieldOffset(0)]
	public ulong value64;
	[FieldOffset(0)]
	public float valueFloat;
	[FieldOffset(0)]
	public VkBool32 valueBool;
	[FieldOffset(0)]
	public byte* valueString;
}

public partial struct VkPerformanceValueINTEL
{
	public VkPerformanceValueTypeINTEL type;
	public VkPerformanceValueDataINTEL data;
}

public unsafe partial struct VkInitializePerformanceApiInfoINTEL : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.InitializePerformanceApiInfoINTEL;
	public void* pNext;
	public void* pUserData;

	public VkInitializePerformanceApiInfoINTEL()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueryPoolPerformanceQueryCreateInfoINTEL : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueryPoolPerformanceQueryCreateInfoINTEL;
	public void* pNext;
	public VkQueryPoolSamplingModeINTEL performanceCountersSampling;

	public VkQueryPoolPerformanceQueryCreateInfoINTEL()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerformanceMarkerInfoINTEL : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerformanceMarkerInfoINTEL;
	public void* pNext;
	public ulong marker;

	public VkPerformanceMarkerInfoINTEL()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerformanceStreamMarkerInfoINTEL : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerformanceStreamMarkerInfoINTEL;
	public void* pNext;
	public uint marker;

	public VkPerformanceStreamMarkerInfoINTEL()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerformanceOverrideInfoINTEL : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerformanceOverrideInfoINTEL;
	public void* pNext;
	public VkPerformanceOverrideTypeINTEL type;
	public VkBool32 enable;
	public ulong parameter;

	public VkPerformanceOverrideInfoINTEL()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerformanceConfigurationAcquireInfoINTEL : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerformanceConfigurationAcquireInfoINTEL;
	public void* pNext;
	public VkPerformanceConfigurationTypeINTEL type;

	public VkPerformanceConfigurationAcquireInfoINTEL()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePCIBusInfoPropertiesEXT;
	public void* pNext;
	public uint pciDomain;
	public uint pciBus;
	public uint pciDevice;
	public uint pciFunction;

	public VkPhysicalDevicePCIBusInfoPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayNativeHdrSurfaceCapabilitiesAMD;
	public void* pNext;
	public VkBool32 localDimmingSupport;

	public VkDisplayNativeHdrSurfaceCapabilitiesAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainDisplayNativeHdrCreateInfoAMD;
	public void* pNext;
	public VkBool32 localDimmingEnable;

	public VkSwapchainDisplayNativeHdrCreateInfoAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentDensityMapFeaturesEXT;
	public void* pNext;
	public VkBool32 fragmentDensityMap;
	public VkBool32 fragmentDensityMapDynamic;
	public VkBool32 fragmentDensityMapNonSubsampledImages;

	public VkPhysicalDeviceFragmentDensityMapFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentDensityMapPropertiesEXT;
	public void* pNext;
	public VkExtent2D minFragmentDensityTexelSize;
	public VkExtent2D maxFragmentDensityTexelSize;
	public VkBool32 fragmentDensityInvocations;

	public VkPhysicalDeviceFragmentDensityMapPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassFragmentDensityMapCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassFragmentDensityMapCreateInfoEXT;
	public void* pNext;
	public VkAttachmentReference fragmentDensityMapAttachment;

	public VkRenderPassFragmentDensityMapCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderingFragmentDensityMapAttachmentInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderingFragmentDensityMapAttachmentInfoEXT;
	public void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;

	public VkRenderingFragmentDensityMapAttachmentInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderCoreProperties2AMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderCoreProperties2AMD;
	public void* pNext;
	public VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
	public uint activeComputeUnitCount;

	public VkPhysicalDeviceShaderCoreProperties2AMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCoherentMemoryFeaturesAMD;
	public void* pNext;
	public VkBool32 deviceCoherentMemory;

	public VkPhysicalDeviceCoherentMemoryFeaturesAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
	public void* pNext;
	public VkBool32 shaderImageInt64Atomics;
	public VkBool32 sparseImageInt64Atomics;

	public VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMemoryBudgetPropertiesEXT;
	public void* pNext;
	public fixed ulong heapBudget[16];
	public fixed ulong heapUsage[16];

	public VkPhysicalDeviceMemoryBudgetPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMemoryPriorityFeaturesEXT;
	public void* pNext;
	public VkBool32 memoryPriority;

	public VkPhysicalDeviceMemoryPriorityFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryPriorityAllocateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryPriorityAllocateInfoEXT;
	public void* pNext;
	public float priority;

	public VkMemoryPriorityAllocateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
	public void* pNext;
	public VkBool32 dedicatedAllocationImageAliasing;

	public VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceBufferDeviceAddressFeaturesEXT;
	public void* pNext;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;

	public VkPhysicalDeviceBufferDeviceAddressFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferDeviceAddressCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferDeviceAddressCreateInfoEXT;
	public void* pNext;
	public ulong deviceAddress;

	public VkBufferDeviceAddressCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkValidationFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ValidationFeaturesEXT;
	public void* pNext;
	public uint enabledValidationFeatureCount;
	public VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
	public uint disabledValidationFeatureCount;
	public VkValidationFeatureDisableEXT* pDisabledValidationFeatures;

	public VkValidationFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCooperativeMatrixPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CooperativeMatrixPropertiesNV;
	public void* pNext;
	public uint MSize;
	public uint NSize;
	public uint KSize;
	public VkComponentTypeKHR AType;
	public VkComponentTypeKHR BType;
	public VkComponentTypeKHR CType;
	public VkComponentTypeKHR DType;
	public VkScopeKHR scope;

	public VkCooperativeMatrixPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCooperativeMatrixFeaturesNV;
	public void* pNext;
	public VkBool32 cooperativeMatrix;
	public VkBool32 cooperativeMatrixRobustBufferAccess;

	public VkPhysicalDeviceCooperativeMatrixFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCooperativeMatrixPropertiesNV;
	public void* pNext;
	public VkShaderStageFlags cooperativeMatrixSupportedStages;

	public VkPhysicalDeviceCooperativeMatrixPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCoverageReductionModeFeaturesNV;
	public void* pNext;
	public VkBool32 coverageReductionMode;

	public VkPhysicalDeviceCoverageReductionModeFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineCoverageReductionStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineCoverageReductionStateCreateInfoNV;
	public void* pNext;
	public VkPipelineCoverageReductionStateCreateFlagsNV flags;
	public VkCoverageReductionModeNV coverageReductionMode;

	public VkPipelineCoverageReductionStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFramebufferMixedSamplesCombinationNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FramebufferMixedSamplesCombinationNV;
	public void* pNext;
	public VkCoverageReductionModeNV coverageReductionMode;
	public VkSampleCountFlags rasterizationSamples;
	public VkSampleCountFlags depthStencilSamples;
	public VkSampleCountFlags colorSamples;

	public VkFramebufferMixedSamplesCombinationNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentShaderInterlockFeaturesEXT;
	public void* pNext;
	public VkBool32 fragmentShaderSampleInterlock;
	public VkBool32 fragmentShaderPixelInterlock;
	public VkBool32 fragmentShaderShadingRateInterlock;

	public VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceYcbcrImageArraysFeaturesEXT;
	public void* pNext;
	public VkBool32 ycbcrImageArrays;

	public VkPhysicalDeviceYcbcrImageArraysFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceProvokingVertexFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceProvokingVertexFeaturesEXT;
	public void* pNext;
	public VkBool32 provokingVertexLast;
	public VkBool32 transformFeedbackPreservesProvokingVertex;

	public VkPhysicalDeviceProvokingVertexFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceProvokingVertexPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceProvokingVertexPropertiesEXT;
	public void* pNext;
	public VkBool32 provokingVertexModePerPipeline;
	public VkBool32 transformFeedbackPreservesTriangleFanProvokingVertex;

	public VkPhysicalDeviceProvokingVertexPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineRasterizationProvokingVertexStateCreateInfoEXT;
	public void* pNext;
	public VkProvokingVertexModeEXT provokingVertexMode;

	public VkPipelineRasterizationProvokingVertexStateCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkHeadlessSurfaceCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.HeadlessSurfaceCreateInfoEXT;
	public void* pNext;
	public VkHeadlessSurfaceCreateFlagsEXT flags;

	public VkHeadlessSurfaceCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderAtomicFloatFeaturesEXT;
	public void* pNext;
	public VkBool32 shaderBufferFloat32Atomics;
	public VkBool32 shaderBufferFloat32AtomicAdd;
	public VkBool32 shaderBufferFloat64Atomics;
	public VkBool32 shaderBufferFloat64AtomicAdd;
	public VkBool32 shaderSharedFloat32Atomics;
	public VkBool32 shaderSharedFloat32AtomicAdd;
	public VkBool32 shaderSharedFloat64Atomics;
	public VkBool32 shaderSharedFloat64AtomicAdd;
	public VkBool32 shaderImageFloat32Atomics;
	public VkBool32 shaderImageFloat32AtomicAdd;
	public VkBool32 sparseImageFloat32Atomics;
	public VkBool32 sparseImageFloat32AtomicAdd;

	public VkPhysicalDeviceShaderAtomicFloatFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExtendedDynamicStateFeaturesEXT;
	public void* pNext;
	public VkBool32 extendedDynamicState;

	public VkPhysicalDeviceExtendedDynamicStateFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMapMemoryPlacedFeaturesEXT;
	public void* pNext;
	public VkBool32 memoryMapPlaced;
	public VkBool32 memoryMapRangePlaced;
	public VkBool32 memoryUnmapReserve;

	public VkPhysicalDeviceMapMemoryPlacedFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMapMemoryPlacedPropertiesEXT;
	public void* pNext;
	public ulong minPlacedMemoryMapAlignment;

	public VkPhysicalDeviceMapMemoryPlacedPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryMapPlacedInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryMapPlacedInfoEXT;
	public void* pNext;
	public void* pPlacedAddress;

	public VkMemoryMapPlacedInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderAtomicFloat2FeaturesEXT;
	public void* pNext;
	public VkBool32 shaderBufferFloat16Atomics;
	public VkBool32 shaderBufferFloat16AtomicAdd;
	public VkBool32 shaderBufferFloat16AtomicMinMax;
	public VkBool32 shaderBufferFloat32AtomicMinMax;
	public VkBool32 shaderBufferFloat64AtomicMinMax;
	public VkBool32 shaderSharedFloat16Atomics;
	public VkBool32 shaderSharedFloat16AtomicAdd;
	public VkBool32 shaderSharedFloat16AtomicMinMax;
	public VkBool32 shaderSharedFloat32AtomicMinMax;
	public VkBool32 shaderSharedFloat64AtomicMinMax;
	public VkBool32 shaderImageFloat32AtomicMinMax;
	public VkBool32 sparseImageFloat32AtomicMinMax;

	public VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
	public void* pNext;
	public uint maxGraphicsShaderGroupCount;
	public uint maxIndirectSequenceCount;
	public uint maxIndirectCommandsTokenCount;
	public uint maxIndirectCommandsStreamCount;
	public uint maxIndirectCommandsTokenOffset;
	public uint maxIndirectCommandsStreamStride;
	public uint minSequencesCountBufferOffsetAlignment;
	public uint minSequencesIndexBufferOffsetAlignment;
	public uint minIndirectCommandsBufferOffsetAlignment;

	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
	public void* pNext;
	public VkBool32 deviceGeneratedCommands;

	public VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGraphicsShaderGroupCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GraphicsShaderGroupCreateInfoNV;
	public void* pNext;
	public uint stageCount;
	public VkPipelineShaderStageCreateInfo* pStages;
	public VkPipelineVertexInputStateCreateInfo* pVertexInputState;
	public VkPipelineTessellationStateCreateInfo* pTessellationState;

	public VkGraphicsShaderGroupCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGraphicsPipelineShaderGroupsCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GraphicsPipelineShaderGroupsCreateInfoNV;
	public void* pNext;
	public uint groupCount;
	public VkGraphicsShaderGroupCreateInfoNV* pGroups;
	public uint pipelineCount;
	public VkPipeline* pPipelines;

	public VkGraphicsPipelineShaderGroupsCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkBindShaderGroupIndirectCommandNV
{
	public uint groupIndex;
}

public partial struct VkBindIndexBufferIndirectCommandNV
{
	public ulong bufferAddress;
	public uint size;
	public VkIndexType indexType;
}

public partial struct VkBindVertexBufferIndirectCommandNV
{
	public ulong bufferAddress;
	public uint size;
	public uint stride;
}

public partial struct VkSetStateFlagsIndirectCommandNV
{
	public uint data;
}

public partial struct VkIndirectCommandsStreamNV
{
	public VkBuffer buffer;
	public ulong offset;
}

public unsafe partial struct VkIndirectCommandsLayoutTokenNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.IndirectCommandsLayoutTokenNV;
	public void* pNext;
	public VkIndirectCommandsTokenTypeNV tokenType;
	public uint stream;
	public uint offset;
	public uint vertexBindingUnit;
	public VkBool32 vertexDynamicStride;
	public VkPipelineLayout pushconstantPipelineLayout;
	public VkShaderStageFlags pushconstantShaderStageFlags;
	public uint pushconstantOffset;
	public uint pushconstantSize;
	public VkIndirectStateFlagsNV indirectStateFlags;
	public uint indexTypeCount;
	public VkIndexType* pIndexTypes;
	public uint* pIndexTypeValues;

	public VkIndirectCommandsLayoutTokenNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkIndirectCommandsLayoutCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.IndirectCommandsLayoutCreateInfoNV;
	public void* pNext;
	public VkIndirectCommandsLayoutUsageFlagsNV flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint tokenCount;
	public VkIndirectCommandsLayoutTokenNV* pTokens;
	public uint streamCount;
	public uint* pStreamStrides;

	public VkIndirectCommandsLayoutCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGeneratedCommandsInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeneratedCommandsInfoNV;
	public void* pNext;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipeline pipeline;
	public VkIndirectCommandsLayoutNV indirectCommandsLayout;
	public uint streamCount;
	public VkIndirectCommandsStreamNV* pStreams;
	public uint sequencesCount;
	public VkBuffer preprocessBuffer;
	public ulong preprocessOffset;
	public ulong preprocessSize;
	public VkBuffer sequencesCountBuffer;
	public ulong sequencesCountOffset;
	public VkBuffer sequencesIndexBuffer;
	public ulong sequencesIndexOffset;

	public VkGeneratedCommandsInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGeneratedCommandsMemoryRequirementsInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeneratedCommandsMemoryRequirementsInfoNV;
	public void* pNext;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipeline pipeline;
	public VkIndirectCommandsLayoutNV indirectCommandsLayout;
	public uint maxSequencesCount;

	public VkGeneratedCommandsMemoryRequirementsInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceInheritedViewportScissorFeaturesNV;
	public void* pNext;
	public VkBool32 inheritedViewportScissor2D;

	public VkPhysicalDeviceInheritedViewportScissorFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandBufferInheritanceViewportScissorInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandBufferInheritanceViewportScissorInfoNV;
	public void* pNext;
	public VkBool32 viewportScissor2D;
	public uint viewportDepthCount;
	public VkViewport* pViewportDepths;

	public VkCommandBufferInheritanceViewportScissorInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTexelBufferAlignmentFeaturesEXT;
	public void* pNext;
	public VkBool32 texelBufferAlignment;

	public VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassTransformBeginInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassTransformBeginInfoQCOM;
	public void* pNext;
	public VkSurfaceTransformFlagsKHR transform;

	public VkRenderPassTransformBeginInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CommandBufferInheritanceRenderPassTransformInfoQCOM;
	public void* pNext;
	public VkSurfaceTransformFlagsKHR transform;
	public VkRect2D renderArea;

	public VkCommandBufferInheritanceRenderPassTransformInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDepthBiasControlFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDepthBiasControlFeaturesEXT;
	public void* pNext;
	public VkBool32 depthBiasControl;
	public VkBool32 leastRepresentableValueForceUnormRepresentation;
	public VkBool32 floatRepresentation;
	public VkBool32 depthBiasExact;

	public VkPhysicalDeviceDepthBiasControlFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDepthBiasInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DepthBiasInfoEXT;
	public void* pNext;
	public float depthBiasConstantFactor;
	public float depthBiasClamp;
	public float depthBiasSlopeFactor;

	public VkDepthBiasInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDepthBiasRepresentationInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DepthBiasRepresentationInfoEXT;
	public void* pNext;
	public VkDepthBiasRepresentationEXT depthBiasRepresentation;
	public VkBool32 depthBiasExact;

	public VkDepthBiasRepresentationInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDeviceMemoryReportFeaturesEXT;
	public void* pNext;
	public VkBool32 deviceMemoryReport;

	public VkPhysicalDeviceDeviceMemoryReportFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceMemoryReportCallbackDataEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceMemoryReportCallbackDataEXT;
	public void* pNext;
	public VkDeviceMemoryReportFlagsEXT flags;
	public VkDeviceMemoryReportEventTypeEXT type;
	public ulong memoryObjectId;
	public ulong size;
	public VkObjectType objectType;
	public ulong objectHandle;
	public uint heapIndex;

	public VkDeviceMemoryReportCallbackDataEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceDeviceMemoryReportCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceDeviceMemoryReportCreateInfoEXT;
	public void* pNext;
	public VkDeviceMemoryReportFlagsEXT flags;
	public delegate* unmanaged<VkDeviceMemoryReportCallbackDataEXT*, void*, void> pfnUserCallback;
	public void* pUserData;

	public VkDeviceDeviceMemoryReportCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerCustomBorderColorCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerCustomBorderColorCreateInfoEXT;
	public void* pNext;
	public VkClearColorValue customBorderColor;
	public VkFormat format;

	public VkSamplerCustomBorderColorCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCustomBorderColorPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCustomBorderColorPropertiesEXT;
	public void* pNext;
	public uint maxCustomBorderColorSamplers;

	public VkPhysicalDeviceCustomBorderColorPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCustomBorderColorFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCustomBorderColorFeaturesEXT;
	public void* pNext;
	public VkBool32 customBorderColors;
	public VkBool32 customBorderColorWithoutFormat;

	public VkPhysicalDeviceCustomBorderColorFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePresentBarrierFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePresentBarrierFeaturesNV;
	public void* pNext;
	public VkBool32 presentBarrier;

	public VkPhysicalDevicePresentBarrierFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceCapabilitiesPresentBarrierNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceCapabilitiesPresentBarrierNV;
	public void* pNext;
	public VkBool32 presentBarrierSupported;

	public VkSurfaceCapabilitiesPresentBarrierNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSwapchainPresentBarrierCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainPresentBarrierCreateInfoNV;
	public void* pNext;
	public VkBool32 presentBarrierEnable;

	public VkSwapchainPresentBarrierCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDiagnosticsConfigFeaturesNV;
	public void* pNext;
	public VkBool32 diagnosticsConfig;

	public VkPhysicalDeviceDiagnosticsConfigFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceDiagnosticsConfigCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceDiagnosticsConfigCreateInfoNV;
	public void* pNext;
	public VkDeviceDiagnosticsConfigFlagsNV flags;

	public VkDeviceDiagnosticsConfigCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTileShadingFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTileShadingFeaturesQCOM;
	public void* pNext;
	public VkBool32 tileShading;
	public VkBool32 tileShadingFragmentStage;
	public VkBool32 tileShadingColorAttachments;
	public VkBool32 tileShadingDepthAttachments;
	public VkBool32 tileShadingStencilAttachments;
	public VkBool32 tileShadingInputAttachments;
	public VkBool32 tileShadingSampledAttachments;
	public VkBool32 tileShadingPerTileDraw;
	public VkBool32 tileShadingPerTileDispatch;
	public VkBool32 tileShadingDispatchTile;
	public VkBool32 tileShadingApron;
	public VkBool32 tileShadingAnisotropicApron;
	public VkBool32 tileShadingAtomicOps;
	public VkBool32 tileShadingImageProcessing;

	public VkPhysicalDeviceTileShadingFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTileShadingPropertiesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTileShadingPropertiesQCOM;
	public void* pNext;
	public uint maxApronSize;
	public VkBool32 preferNonCoherent;
	public VkExtent2D tileGranularity;
	public VkExtent2D maxTileShadingRate;

	public VkPhysicalDeviceTileShadingPropertiesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassTileShadingCreateInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassTileShadingCreateInfoQCOM;
	public void* pNext;
	public VkTileShadingRenderPassFlagsQCOM flags;
	public VkExtent2D tileApronSize;

	public VkRenderPassTileShadingCreateInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerTileBeginInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerTileBeginInfoQCOM;
	public void* pNext;

	public VkPerTileBeginInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPerTileEndInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PerTileEndInfoQCOM;
	public void* pNext;

	public VkPerTileEndInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDispatchTileInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DispatchTileInfoQCOM;
	public void* pNext;

	public VkDispatchTileInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueryLowLatencySupportNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueryLowLatencySupportNV;
	public void* pNext;
	public void* pQueriedLowLatencyData;

	public VkQueryLowLatencySupportNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorBufferPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorBufferPropertiesEXT;
	public void* pNext;
	public VkBool32 combinedImageSamplerDescriptorSingleArray;
	public VkBool32 bufferlessPushDescriptors;
	public VkBool32 allowSamplerImageViewPostSubmitCreation;
	public ulong descriptorBufferOffsetAlignment;
	public uint maxDescriptorBufferBindings;
	public uint maxResourceDescriptorBufferBindings;
	public uint maxSamplerDescriptorBufferBindings;
	public uint maxEmbeddedImmutableSamplerBindings;
	public uint maxEmbeddedImmutableSamplers;
	public ulong bufferCaptureReplayDescriptorDataSize;
	public ulong imageCaptureReplayDescriptorDataSize;
	public ulong imageViewCaptureReplayDescriptorDataSize;
	public ulong samplerCaptureReplayDescriptorDataSize;
	public ulong accelerationStructureCaptureReplayDescriptorDataSize;
	public ulong samplerDescriptorSize;
	public ulong combinedImageSamplerDescriptorSize;
	public ulong sampledImageDescriptorSize;
	public ulong storageImageDescriptorSize;
	public ulong uniformTexelBufferDescriptorSize;
	public ulong robustUniformTexelBufferDescriptorSize;
	public ulong storageTexelBufferDescriptorSize;
	public ulong robustStorageTexelBufferDescriptorSize;
	public ulong uniformBufferDescriptorSize;
	public ulong robustUniformBufferDescriptorSize;
	public ulong storageBufferDescriptorSize;
	public ulong robustStorageBufferDescriptorSize;
	public ulong inputAttachmentDescriptorSize;
	public ulong accelerationStructureDescriptorSize;
	public ulong maxSamplerDescriptorBufferRange;
	public ulong maxResourceDescriptorBufferRange;
	public ulong samplerDescriptorBufferAddressSpaceSize;
	public ulong resourceDescriptorBufferAddressSpaceSize;
	public ulong descriptorBufferAddressSpaceSize;

	public VkPhysicalDeviceDescriptorBufferPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;
	public void* pNext;
	public ulong combinedImageSamplerDensityMapDescriptorSize;

	public VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorBufferFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorBufferFeaturesEXT;
	public void* pNext;
	public VkBool32 descriptorBuffer;
	public VkBool32 descriptorBufferCaptureReplay;
	public VkBool32 descriptorBufferImageLayoutIgnored;
	public VkBool32 descriptorBufferPushDescriptors;

	public VkPhysicalDeviceDescriptorBufferFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorAddressInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorAddressInfoEXT;
	public void* pNext;
	public ulong address;
	public ulong range;
	public VkFormat format;

	public VkDescriptorAddressInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorBufferBindingInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorBufferBindingInfoEXT;
	public void* pNext;
	public ulong address;
	public VkBufferUsageFlags usage;

	public VkDescriptorBufferBindingInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorBufferBindingPushDescriptorBufferHandleEXT;
	public void* pNext;
	public VkBuffer buffer;

	public VkDescriptorBufferBindingPushDescriptorBufferHandleEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct VkDescriptorDataEXT
{
	[FieldOffset(0)]
	public VkSampler* pSampler;
	[FieldOffset(0)]
	public VkDescriptorImageInfo* pCombinedImageSampler;
	[FieldOffset(0)]
	public VkDescriptorImageInfo* pInputAttachmentImage;
	[FieldOffset(0)]
	public VkDescriptorImageInfo* pSampledImage;
	[FieldOffset(0)]
	public VkDescriptorImageInfo* pStorageImage;
	[FieldOffset(0)]
	public VkDescriptorAddressInfoEXT* pUniformTexelBuffer;
	[FieldOffset(0)]
	public VkDescriptorAddressInfoEXT* pStorageTexelBuffer;
	[FieldOffset(0)]
	public VkDescriptorAddressInfoEXT* pUniformBuffer;
	[FieldOffset(0)]
	public VkDescriptorAddressInfoEXT* pStorageBuffer;
	[FieldOffset(0)]
	public ulong accelerationStructure;
}

public unsafe partial struct VkDescriptorGetInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorGetInfoEXT;
	public void* pNext;
	public VkDescriptorType type;
	public VkDescriptorDataEXT data;

	public VkDescriptorGetInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBufferCaptureDescriptorDataInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BufferCaptureDescriptorDataInfoEXT;
	public void* pNext;
	public VkBuffer buffer;

	public VkBufferCaptureDescriptorDataInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageCaptureDescriptorDataInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageCaptureDescriptorDataInfoEXT;
	public void* pNext;
	public VkImage image;

	public VkImageCaptureDescriptorDataInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageViewCaptureDescriptorDataInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewCaptureDescriptorDataInfoEXT;
	public void* pNext;
	public VkImageView imageView;

	public VkImageViewCaptureDescriptorDataInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerCaptureDescriptorDataInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerCaptureDescriptorDataInfoEXT;
	public void* pNext;
	public VkSampler sampler;

	public VkSamplerCaptureDescriptorDataInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkOpaqueCaptureDescriptorDataCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.OpaqueCaptureDescriptorDataCreateInfoEXT;
	public void* pNext;
	public void* opaqueCaptureDescriptorData;

	public VkOpaqueCaptureDescriptorDataCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureCaptureDescriptorDataInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureCaptureDescriptorDataInfoEXT;
	public void* pNext;
	public VkAccelerationStructureKHR accelerationStructure;
	public VkAccelerationStructureKHR accelerationStructureNV;

	public VkAccelerationStructureCaptureDescriptorDataInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
	public void* pNext;
	public VkBool32 graphicsPipelineLibrary;

	public VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
	public void* pNext;
	public VkBool32 graphicsPipelineLibraryFastLinking;
	public VkBool32 graphicsPipelineLibraryIndependentInterpolationDecoration;

	public VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGraphicsPipelineLibraryCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GraphicsPipelineLibraryCreateInfoEXT;
	public void* pNext;
	public VkGraphicsPipelineLibraryFlagsEXT flags;

	public VkGraphicsPipelineLibraryCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
	public void* pNext;
	public VkBool32 shaderEarlyAndLateFragmentTests;

	public VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
	public void* pNext;
	public VkBool32 fragmentShadingRateEnums;
	public VkBool32 supersampleFragmentShadingRates;
	public VkBool32 noInvocationFragmentShadingRates;

	public VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
	public void* pNext;
	public VkSampleCountFlags maxFragmentShadingRateInvocationCount;

	public VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineFragmentShadingRateEnumStateCreateInfoNV;
	public void* pNext;
	public VkFragmentShadingRateTypeNV shadingRateType;
	public VkFragmentShadingRateNV shadingRate;
	public combinerOps__FixedBuffer combinerOps;

	[InlineArray(2)]
	public partial struct combinerOps__FixedBuffer
	{
		public VkFragmentShadingRateCombinerOpKHR e0;
	}

	public VkPipelineFragmentShadingRateEnumStateCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct VkDeviceOrHostAddressConstKHR
{
	[FieldOffset(0)]
	public ulong deviceAddress;
	[FieldOffset(0)]
	public void* hostAddress;
}

public unsafe partial struct VkAccelerationStructureGeometryMotionTrianglesDataNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureGeometryMotionTrianglesDataNV;
	public void* pNext;
	public VkDeviceOrHostAddressConstKHR vertexData;

	public VkAccelerationStructureGeometryMotionTrianglesDataNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureMotionInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureMotionInfoNV;
	public void* pNext;
	public uint maxInstances;
	public VkAccelerationStructureMotionInfoFlagsNV flags;

	public VkAccelerationStructureMotionInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkSRTDataNV
{
	public float sx;
	public float a;
	public float b;
	public float pvx;
	public float sy;
	public float c;
	public float pvy;
	public float sz;
	public float pvz;
	public float qx;
	public float qy;
	public float qz;
	public float qw;
	public float tx;
	public float ty;
	public float tz;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkAccelerationStructureMotionInstanceDataNV
{
	[FieldOffset(0)]
	public VkAccelerationStructureInstanceKHR staticInstance;
	[FieldOffset(0)]
	public VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
	[FieldOffset(0)]
	public VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
}

public partial struct VkAccelerationStructureMotionInstanceNV
{
	public VkAccelerationStructureMotionInstanceTypeNV type;
	public VkAccelerationStructureMotionInstanceFlagsNV flags;
	public VkAccelerationStructureMotionInstanceDataNV data;
}

public unsafe partial struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingMotionBlurFeaturesNV;
	public void* pNext;
	public VkBool32 rayTracingMotionBlur;
	public VkBool32 rayTracingMotionBlurPipelineTraceRaysIndirect;

	public VkPhysicalDeviceRayTracingMotionBlurFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
	public void* pNext;
	public VkBool32 ycbcr2plane444Formats;

	public VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentDensityMap2FeaturesEXT;
	public void* pNext;
	public VkBool32 fragmentDensityMapDeferred;

	public VkPhysicalDeviceFragmentDensityMap2FeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentDensityMap2PropertiesEXT;
	public void* pNext;
	public VkBool32 subsampledLoads;
	public VkBool32 subsampledCoarseReconstructionEarlyAccess;
	public uint maxSubsampledArrayLayers;
	public uint maxDescriptorSetSubsampledSamplers;

	public VkPhysicalDeviceFragmentDensityMap2PropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyCommandTransformInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyCommandTransformInfoQCOM;
	public void* pNext;
	public VkSurfaceTransformFlagsKHR transform;

	public VkCopyCommandTransformInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageCompressionControlFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageCompressionControlFeaturesEXT;
	public void* pNext;
	public VkBool32 imageCompressionControl;

	public VkPhysicalDeviceImageCompressionControlFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageCompressionControlEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageCompressionControlEXT;
	public void* pNext;
	public VkImageCompressionFlagsEXT flags;
	public uint compressionControlPlaneCount;
	public VkImageCompressionFixedRateFlagsEXT* pFixedRateFlags;

	public VkImageCompressionControlEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageCompressionPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageCompressionPropertiesEXT;
	public void* pNext;
	public VkImageCompressionFlagsEXT imageCompressionFlags;
	public VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags;

	public VkImageCompressionPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
	public void* pNext;
	public VkBool32 attachmentFeedbackLoopLayout;

	public VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevice4444FormatsFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevice4444FormatsFeaturesEXT;
	public void* pNext;
	public VkBool32 formatA4R4G4B4;
	public VkBool32 formatA4B4G4R4;

	public VkPhysicalDevice4444FormatsFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFaultFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFaultFeaturesEXT;
	public void* pNext;
	public VkBool32 deviceFault;
	public VkBool32 deviceFaultVendorBinary;

	public VkPhysicalDeviceFaultFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceFaultCountsEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceFaultCountsEXT;
	public void* pNext;
	public uint addressInfoCount;
	public uint vendorInfoCount;
	public ulong vendorBinarySize;

	public VkDeviceFaultCountsEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDeviceFaultAddressInfoEXT
{
	public VkDeviceFaultAddressTypeEXT addressType;
	public ulong reportedAddress;
	public ulong addressPrecision;
}

public unsafe partial struct VkDeviceFaultVendorInfoEXT
{
	public fixed byte description[256];
	public ulong vendorFaultCode;
	public ulong vendorFaultData;
}

public unsafe partial struct VkDeviceFaultInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceFaultInfoEXT;
	public void* pNext;
	public fixed byte description[256];
	public VkDeviceFaultAddressInfoEXT* pAddressInfos;
	public VkDeviceFaultVendorInfoEXT* pVendorInfos;
	public void* pVendorBinaryData;

	public VkDeviceFaultInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT
{
	public uint headerSize;
	public VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion;
	public uint vendorID;
	public uint deviceID;
	public uint driverVersion;
	public fixed byte pipelineCacheUUID[16];
	public uint applicationNameOffset;
	public VkVersion applicationVersion;
	public uint engineNameOffset;
	public VkVersion engineVersion;
	public VkVersion apiVersion;
}

public unsafe partial struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
	public void* pNext;
	public VkBool32 rasterizationOrderColorAttachmentAccess;
	public VkBool32 rasterizationOrderDepthAttachmentAccess;
	public VkBool32 rasterizationOrderStencilAttachmentAccess;

	public VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRGBA10X6FormatsFeaturesEXT;
	public void* pNext;
	public VkBool32 formatRgba10x6WithoutYCbCrSampler;

	public VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMutableDescriptorTypeFeaturesEXT;
	public void* pNext;
	public VkBool32 mutableDescriptorType;

	public VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMutableDescriptorTypeListEXT
{
	public uint descriptorTypeCount;
	public VkDescriptorType* pDescriptorTypes;
}

public unsafe partial struct VkMutableDescriptorTypeCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MutableDescriptorTypeCreateInfoEXT;
	public void* pNext;
	public uint mutableDescriptorTypeListCount;
	public VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists;

	public VkMutableDescriptorTypeCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVertexInputDynamicStateFeaturesEXT;
	public void* pNext;
	public VkBool32 vertexInputDynamicState;

	public VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVertexInputBindingDescription2EXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VertexInputBindingDescription2EXT;
	public void* pNext;
	public uint binding;
	public uint stride;
	public VkVertexInputRate inputRate;
	public uint divisor;

	public VkVertexInputBindingDescription2EXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkVertexInputAttributeDescription2EXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.VertexInputAttributeDescription2EXT;
	public void* pNext;
	public uint location;
	public uint binding;
	public VkFormat format;
	public uint offset;

	public VkVertexInputAttributeDescription2EXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDrmPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDrmPropertiesEXT;
	public void* pNext;
	public VkBool32 hasPrimary;
	public VkBool32 hasRender;
	public long primaryMajor;
	public long primaryMinor;
	public long renderMajor;
	public long renderMinor;

	public VkPhysicalDeviceDrmPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceAddressBindingReportFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceAddressBindingReportFeaturesEXT;
	public void* pNext;
	public VkBool32 reportAddressBinding;

	public VkPhysicalDeviceAddressBindingReportFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceAddressBindingCallbackDataEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceAddressBindingCallbackDataEXT;
	public void* pNext;
	public VkDeviceAddressBindingFlagsEXT flags;
	public ulong baseAddress;
	public ulong size;
	public VkDeviceAddressBindingTypeEXT bindingType;

	public VkDeviceAddressBindingCallbackDataEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDepthClipControlFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDepthClipControlFeaturesEXT;
	public void* pNext;
	public VkBool32 depthClipControl;

	public VkPhysicalDeviceDepthClipControlFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineViewportDepthClipControlCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineViewportDepthClipControlCreateInfoEXT;
	public void* pNext;
	public VkBool32 negativeOneToOne;

	public VkPipelineViewportDepthClipControlCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
	public void* pNext;
	public VkBool32 primitiveTopologyListRestart;
	public VkBool32 primitiveTopologyPatchListRestart;

	public VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubpassShadingPipelineCreateInfoHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubpassShadingPipelineCreateInfoHUAWEI;
	public void* pNext;
	public VkRenderPass renderPass;
	public uint subpass;

	public VkSubpassShadingPipelineCreateInfoHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSubpassShadingFeaturesHUAWEI;
	public void* pNext;
	public VkBool32 subpassShading;

	public VkPhysicalDeviceSubpassShadingFeaturesHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSubpassShadingPropertiesHUAWEI;
	public void* pNext;
	public uint maxSubpassShadingWorkgroupSizeAspectRatio;

	public VkPhysicalDeviceSubpassShadingPropertiesHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceInvocationMaskFeaturesHUAWEI;
	public void* pNext;
	public VkBool32 invocationMask;

	public VkPhysicalDeviceInvocationMaskFeaturesHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryGetRemoteAddressInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryGetRemoteAddressInfoNV;
	public void* pNext;
	public VkDeviceMemory memory;
	public VkExternalMemoryHandleTypeFlags handleType;

	public VkMemoryGetRemoteAddressInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalMemoryRDMAFeaturesNV;
	public void* pNext;
	public VkBool32 externalMemoryRDMA;

	public VkPhysicalDeviceExternalMemoryRDMAFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelinePropertiesIdentifierEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelinePropertiesIdentifierEXT;
	public void* pNext;
	public fixed byte pipelineIdentifier[16];

	public VkPipelinePropertiesIdentifierEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelinePropertiesFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelinePropertiesFeaturesEXT;
	public void* pNext;
	public VkBool32 pipelinePropertiesIdentifier;

	public VkPhysicalDevicePipelinePropertiesFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFrameBoundaryFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFrameBoundaryFeaturesEXT;
	public void* pNext;
	public VkBool32 frameBoundary;

	public VkPhysicalDeviceFrameBoundaryFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFrameBoundaryEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FrameBoundaryEXT;
	public void* pNext;
	public VkFrameBoundaryFlagsEXT flags;
	public ulong frameID;
	public uint imageCount;
	public VkImage* pImages;
	public uint bufferCount;
	public VkBuffer* pBuffers;
	public ulong tagName;
	public ulong tagSize;
	public void* pTag;

	public VkFrameBoundaryEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
	public void* pNext;
	public VkBool32 multisampledRenderToSingleSampled;

	public VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSubpassResolvePerformanceQueryEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SubpassResolvePerformanceQueryEXT;
	public void* pNext;
	public VkBool32 optimal;

	public VkSubpassResolvePerformanceQueryEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMultisampledRenderToSingleSampledInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MultisampledRenderToSingleSampledInfoEXT;
	public void* pNext;
	public VkBool32 multisampledRenderToSingleSampledEnable;
	public VkSampleCountFlags rasterizationSamples;

	public VkMultisampledRenderToSingleSampledInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExtendedDynamicState2FeaturesEXT;
	public void* pNext;
	public VkBool32 extendedDynamicState2;
	public VkBool32 extendedDynamicState2LogicOp;
	public VkBool32 extendedDynamicState2PatchControlPoints;

	public VkPhysicalDeviceExtendedDynamicState2FeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceColorWriteEnableFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceColorWriteEnableFeaturesEXT;
	public void* pNext;
	public VkBool32 colorWriteEnable;

	public VkPhysicalDeviceColorWriteEnableFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineColorWriteCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineColorWriteCreateInfoEXT;
	public void* pNext;
	public uint attachmentCount;
	public VkBool32* pColorWriteEnables;

	public VkPipelineColorWriteCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
	public void* pNext;
	public VkBool32 primitivesGeneratedQuery;
	public VkBool32 primitivesGeneratedQueryWithRasterizerDiscard;
	public VkBool32 primitivesGeneratedQueryWithNonZeroStreams;

	public VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageViewMinLodFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageViewMinLodFeaturesEXT;
	public void* pNext;
	public VkBool32 minLod;

	public VkPhysicalDeviceImageViewMinLodFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageViewMinLodCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewMinLodCreateInfoEXT;
	public void* pNext;
	public float minLod;

	public VkImageViewMinLodCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMultiDrawFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMultiDrawFeaturesEXT;
	public void* pNext;
	public VkBool32 multiDraw;

	public VkPhysicalDeviceMultiDrawFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMultiDrawPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMultiDrawPropertiesEXT;
	public void* pNext;
	public uint maxMultiDrawCount;

	public VkPhysicalDeviceMultiDrawPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkMultiDrawInfoEXT
{
	public uint firstVertex;
	public uint vertexCount;
}

public partial struct VkMultiDrawIndexedInfoEXT
{
	public uint firstIndex;
	public uint indexCount;
	public int vertexOffset;
}

public unsafe partial struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImage2DViewOf3DFeaturesEXT;
	public void* pNext;
	public VkBool32 image2DViewOf3D;
	public VkBool32 sampler2DViewOf3D;

	public VkPhysicalDeviceImage2DViewOf3DFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderTileImageFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderTileImageFeaturesEXT;
	public void* pNext;
	public VkBool32 shaderTileImageColorReadAccess;
	public VkBool32 shaderTileImageDepthReadAccess;
	public VkBool32 shaderTileImageStencilReadAccess;

	public VkPhysicalDeviceShaderTileImageFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderTileImagePropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderTileImagePropertiesEXT;
	public void* pNext;
	public VkBool32 shaderTileImageCoherentReadAccelerated;
	public VkBool32 shaderTileImageReadSampleFromPixelRateInvocation;
	public VkBool32 shaderTileImageReadFromHelperInvocation;

	public VkPhysicalDeviceShaderTileImagePropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkMicromapUsageEXT
{
	public uint count;
	public uint subdivisionLevel;
	public uint format;
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct VkDeviceOrHostAddressKHR
{
	[FieldOffset(0)]
	public ulong deviceAddress;
	[FieldOffset(0)]
	public void* hostAddress;
}

public unsafe partial struct VkMicromapBuildInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MicromapBuildInfoEXT;
	public void* pNext;
	public VkMicromapTypeEXT type;
	public VkBuildMicromapFlagsEXT flags;
	public VkBuildMicromapModeEXT mode;
	public VkMicromapEXT dstMicromap;
	public uint usageCountsCount;
	public VkMicromapUsageEXT* pUsageCounts;
	public VkMicromapUsageEXT** ppUsageCounts;
	public VkDeviceOrHostAddressConstKHR data;
	public VkDeviceOrHostAddressKHR scratchData;
	public VkDeviceOrHostAddressConstKHR triangleArray;
	public ulong triangleArrayStride;

	public VkMicromapBuildInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMicromapCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MicromapCreateInfoEXT;
	public void* pNext;
	public VkMicromapCreateFlagsEXT createFlags;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;
	public VkMicromapTypeEXT type;
	public ulong deviceAddress;

	public VkMicromapCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceOpacityMicromapFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceOpacityMicromapFeaturesEXT;
	public void* pNext;
	public VkBool32 micromap;
	public VkBool32 micromapCaptureReplay;
	public VkBool32 micromapHostCommands;

	public VkPhysicalDeviceOpacityMicromapFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceOpacityMicromapPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceOpacityMicromapPropertiesEXT;
	public void* pNext;
	public uint maxOpacity2StateSubdivisionLevel;
	public uint maxOpacity4StateSubdivisionLevel;

	public VkPhysicalDeviceOpacityMicromapPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMicromapVersionInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MicromapVersionInfoEXT;
	public void* pNext;
	public byte* pVersionData;

	public VkMicromapVersionInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyMicromapToMemoryInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyMicromapToMemoryInfoEXT;
	public void* pNext;
	public VkMicromapEXT src;
	public VkDeviceOrHostAddressKHR dst;
	public VkCopyMicromapModeEXT mode;

	public VkCopyMicromapToMemoryInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyMemoryToMicromapInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyMemoryToMicromapInfoEXT;
	public void* pNext;
	public VkDeviceOrHostAddressConstKHR src;
	public VkMicromapEXT dst;
	public VkCopyMicromapModeEXT mode;

	public VkCopyMemoryToMicromapInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyMicromapInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyMicromapInfoEXT;
	public void* pNext;
	public VkMicromapEXT src;
	public VkMicromapEXT dst;
	public VkCopyMicromapModeEXT mode;

	public VkCopyMicromapInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMicromapBuildSizesInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MicromapBuildSizesInfoEXT;
	public void* pNext;
	public ulong micromapSize;
	public ulong buildScratchSize;
	public VkBool32 discardable;

	public VkMicromapBuildSizesInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureTrianglesOpacityMicromapEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureTrianglesOpacityMicromapEXT;
	public void* pNext;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexBuffer;
	public ulong indexStride;
	public uint baseTriangle;
	public uint usageCountsCount;
	public VkMicromapUsageEXT* pUsageCounts;
	public VkMicromapUsageEXT** ppUsageCounts;
	public VkMicromapEXT micromap;

	public VkAccelerationStructureTrianglesOpacityMicromapEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkMicromapTriangleEXT
{
	public uint dataOffset;
	public ushort subdivisionLevel;
	public ushort format;
}

public unsafe partial struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceClusterCullingShaderFeaturesHUAWEI;
	public void* pNext;
	public VkBool32 clustercullingShader;
	public VkBool32 multiviewClusterCullingShader;

	public VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceClusterCullingShaderPropertiesHUAWEI;
	public void* pNext;
	public fixed uint maxWorkGroupCount[3];
	public fixed uint maxWorkGroupSize[3];
	public uint maxOutputClusterCount;
	public ulong indirectBufferOffsetAlignment;

	public VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI;
	public void* pNext;
	public VkBool32 clusterShadingRate;

	public VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceBorderColorSwizzleFeaturesEXT;
	public void* pNext;
	public VkBool32 borderColorSwizzle;
	public VkBool32 borderColorSwizzleFromImage;

	public VkPhysicalDeviceBorderColorSwizzleFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerBorderColorComponentMappingCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerBorderColorComponentMappingCreateInfoEXT;
	public void* pNext;
	public VkComponentMapping components;
	public VkBool32 srgb;

	public VkSamplerBorderColorComponentMappingCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
	public void* pNext;
	public VkBool32 pageableDeviceLocalMemory;

	public VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderCorePropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderCorePropertiesARM;
	public void* pNext;
	public uint pixelRate;
	public uint texelRate;
	public uint fmaRate;

	public VkPhysicalDeviceShaderCorePropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceQueueShaderCoreControlCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceQueueShaderCoreControlCreateInfoARM;
	public void* pNext;
	public uint shaderCoreCount;

	public VkDeviceQueueShaderCoreControlCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSchedulingControlsFeaturesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSchedulingControlsFeaturesARM;
	public void* pNext;
	public VkBool32 schedulingControls;

	public VkPhysicalDeviceSchedulingControlsFeaturesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceSchedulingControlsPropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSchedulingControlsPropertiesARM;
	public void* pNext;
	public VkPhysicalDeviceSchedulingControlsFlagsARM schedulingControlsFlags;

	public VkPhysicalDeviceSchedulingControlsPropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageSlicedViewOf3DFeaturesEXT;
	public void* pNext;
	public VkBool32 imageSlicedViewOf3D;

	public VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageViewSlicedCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewSlicedCreateInfoEXT;
	public void* pNext;
	public uint sliceOffset;
	public uint sliceCount;

	public VkImageViewSlicedCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
	public void* pNext;
	public VkBool32 descriptorSetHostMapping;

	public VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorSetBindingReferenceVALVE : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorSetBindingReferenceVALVE;
	public void* pNext;
	public VkDescriptorSetLayout descriptorSetLayout;
	public uint binding;

	public VkDescriptorSetBindingReferenceVALVE()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorSetLayoutHostMappingInfoVALVE : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorSetLayoutHostMappingInfoVALVE;
	public void* pNext;
	public ulong descriptorOffset;
	public uint descriptorSize;

	public VkDescriptorSetLayoutHostMappingInfoVALVE()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceNonSeamlessCubeMapFeaturesEXT;
	public void* pNext;
	public VkBool32 nonSeamlessCubeMap;

	public VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRenderPassStripedFeaturesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRenderPassStripedFeaturesARM;
	public void* pNext;
	public VkBool32 renderPassStriped;

	public VkPhysicalDeviceRenderPassStripedFeaturesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRenderPassStripedPropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRenderPassStripedPropertiesARM;
	public void* pNext;
	public VkExtent2D renderPassStripeGranularity;
	public uint maxRenderPassStripes;

	public VkPhysicalDeviceRenderPassStripedPropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassStripeInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassStripeInfoARM;
	public void* pNext;
	public VkRect2D stripeArea;

	public VkRenderPassStripeInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassStripeBeginInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassStripeBeginInfoARM;
	public void* pNext;
	public uint stripeInfoCount;
	public VkRenderPassStripeInfoARM* pStripeInfos;

	public VkRenderPassStripeBeginInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassStripeSubmitInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassStripeSubmitInfoARM;
	public void* pNext;
	public uint stripeSemaphoreInfoCount;
	public VkSemaphoreSubmitInfo* pStripeSemaphoreInfos;

	public VkRenderPassStripeSubmitInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentDensityMapOffsetFeaturesEXT;
	public void* pNext;
	public VkBool32 fragmentDensityMapOffset;

	public VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentDensityMapOffsetPropertiesEXT;
	public void* pNext;
	public VkExtent2D fragmentDensityOffsetGranularity;

	public VkPhysicalDeviceFragmentDensityMapOffsetPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassFragmentDensityMapOffsetEndInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassFragmentDensityMapOffsetEndInfoEXT;
	public void* pNext;
	public uint fragmentDensityOffsetCount;
	public VkOffset2D* pFragmentDensityOffsets;

	public VkRenderPassFragmentDensityMapOffsetEndInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkCopyMemoryIndirectCommandNV
{
	public ulong srcAddress;
	public ulong dstAddress;
	public ulong size;
}

public partial struct VkCopyMemoryToImageIndirectCommandNV
{
	public ulong srcAddress;
	public uint bufferRowLength;
	public uint bufferImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;
}

public unsafe partial struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCopyMemoryIndirectFeaturesNV;
	public void* pNext;
	public VkBool32 indirectCopy;

	public VkPhysicalDeviceCopyMemoryIndirectFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCopyMemoryIndirectPropertiesNV;
	public void* pNext;
	public VkQueueFlags supportedQueues;

	public VkPhysicalDeviceCopyMemoryIndirectPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDecompressMemoryRegionNV
{
	public ulong srcAddress;
	public ulong dstAddress;
	public ulong compressedSize;
	public ulong decompressedSize;
	public VkMemoryDecompressionMethodFlagsNV decompressionMethod;
}

public unsafe partial struct VkPhysicalDeviceMemoryDecompressionFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMemoryDecompressionFeaturesNV;
	public void* pNext;
	public VkBool32 memoryDecompression;

	public VkPhysicalDeviceMemoryDecompressionFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMemoryDecompressionPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMemoryDecompressionPropertiesNV;
	public void* pNext;
	public VkMemoryDecompressionMethodFlagsNV decompressionMethods;
	public ulong maxDecompressionIndirectCount;

	public VkPhysicalDeviceMemoryDecompressionPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV;
	public void* pNext;
	public VkBool32 deviceGeneratedCompute;
	public VkBool32 deviceGeneratedComputePipelines;
	public VkBool32 deviceGeneratedComputeCaptureReplay;

	public VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkComputePipelineIndirectBufferInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ComputePipelineIndirectBufferInfoNV;
	public void* pNext;
	public ulong deviceAddress;
	public ulong size;
	public ulong pipelineDeviceAddressCaptureReplay;

	public VkComputePipelineIndirectBufferInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineIndirectDeviceAddressInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineIndirectDeviceAddressInfoNV;
	public void* pNext;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipeline pipeline;

	public VkPipelineIndirectDeviceAddressInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkBindPipelineIndirectCommandNV
{
	public ulong pipelineAddress;
}

public unsafe partial struct VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV;
	public void* pNext;
	public VkBool32 spheres;
	public VkBool32 linearSweptSpheres;

	public VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureGeometryLinearSweptSpheresDataNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureGeometryLinearSweptSpheresDataNV;
	public void* pNext;
	public VkFormat vertexFormat;
	public VkDeviceOrHostAddressConstKHR vertexData;
	public ulong vertexStride;
	public VkFormat radiusFormat;
	public VkDeviceOrHostAddressConstKHR radiusData;
	public ulong radiusStride;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexData;
	public ulong indexStride;
	public VkRayTracingLssIndexingModeNV indexingMode;
	public VkRayTracingLssPrimitiveEndCapsModeNV endCapsMode;

	public VkAccelerationStructureGeometryLinearSweptSpheresDataNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureGeometrySpheresDataNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureGeometrySpheresDataNV;
	public void* pNext;
	public VkFormat vertexFormat;
	public VkDeviceOrHostAddressConstKHR vertexData;
	public ulong vertexStride;
	public VkFormat radiusFormat;
	public VkDeviceOrHostAddressConstKHR radiusData;
	public ulong radiusStride;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexData;
	public ulong indexStride;

	public VkAccelerationStructureGeometrySpheresDataNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLinearColorAttachmentFeaturesNV;
	public void* pNext;
	public VkBool32 linearColorAttachment;

	public VkPhysicalDeviceLinearColorAttachmentFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;
	public void* pNext;
	public VkBool32 imageCompressionControlSwapchain;

	public VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageViewSampleWeightCreateInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageViewSampleWeightCreateInfoQCOM;
	public void* pNext;
	public VkOffset2D filterCenter;
	public VkExtent2D filterSize;
	public uint numPhases;

	public VkImageViewSampleWeightCreateInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageProcessingFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageProcessingFeaturesQCOM;
	public void* pNext;
	public VkBool32 textureSampleWeighted;
	public VkBool32 textureBoxFilter;
	public VkBool32 textureBlockMatch;

	public VkPhysicalDeviceImageProcessingFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageProcessingPropertiesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageProcessingPropertiesQCOM;
	public void* pNext;
	public uint maxWeightFilterPhases;
	public VkExtent2D maxWeightFilterDimension;
	public VkExtent2D maxBlockMatchRegion;
	public VkExtent2D maxBoxFilterBlockSize;

	public VkPhysicalDeviceImageProcessingPropertiesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceNestedCommandBufferFeaturesEXT;
	public void* pNext;
	public VkBool32 nestedCommandBuffer;
	public VkBool32 nestedCommandBufferRendering;
	public VkBool32 nestedCommandBufferSimultaneousUse;

	public VkPhysicalDeviceNestedCommandBufferFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceNestedCommandBufferPropertiesEXT;
	public void* pNext;
	public uint maxCommandBufferNestingLevel;

	public VkPhysicalDeviceNestedCommandBufferPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalMemoryAcquireUnmodifiedEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalMemoryAcquireUnmodifiedEXT;
	public void* pNext;
	public VkBool32 acquireUnmodifiedMemory;

	public VkExternalMemoryAcquireUnmodifiedEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExtendedDynamicState3FeaturesEXT;
	public void* pNext;
	public VkBool32 extendedDynamicState3TessellationDomainOrigin;
	public VkBool32 extendedDynamicState3DepthClampEnable;
	public VkBool32 extendedDynamicState3PolygonMode;
	public VkBool32 extendedDynamicState3RasterizationSamples;
	public VkBool32 extendedDynamicState3SampleMask;
	public VkBool32 extendedDynamicState3AlphaToCoverageEnable;
	public VkBool32 extendedDynamicState3AlphaToOneEnable;
	public VkBool32 extendedDynamicState3LogicOpEnable;
	public VkBool32 extendedDynamicState3ColorBlendEnable;
	public VkBool32 extendedDynamicState3ColorBlendEquation;
	public VkBool32 extendedDynamicState3ColorWriteMask;
	public VkBool32 extendedDynamicState3RasterizationStream;
	public VkBool32 extendedDynamicState3ConservativeRasterizationMode;
	public VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
	public VkBool32 extendedDynamicState3DepthClipEnable;
	public VkBool32 extendedDynamicState3SampleLocationsEnable;
	public VkBool32 extendedDynamicState3ColorBlendAdvanced;
	public VkBool32 extendedDynamicState3ProvokingVertexMode;
	public VkBool32 extendedDynamicState3LineRasterizationMode;
	public VkBool32 extendedDynamicState3LineStippleEnable;
	public VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
	public VkBool32 extendedDynamicState3ViewportWScalingEnable;
	public VkBool32 extendedDynamicState3ViewportSwizzle;
	public VkBool32 extendedDynamicState3CoverageToColorEnable;
	public VkBool32 extendedDynamicState3CoverageToColorLocation;
	public VkBool32 extendedDynamicState3CoverageModulationMode;
	public VkBool32 extendedDynamicState3CoverageModulationTableEnable;
	public VkBool32 extendedDynamicState3CoverageModulationTable;
	public VkBool32 extendedDynamicState3CoverageReductionMode;
	public VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
	public VkBool32 extendedDynamicState3ShadingRateImageEnable;

	public VkPhysicalDeviceExtendedDynamicState3FeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExtendedDynamicState3PropertiesEXT;
	public void* pNext;
	public VkBool32 dynamicPrimitiveTopologyUnrestricted;

	public VkPhysicalDeviceExtendedDynamicState3PropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkColorBlendEquationEXT
{
	public VkBlendFactor srcColorBlendFactor;
	public VkBlendFactor dstColorBlendFactor;
	public VkBlendOp colorBlendOp;
	public VkBlendFactor srcAlphaBlendFactor;
	public VkBlendFactor dstAlphaBlendFactor;
	public VkBlendOp alphaBlendOp;
}

public partial struct VkColorBlendAdvancedEXT
{
	public VkBlendOp advancedBlendOp;
	public VkBool32 srcPremultiplied;
	public VkBool32 dstPremultiplied;
	public VkBlendOverlapEXT blendOverlap;
	public VkBool32 clampResults;
}

public unsafe partial struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceSubpassMergeFeedbackFeaturesEXT;
	public void* pNext;
	public VkBool32 subpassMergeFeedback;

	public VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassCreationControlEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassCreationControlEXT;
	public void* pNext;
	public VkBool32 disallowMerging;

	public VkRenderPassCreationControlEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkRenderPassCreationFeedbackInfoEXT
{
	public uint postMergeSubpassCount;
}

public unsafe partial struct VkRenderPassCreationFeedbackCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassCreationFeedbackCreateInfoEXT;
	public void* pNext;
	public VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback;

	public VkRenderPassCreationFeedbackCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderPassSubpassFeedbackInfoEXT
{
	public VkSubpassMergeStatusEXT subpassMergeStatus;
	public fixed byte description[256];
	public uint postMergeIndex;
}

public unsafe partial struct VkRenderPassSubpassFeedbackCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderPassSubpassFeedbackCreateInfoEXT;
	public void* pNext;
	public VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback;

	public VkRenderPassSubpassFeedbackCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDirectDriverLoadingInfoLUNARG : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DirectDriverLoadingInfoLUNARG;
	public void* pNext;
	public VkDirectDriverLoadingModeLUNARG flags;
	public delegate* unmanaged<VkInstance, byte*, PFN_vkVoidFunction> pfnGetInstanceProcAddr;

	public VkDirectDriverLoadingInfoLUNARG()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDirectDriverLoadingListLUNARG : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DirectDriverLoadingListLUNARG;
	public void* pNext;
	public VkDirectDriverLoadingModeLUNARG mode;
	public uint driverCount;
	public VkDirectDriverLoadingInfoLUNARG* pDrivers;

	public VkDirectDriverLoadingListLUNARG()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorDescriptionARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorDescriptionARM;
	public void* pNext;
	public VkTensorTilingARM tiling;
	public VkFormat format;
	public uint dimensionCount;
	public long* pDimensions;
	public long* pStrides;
	public VkTensorUsageFlagsARM usage;

	public VkTensorDescriptionARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorCreateInfoARM;
	public void* pNext;
	public VkTensorCreateFlagsARM flags;
	public VkTensorDescriptionARM* pDescription;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public uint* pQueueFamilyIndices;

	public VkTensorCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorViewCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorViewCreateInfoARM;
	public void* pNext;
	public VkTensorViewCreateFlagsARM flags;
	public VkTensorARM tensor;
	public VkFormat format;

	public VkTensorViewCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorMemoryRequirementsInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorMemoryRequirementsInfoARM;
	public void* pNext;
	public VkTensorARM tensor;

	public VkTensorMemoryRequirementsInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindTensorMemoryInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindTensorMemoryInfoARM;
	public void* pNext;
	public VkTensorARM tensor;
	public VkDeviceMemory memory;
	public ulong memoryOffset;

	public VkBindTensorMemoryInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWriteDescriptorSetTensorARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WriteDescriptorSetTensorARM;
	public void* pNext;
	public uint tensorViewCount;
	public VkTensorViewARM* pTensorViews;

	public VkWriteDescriptorSetTensorARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorFormatPropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorFormatPropertiesARM;
	public void* pNext;
	public VkFormatFeatureFlags2 optimalTilingTensorFeatures;
	public VkFormatFeatureFlags2 linearTilingTensorFeatures;

	public VkTensorFormatPropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTensorPropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTensorPropertiesARM;
	public void* pNext;
	public uint maxTensorDimensionCount;
	public ulong maxTensorElements;
	public ulong maxPerDimensionTensorElements;
	public long maxTensorStride;
	public ulong maxTensorSize;
	public uint maxTensorShaderAccessArrayLength;
	public uint maxTensorShaderAccessSize;
	public uint maxDescriptorSetStorageTensors;
	public uint maxPerStageDescriptorSetStorageTensors;
	public uint maxDescriptorSetUpdateAfterBindStorageTensors;
	public uint maxPerStageDescriptorUpdateAfterBindStorageTensors;
	public VkBool32 shaderStorageTensorArrayNonUniformIndexingNative;
	public VkShaderStageFlags shaderTensorSupportedStages;

	public VkPhysicalDeviceTensorPropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorMemoryBarrierARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorMemoryBarrierARM;
	public void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkTensorARM tensor;

	public VkTensorMemoryBarrierARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorDependencyInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorDependencyInfoARM;
	public void* pNext;
	public uint tensorMemoryBarrierCount;
	public VkTensorMemoryBarrierARM* pTensorMemoryBarriers;

	public VkTensorDependencyInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTensorFeaturesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTensorFeaturesARM;
	public void* pNext;
	public VkBool32 tensorNonPacked;
	public VkBool32 shaderTensorAccess;
	public VkBool32 shaderStorageTensorArrayDynamicIndexing;
	public VkBool32 shaderStorageTensorArrayNonUniformIndexing;
	public VkBool32 descriptorBindingStorageTensorUpdateAfterBind;
	public VkBool32 tensors;

	public VkPhysicalDeviceTensorFeaturesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDeviceTensorMemoryRequirementsARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DeviceTensorMemoryRequirementsARM;
	public void* pNext;
	public VkTensorCreateInfoARM* pCreateInfo;

	public VkDeviceTensorMemoryRequirementsARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorCopyARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorCopyARM;
	public void* pNext;
	public uint dimensionCount;
	public ulong* pSrcOffset;
	public ulong* pDstOffset;
	public ulong* pExtent;

	public VkTensorCopyARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyTensorInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyTensorInfoARM;
	public void* pNext;
	public VkTensorARM srcTensor;
	public VkTensorARM dstTensor;
	public uint regionCount;
	public VkTensorCopyARM* pRegions;

	public VkCopyTensorInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryDedicatedAllocateInfoTensorARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryDedicatedAllocateInfoTensorARM;
	public void* pNext;
	public VkTensorARM tensor;

	public VkMemoryDedicatedAllocateInfoTensorARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalTensorInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalTensorInfoARM;
	public void* pNext;
	public VkTensorCreateFlagsARM flags;
	public VkTensorDescriptionARM* pDescription;
	public VkExternalMemoryHandleTypeFlags handleType;

	public VkPhysicalDeviceExternalTensorInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalTensorPropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalTensorPropertiesARM;
	public void* pNext;
	public VkExternalMemoryProperties externalMemoryProperties;

	public VkExternalTensorPropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalMemoryTensorCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalMemoryTensorCreateInfoARM;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;

	public VkExternalMemoryTensorCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorBufferTensorFeaturesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorBufferTensorFeaturesARM;
	public void* pNext;
	public VkBool32 descriptorBufferTensorDescriptors;

	public VkPhysicalDeviceDescriptorBufferTensorFeaturesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorBufferTensorPropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorBufferTensorPropertiesARM;
	public void* pNext;
	public ulong tensorCaptureReplayDescriptorDataSize;
	public ulong tensorViewCaptureReplayDescriptorDataSize;
	public ulong tensorDescriptorSize;

	public VkPhysicalDeviceDescriptorBufferTensorPropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDescriptorGetTensorInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DescriptorGetTensorInfoARM;
	public void* pNext;
	public VkTensorViewARM tensorView;

	public VkDescriptorGetTensorInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorCaptureDescriptorDataInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorCaptureDescriptorDataInfoARM;
	public void* pNext;
	public VkTensorARM tensor;

	public VkTensorCaptureDescriptorDataInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTensorViewCaptureDescriptorDataInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TensorViewCaptureDescriptorDataInfoARM;
	public void* pNext;
	public VkTensorViewARM tensorView;

	public VkTensorViewCaptureDescriptorDataInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFrameBoundaryTensorsARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FrameBoundaryTensorsARM;
	public void* pNext;
	public uint tensorCount;
	public VkTensorARM* pTensors;

	public VkFrameBoundaryTensorsARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderModuleIdentifierFeaturesEXT;
	public void* pNext;
	public VkBool32 shaderModuleIdentifier;

	public VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderModuleIdentifierPropertiesEXT;
	public void* pNext;
	public fixed byte shaderModuleIdentifierAlgorithmUUID[16];

	public VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineShaderStageModuleIdentifierCreateInfoEXT;
	public void* pNext;
	public uint identifierSize;
	public byte* pIdentifier;

	public VkPipelineShaderStageModuleIdentifierCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkShaderModuleIdentifierEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ShaderModuleIdentifierEXT;
	public void* pNext;
	public uint identifierSize;
	public fixed byte identifier[32];

	public VkShaderModuleIdentifierEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceOpticalFlowFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceOpticalFlowFeaturesNV;
	public void* pNext;
	public VkBool32 opticalFlow;

	public VkPhysicalDeviceOpticalFlowFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceOpticalFlowPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceOpticalFlowPropertiesNV;
	public void* pNext;
	public VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
	public VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
	public VkBool32 hintSupported;
	public VkBool32 costSupported;
	public VkBool32 bidirectionalFlowSupported;
	public VkBool32 globalFlowSupported;
	public uint minWidth;
	public uint minHeight;
	public uint maxWidth;
	public uint maxHeight;
	public uint maxNumRegionsOfInterest;

	public VkPhysicalDeviceOpticalFlowPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkOpticalFlowImageFormatInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.OpticalFlowImageFormatInfoNV;
	public void* pNext;
	public VkOpticalFlowUsageFlagsNV usage;

	public VkOpticalFlowImageFormatInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkOpticalFlowImageFormatPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.OpticalFlowImageFormatPropertiesNV;
	public void* pNext;
	public VkFormat format;

	public VkOpticalFlowImageFormatPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkOpticalFlowSessionCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.OpticalFlowSessionCreateInfoNV;
	public void* pNext;
	public uint width;
	public uint height;
	public VkFormat imageFormat;
	public VkFormat flowVectorFormat;
	public VkFormat costFormat;
	public VkOpticalFlowGridSizeFlagsNV outputGridSize;
	public VkOpticalFlowGridSizeFlagsNV hintGridSize;
	public VkOpticalFlowPerformanceLevelNV performanceLevel;
	public VkOpticalFlowSessionCreateFlagsNV flags;

	public VkOpticalFlowSessionCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkOpticalFlowSessionCreatePrivateDataInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.OpticalFlowSessionCreatePrivateDataInfoNV;
	public void* pNext;
	public uint id;
	public uint size;
	public void* pPrivateData;

	public VkOpticalFlowSessionCreatePrivateDataInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkOpticalFlowExecuteInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.OpticalFlowExecuteInfoNV;
	public void* pNext;
	public VkOpticalFlowExecuteFlagsNV flags;
	public uint regionCount;
	public VkRect2D* pRegions;

	public VkOpticalFlowExecuteInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLegacyDitheringFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLegacyDitheringFeaturesEXT;
	public void* pNext;
	public VkBool32 legacyDithering;

	public VkPhysicalDeviceLegacyDitheringFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceAntiLagFeaturesAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceAntiLagFeaturesAMD;
	public void* pNext;
	public VkBool32 antiLag;

	public VkPhysicalDeviceAntiLagFeaturesAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAntiLagPresentationInfoAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AntiLagPresentationInfoAMD;
	public void* pNext;
	public VkAntiLagStageAMD stage;
	public ulong frameIndex;

	public VkAntiLagPresentationInfoAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAntiLagDataAMD : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AntiLagDataAMD;
	public void* pNext;
	public VkAntiLagModeAMD mode;
	public uint maxFPS;
	public VkAntiLagPresentationInfoAMD* pPresentationInfo;

	public VkAntiLagDataAMD()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderObjectFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderObjectFeaturesEXT;
	public void* pNext;
	public VkBool32 shaderObject;

	public VkPhysicalDeviceShaderObjectFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderObjectPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderObjectPropertiesEXT;
	public void* pNext;
	public fixed byte shaderBinaryUUID[16];
	public uint shaderBinaryVersion;

	public VkPhysicalDeviceShaderObjectPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkShaderCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ShaderCreateInfoEXT;
	public void* pNext;
	public VkShaderCreateFlagsEXT flags;
	public VkShaderStageFlags stage;
	public VkShaderStageFlags nextStage;
	public VkShaderCodeTypeEXT codeType;
	public ulong codeSize;
	public void* pCode;
	public byte* pName;
	public uint setLayoutCount;
	public VkDescriptorSetLayout* pSetLayouts;
	public uint pushConstantRangeCount;
	public VkPushConstantRange* pPushConstantRanges;
	public VkSpecializationInfo* pSpecializationInfo;

	public VkShaderCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDepthClampRangeEXT
{
	public float minDepthClamp;
	public float maxDepthClamp;
}

public unsafe partial struct VkPhysicalDeviceTilePropertiesFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTilePropertiesFeaturesQCOM;
	public void* pNext;
	public VkBool32 tileProperties;

	public VkPhysicalDeviceTilePropertiesFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTilePropertiesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TilePropertiesQCOM;
	public void* pNext;
	public VkExtent3D tileSize;
	public VkExtent2D apronSize;
	public VkOffset2D origin;

	public VkTilePropertiesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceAmigoProfilingFeaturesSEC : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceAmigoProfilingFeaturesSEC;
	public void* pNext;
	public VkBool32 amigoProfiling;

	public VkPhysicalDeviceAmigoProfilingFeaturesSEC()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAmigoProfilingSubmitInfoSEC : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AmigoProfilingSubmitInfoSEC;
	public void* pNext;
	public ulong firstDrawTimestamp;
	public ulong swapBufferTimestamp;

	public VkAmigoProfilingSubmitInfoSEC()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;
	public void* pNext;
	public VkBool32 multiviewPerViewViewports;

	public VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingInvocationReorderPropertiesNV;
	public void* pNext;
	public VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint;

	public VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingInvocationReorderFeaturesNV;
	public void* pNext;
	public VkBool32 rayTracingInvocationReorder;

	public VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCooperativeVectorPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCooperativeVectorPropertiesNV;
	public void* pNext;
	public VkShaderStageFlags cooperativeVectorSupportedStages;
	public VkBool32 cooperativeVectorTrainingFloat16Accumulation;
	public VkBool32 cooperativeVectorTrainingFloat32Accumulation;
	public uint maxCooperativeVectorComponents;

	public VkPhysicalDeviceCooperativeVectorPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCooperativeVectorFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCooperativeVectorFeaturesNV;
	public void* pNext;
	public VkBool32 cooperativeVector;
	public VkBool32 cooperativeVectorTraining;

	public VkPhysicalDeviceCooperativeVectorFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCooperativeVectorPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CooperativeVectorPropertiesNV;
	public void* pNext;
	public VkComponentTypeKHR inputType;
	public VkComponentTypeKHR inputInterpretation;
	public VkComponentTypeKHR matrixInterpretation;
	public VkComponentTypeKHR biasInterpretation;
	public VkComponentTypeKHR resultType;
	public VkBool32 transpose;

	public VkCooperativeVectorPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkConvertCooperativeVectorMatrixInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ConvertCooperativeVectorMatrixInfoNV;
	public void* pNext;
	public ulong srcSize;
	public VkDeviceOrHostAddressConstKHR srcData;
	public ulong* pDstSize;
	public VkDeviceOrHostAddressKHR dstData;
	public VkComponentTypeKHR srcComponentType;
	public VkComponentTypeKHR dstComponentType;
	public uint numRows;
	public uint numColumns;
	public VkCooperativeVectorMatrixLayoutNV srcLayout;
	public ulong srcStride;
	public VkCooperativeVectorMatrixLayoutNV dstLayout;
	public ulong dstStride;

	public VkConvertCooperativeVectorMatrixInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV;
	public void* pNext;
	public VkBool32 extendedSparseAddressSpace;

	public VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExtendedSparseAddressSpacePropertiesNV;
	public void* pNext;
	public ulong extendedSparseAddressSpaceSize;
	public VkImageUsageFlags extendedSparseImageUsageFlags;
	public VkBufferUsageFlags extendedSparseBufferUsageFlags;

	public VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLegacyVertexAttributesFeaturesEXT;
	public void* pNext;
	public VkBool32 legacyVertexAttributes;

	public VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLegacyVertexAttributesPropertiesEXT;
	public void* pNext;
	public VkBool32 nativeUnalignedPerformance;

	public VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkLayerSettingEXT
{
	public byte* pLayerName;
	public byte* pSettingName;
	public VkLayerSettingTypeEXT type;
	public uint valueCount;
	public void* pValues;
}

public unsafe partial struct VkLayerSettingsCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.LayerSettingsCreateInfoEXT;
	public void* pNext;
	public uint settingCount;
	public VkLayerSettingEXT* pSettings;

	public VkLayerSettingsCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderCoreBuiltinsFeaturesARM;
	public void* pNext;
	public VkBool32 shaderCoreBuiltins;

	public VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderCoreBuiltinsPropertiesARM;
	public void* pNext;
	public ulong shaderCoreMask;
	public uint shaderCoreCount;
	public uint shaderWarpsPerCore;

	public VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
	public void* pNext;
	public VkBool32 pipelineLibraryGroupHandles;

	public VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT;
	public void* pNext;
	public VkBool32 dynamicRenderingUnusedAttachments;

	public VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkLatencySleepModeInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.LatencySleepModeInfoNV;
	public void* pNext;
	public VkBool32 lowLatencyMode;
	public VkBool32 lowLatencyBoost;
	public uint minimumIntervalUs;

	public VkLatencySleepModeInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkLatencySleepInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.LatencySleepInfoNV;
	public void* pNext;
	public VkSemaphore signalSemaphore;
	public ulong value;

	public VkLatencySleepInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSetLatencyMarkerInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SetLatencyMarkerInfoNV;
	public void* pNext;
	public ulong presentID;
	public VkLatencyMarkerNV marker;

	public VkSetLatencyMarkerInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkLatencyTimingsFrameReportNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.LatencyTimingsFrameReportNV;
	public void* pNext;
	public ulong presentID;
	public ulong inputSampleTimeUs;
	public ulong simStartTimeUs;
	public ulong simEndTimeUs;
	public ulong renderSubmitStartTimeUs;
	public ulong renderSubmitEndTimeUs;
	public ulong presentStartTimeUs;
	public ulong presentEndTimeUs;
	public ulong driverStartTimeUs;
	public ulong driverEndTimeUs;
	public ulong osRenderQueueStartTimeUs;
	public ulong osRenderQueueEndTimeUs;
	public ulong gpuRenderStartTimeUs;
	public ulong gpuRenderEndTimeUs;

	public VkLatencyTimingsFrameReportNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGetLatencyMarkerInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GetLatencyMarkerInfoNV;
	public void* pNext;
	public uint timingCount;
	public VkLatencyTimingsFrameReportNV* pTimings;

	public VkGetLatencyMarkerInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkLatencySubmissionPresentIdNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.LatencySubmissionPresentIdNV;
	public void* pNext;
	public ulong presentID;

	public VkLatencySubmissionPresentIdNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSwapchainLatencyCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SwapchainLatencyCreateInfoNV;
	public void* pNext;
	public VkBool32 latencyModeEnable;

	public VkSwapchainLatencyCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkOutOfBandQueueTypeInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.OutOfBandQueueTypeInfoNV;
	public void* pNext;
	public VkOutOfBandQueueTypeNV queueType;

	public VkOutOfBandQueueTypeInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkLatencySurfaceCapabilitiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.LatencySurfaceCapabilitiesNV;
	public void* pNext;
	public uint presentModeCount;
	public VkPresentModeKHR* pPresentModes;

	public VkLatencySurfaceCapabilitiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDataGraphFeaturesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDataGraphFeaturesARM;
	public void* pNext;
	public VkBool32 dataGraph;
	public VkBool32 dataGraphUpdateAfterBind;
	public VkBool32 dataGraphSpecializationConstants;
	public VkBool32 dataGraphDescriptorBuffer;
	public VkBool32 dataGraphShaderModule;

	public VkPhysicalDeviceDataGraphFeaturesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineConstantARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineConstantARM;
	public void* pNext;
	public uint id;
	public void* pConstantData;

	public VkDataGraphPipelineConstantARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineResourceInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineResourceInfoARM;
	public void* pNext;
	public uint descriptorSet;
	public uint binding;
	public uint arrayElement;

	public VkDataGraphPipelineResourceInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineCompilerControlCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineCompilerControlCreateInfoARM;
	public void* pNext;
	public byte* pVendorOptions;

	public VkDataGraphPipelineCompilerControlCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineCreateInfoARM;
	public void* pNext;
	public VkPipelineCreateFlags2 flags;
	public VkPipelineLayout layout;
	public uint resourceInfoCount;
	public VkDataGraphPipelineResourceInfoARM* pResourceInfos;

	public VkDataGraphPipelineCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineShaderModuleCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineShaderModuleCreateInfoARM;
	public void* pNext;
	public VkShaderModule module;
	public byte* pName;
	public VkSpecializationInfo* pSpecializationInfo;
	public uint constantCount;
	public VkDataGraphPipelineConstantARM* pConstants;

	public VkDataGraphPipelineShaderModuleCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineSessionCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineSessionCreateInfoARM;
	public void* pNext;
	public VkDataGraphPipelineSessionCreateFlagsARM flags;
	public VkPipeline dataGraphPipeline;

	public VkDataGraphPipelineSessionCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineSessionBindPointRequirementsInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineSessionBindPointRequirementsInfoARM;
	public void* pNext;
	public VkDataGraphPipelineSessionARM session;

	public VkDataGraphPipelineSessionBindPointRequirementsInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineSessionBindPointRequirementARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineSessionBindPointRequirementARM;
	public void* pNext;
	public VkDataGraphPipelineSessionBindPointARM bindPoint;
	public VkDataGraphPipelineSessionBindPointTypeARM bindPointType;
	public uint numObjects;

	public VkDataGraphPipelineSessionBindPointRequirementARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineSessionMemoryRequirementsInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineSessionMemoryRequirementsInfoARM;
	public void* pNext;
	public VkDataGraphPipelineSessionARM session;
	public VkDataGraphPipelineSessionBindPointARM bindPoint;
	public uint objectIndex;

	public VkDataGraphPipelineSessionMemoryRequirementsInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBindDataGraphPipelineSessionMemoryInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BindDataGraphPipelineSessionMemoryInfoARM;
	public void* pNext;
	public VkDataGraphPipelineSessionARM session;
	public VkDataGraphPipelineSessionBindPointARM bindPoint;
	public uint objectIndex;
	public VkDeviceMemory memory;
	public ulong memoryOffset;

	public VkBindDataGraphPipelineSessionMemoryInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineInfoARM;
	public void* pNext;
	public VkPipeline dataGraphPipeline;

	public VkDataGraphPipelineInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelinePropertyQueryResultARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelinePropertyQueryResultARM;
	public void* pNext;
	public VkDataGraphPipelinePropertyARM property;
	public VkBool32 isText;
	public ulong dataSize;
	public void* pData;

	public VkDataGraphPipelinePropertyQueryResultARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineIdentifierCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineIdentifierCreateInfoARM;
	public void* pNext;
	public uint identifierSize;
	public byte* pIdentifier;

	public VkDataGraphPipelineIdentifierCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineDispatchInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineDispatchInfoARM;
	public void* pNext;
	public VkDataGraphPipelineDispatchFlagsARM flags;

	public VkDataGraphPipelineDispatchInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkPhysicalDeviceDataGraphProcessingEngineARM
{
	public VkPhysicalDeviceDataGraphProcessingEngineTypeARM type;
	public VkBool32 isForeign;
}

public unsafe partial struct VkPhysicalDeviceDataGraphOperationSupportARM
{
	public VkPhysicalDeviceDataGraphOperationTypeARM operationType;
	public fixed byte name[128];
	public uint version;
}

public unsafe partial struct VkQueueFamilyDataGraphPropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyDataGraphPropertiesARM;
	public void* pNext;
	public VkPhysicalDeviceDataGraphProcessingEngineARM engine;
	public VkPhysicalDeviceDataGraphOperationSupportARM operation;

	public VkQueueFamilyDataGraphPropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphProcessingEngineCreateInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphProcessingEngineCreateInfoARM;
	public void* pNext;
	public uint processingEngineCount;
	public VkPhysicalDeviceDataGraphProcessingEngineARM* pProcessingEngines;

	public VkDataGraphProcessingEngineCreateInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM;
	public void* pNext;
	public uint queueFamilyIndex;
	public VkPhysicalDeviceDataGraphProcessingEngineTypeARM engineType;

	public VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkQueueFamilyDataGraphProcessingEnginePropertiesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.QueueFamilyDataGraphProcessingEnginePropertiesARM;
	public void* pNext;
	public VkExternalSemaphoreHandleTypeFlags foreignSemaphoreHandleTypes;
	public VkExternalMemoryHandleTypeFlags foreignMemoryHandleTypes;

	public VkQueueFamilyDataGraphProcessingEnginePropertiesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM;
	public void* pNext;
	public uint dimension;
	public uint zeroCount;
	public uint groupSize;

	public VkDataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;
	public void* pNext;
	public VkBool32 multiviewPerViewRenderAreas;

	public VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;
	public void* pNext;
	public uint perViewRenderAreaCount;
	public VkRect2D* pPerViewRenderAreas;

	public VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePerStageDescriptorSetFeaturesNV;
	public void* pNext;
	public VkBool32 perStageDescriptorSet;
	public VkBool32 dynamicPipelineLayout;

	public VkPhysicalDevicePerStageDescriptorSetFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageProcessing2FeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageProcessing2FeaturesQCOM;
	public void* pNext;
	public VkBool32 textureBlockMatch2;

	public VkPhysicalDeviceImageProcessing2FeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageProcessing2PropertiesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageProcessing2PropertiesQCOM;
	public void* pNext;
	public VkExtent2D maxBlockMatchWindow;

	public VkPhysicalDeviceImageProcessing2PropertiesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerBlockMatchWindowCreateInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerBlockMatchWindowCreateInfoQCOM;
	public void* pNext;
	public VkExtent2D windowExtent;
	public VkBlockMatchWindowCompareModeQCOM windowCompareMode;

	public VkSamplerBlockMatchWindowCreateInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCubicWeightsFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCubicWeightsFeaturesQCOM;
	public void* pNext;
	public VkBool32 selectableCubicWeights;

	public VkPhysicalDeviceCubicWeightsFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerCubicWeightsCreateInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerCubicWeightsCreateInfoQCOM;
	public void* pNext;
	public VkCubicFilterWeightsQCOM cubicWeights;

	public VkSamplerCubicWeightsCreateInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBlitImageCubicWeightsInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BlitImageCubicWeightsInfoQCOM;
	public void* pNext;
	public VkCubicFilterWeightsQCOM cubicWeights;

	public VkBlitImageCubicWeightsInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceYcbcrDegammaFeaturesQCOM;
	public void* pNext;
	public VkBool32 ycbcrDegamma;

	public VkPhysicalDeviceYcbcrDegammaFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM;
	public void* pNext;
	public VkBool32 enableYDegamma;
	public VkBool32 enableCbCrDegamma;

	public VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCubicClampFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCubicClampFeaturesQCOM;
	public void* pNext;
	public VkBool32 cubicRangeClamp;

	public VkPhysicalDeviceCubicClampFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT;
	public void* pNext;
	public VkBool32 attachmentFeedbackLoopDynamicState;

	public VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceLayeredDriverPropertiesMSFT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceLayeredDriverPropertiesMSFT;
	public void* pNext;
	public VkLayeredDriverUnderlyingApiMSFT underlyingAPI;

	public VkPhysicalDeviceLayeredDriverPropertiesMSFT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDescriptorPoolOverallocationFeaturesNV;
	public void* pNext;
	public VkBool32 descriptorPoolOverallocation;

	public VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTileMemoryHeapFeaturesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTileMemoryHeapFeaturesQCOM;
	public void* pNext;
	public VkBool32 tileMemoryHeap;

	public VkPhysicalDeviceTileMemoryHeapFeaturesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceTileMemoryHeapPropertiesQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceTileMemoryHeapPropertiesQCOM;
	public void* pNext;
	public VkBool32 queueSubmitBoundary;
	public VkBool32 tileBufferTransfers;

	public VkPhysicalDeviceTileMemoryHeapPropertiesQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTileMemoryRequirementsQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TileMemoryRequirementsQCOM;
	public void* pNext;
	public ulong size;
	public ulong alignment;

	public VkTileMemoryRequirementsQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTileMemoryBindInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TileMemoryBindInfoQCOM;
	public void* pNext;
	public VkDeviceMemory memory;

	public VkTileMemoryBindInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkTileMemorySizeInfoQCOM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.TileMemorySizeInfoQCOM;
	public void* pNext;
	public ulong size;

	public VkTileMemorySizeInfoQCOM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplaySurfaceStereoCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplaySurfaceStereoCreateInfoNV;
	public void* pNext;
	public VkDisplaySurfaceStereoTypeNV stereoType;

	public VkDisplaySurfaceStereoCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkDisplayModeStereoPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.DisplayModeStereoPropertiesNV;
	public void* pNext;
	public VkBool32 hdmi3DSupported;

	public VkDisplayModeStereoPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRawAccessChainsFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRawAccessChainsFeaturesNV;
	public void* pNext;
	public VkBool32 shaderRawAccessChains;

	public VkPhysicalDeviceRawAccessChainsFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalComputeQueueDeviceCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalComputeQueueDeviceCreateInfoNV;
	public void* pNext;
	public uint reservedExternalQueues;

	public VkExternalComputeQueueDeviceCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalComputeQueueCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalComputeQueueCreateInfoNV;
	public void* pNext;
	public VkQueue preferredQueue;

	public VkExternalComputeQueueCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalComputeQueueDataParamsNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalComputeQueueDataParamsNV;
	public void* pNext;
	public uint deviceIndex;

	public VkExternalComputeQueueDataParamsNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalComputeQueuePropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalComputeQueuePropertiesNV;
	public void* pNext;
	public uint externalDataSize;
	public uint maxExternalQueues;

	public VkPhysicalDeviceExternalComputeQueuePropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCommandBufferInheritanceFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCommandBufferInheritanceFeaturesNV;
	public void* pNext;
	public VkBool32 commandBufferInheritance;

	public VkPhysicalDeviceCommandBufferInheritanceFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV;
	public void* pNext;
	public VkBool32 shaderFloat16VectorAtomics;

	public VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderReplicatedCompositesFeaturesEXT;
	public void* pNext;
	public VkBool32 shaderReplicatedComposites;

	public VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderFloat8FeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderFloat8FeaturesEXT;
	public void* pNext;
	public VkBool32 shaderFloat8;
	public VkBool32 shaderFloat8CooperativeMatrix;

	public VkPhysicalDeviceShaderFloat8FeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRayTracingValidationFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingValidationFeaturesNV;
	public void* pNext;
	public VkBool32 rayTracingValidation;

	public VkPhysicalDeviceRayTracingValidationFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceClusterAccelerationStructureFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceClusterAccelerationStructureFeaturesNV;
	public void* pNext;
	public VkBool32 clusterAccelerationStructure;

	public VkPhysicalDeviceClusterAccelerationStructureFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceClusterAccelerationStructurePropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceClusterAccelerationStructurePropertiesNV;
	public void* pNext;
	public uint maxVerticesPerCluster;
	public uint maxTrianglesPerCluster;
	public uint clusterScratchByteAlignment;
	public uint clusterByteAlignment;
	public uint clusterTemplateByteAlignment;
	public uint clusterBottomLevelByteAlignment;
	public uint clusterTemplateBoundsByteAlignment;
	public uint maxClusterGeometryIndex;

	public VkPhysicalDeviceClusterAccelerationStructurePropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkClusterAccelerationStructureClustersBottomLevelInputNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ClusterAccelerationStructureClustersBottomLevelInputNV;
	public void* pNext;
	public uint maxTotalClusterCount;
	public uint maxClusterCountPerAccelerationStructure;

	public VkClusterAccelerationStructureClustersBottomLevelInputNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkClusterAccelerationStructureTriangleClusterInputNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ClusterAccelerationStructureTriangleClusterInputNV;
	public void* pNext;
	public VkFormat vertexFormat;
	public uint maxGeometryIndexValue;
	public uint maxClusterUniqueGeometryCount;
	public uint maxClusterTriangleCount;
	public uint maxClusterVertexCount;
	public uint maxTotalTriangleCount;
	public uint maxTotalVertexCount;
	public uint minPositionTruncateBitCount;

	public VkClusterAccelerationStructureTriangleClusterInputNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkClusterAccelerationStructureMoveObjectsInputNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ClusterAccelerationStructureMoveObjectsInputNV;
	public void* pNext;
	public VkClusterAccelerationStructureTypeNV type;
	public VkBool32 noMoveOverlap;
	public ulong maxMovedBytes;

	public VkClusterAccelerationStructureMoveObjectsInputNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct VkClusterAccelerationStructureOpInputNV
{
	[FieldOffset(0)]
	public VkClusterAccelerationStructureClustersBottomLevelInputNV* pClustersBottomLevel;
	[FieldOffset(0)]
	public VkClusterAccelerationStructureTriangleClusterInputNV* pTriangleClusters;
	[FieldOffset(0)]
	public VkClusterAccelerationStructureMoveObjectsInputNV* pMoveObjects;
}

public unsafe partial struct VkClusterAccelerationStructureInputInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ClusterAccelerationStructureInputInfoNV;
	public void* pNext;
	public uint maxAccelerationStructureCount;
	public VkBuildAccelerationStructureFlagsKHR flags;
	public VkClusterAccelerationStructureOpTypeNV opType;
	public VkClusterAccelerationStructureOpModeNV opMode;
	public VkClusterAccelerationStructureOpInputNV opInput;

	public VkClusterAccelerationStructureInputInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkStridedDeviceAddressRegionKHR
{
	public ulong deviceAddress;
	public ulong stride;
	public ulong size;
}

public unsafe partial struct VkClusterAccelerationStructureCommandsInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ClusterAccelerationStructureCommandsInfoNV;
	public void* pNext;
	public VkClusterAccelerationStructureInputInfoNV input;
	public ulong dstImplicitData;
	public ulong scratchData;
	public VkStridedDeviceAddressRegionKHR dstAddressesArray;
	public VkStridedDeviceAddressRegionKHR dstSizesArray;
	public VkStridedDeviceAddressRegionKHR srcInfosArray;
	public ulong srcInfosCount;
	public VkClusterAccelerationStructureAddressResolutionFlagsNV addressResolutionFlags;

	public VkClusterAccelerationStructureCommandsInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkStridedDeviceAddressNV
{
	public ulong startAddress;
	public ulong strideInBytes;
}

public partial struct VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV
{
	public uint geometryIndex;
	public uint reserved;
	public uint geometryFlags;
}

public partial struct VkClusterAccelerationStructureMoveObjectsInfoNV
{
	public ulong srcAccelerationStructure;
}

public partial struct VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV
{
	public uint clusterReferencesCount;
	public uint clusterReferencesStride;
	public ulong clusterReferences;
}

public partial struct VkClusterAccelerationStructureBuildTriangleClusterInfoNV
{
	public uint clusterID;
	public VkClusterAccelerationStructureClusterFlagsNV clusterFlags;
	public uint triangleCount;
	public uint vertexCount;
	public uint positionTruncateBitCount;
	public uint indexType;
	public uint opacityMicromapIndexType;
	public VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV baseGeometryIndexAndGeometryFlags;
	public ushort indexBufferStride;
	public ushort vertexBufferStride;
	public ushort geometryIndexAndFlagsBufferStride;
	public ushort opacityMicromapIndexBufferStride;
	public ulong indexBuffer;
	public ulong vertexBuffer;
	public ulong geometryIndexAndFlagsBuffer;
	public ulong opacityMicromapArray;
	public ulong opacityMicromapIndexBuffer;
}

public partial struct VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV
{
	public uint clusterID;
	public VkClusterAccelerationStructureClusterFlagsNV clusterFlags;
	public uint triangleCount;
	public uint vertexCount;
	public uint positionTruncateBitCount;
	public uint indexType;
	public uint opacityMicromapIndexType;
	public VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV baseGeometryIndexAndGeometryFlags;
	public ushort indexBufferStride;
	public ushort vertexBufferStride;
	public ushort geometryIndexAndFlagsBufferStride;
	public ushort opacityMicromapIndexBufferStride;
	public ulong indexBuffer;
	public ulong vertexBuffer;
	public ulong geometryIndexAndFlagsBuffer;
	public ulong opacityMicromapArray;
	public ulong opacityMicromapIndexBuffer;
	public ulong instantiationBoundingBoxLimit;
}

public partial struct VkClusterAccelerationStructureInstantiateClusterInfoNV
{
	public uint clusterIdOffset;
	public uint geometryIndexOffset;
	public uint reserved;
	public ulong clusterTemplateAddress;
	public VkStridedDeviceAddressNV vertexBuffer;
}

public partial struct VkClusterAccelerationStructureGetTemplateIndicesInfoNV
{
	public ulong clusterTemplateAddress;
}

public unsafe partial struct VkAccelerationStructureBuildSizesInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureBuildSizesInfoKHR;
	public void* pNext;
	public ulong accelerationStructureSize;
	public ulong updateScratchSize;
	public ulong buildScratchSize;

	public VkAccelerationStructureBuildSizesInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RayTracingPipelineClusterAccelerationStructureCreateInfoNV;
	public void* pNext;
	public VkBool32 allowClusterAccelerationStructure;

	public VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePartitionedAccelerationStructureFeaturesNV;
	public void* pNext;
	public VkBool32 partitionedAccelerationStructure;

	public VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePartitionedAccelerationStructurePropertiesNV;
	public void* pNext;
	public uint maxPartitionCount;

	public VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPartitionedAccelerationStructureFlagsNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PartitionedAccelerationStructureFlagsNV;
	public void* pNext;
	public VkBool32 enablePartitionTranslation;

	public VkPartitionedAccelerationStructureFlagsNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkBuildPartitionedAccelerationStructureIndirectCommandNV
{
	public VkPartitionedAccelerationStructureOpTypeNV opType;
	public uint argCount;
	public VkStridedDeviceAddressNV argData;
}

public unsafe partial struct VkPartitionedAccelerationStructureWriteInstanceDataNV
{
	public VkTransformMatrixKHR transform;
	public fixed float explicitAABB[6];
	public uint instanceID;
	public uint instanceMask;
	public uint instanceContributionToHitGroupIndex;
	public VkPartitionedAccelerationStructureInstanceFlagsNV instanceFlags;
	public uint instanceIndex;
	public uint partitionIndex;
	public ulong accelerationStructure;
}

public partial struct VkPartitionedAccelerationStructureUpdateInstanceDataNV
{
	public uint instanceIndex;
	public uint instanceContributionToHitGroupIndex;
	public ulong accelerationStructure;
}

public unsafe partial struct VkPartitionedAccelerationStructureWritePartitionTranslationDataNV
{
	public uint partitionIndex;
	public fixed float partitionTranslation[3];
}

public unsafe partial struct VkWriteDescriptorSetPartitionedAccelerationStructureNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WriteDescriptorSetPartitionedAccelerationStructureNV;
	public void* pNext;
	public uint accelerationStructureCount;
	public ulong* pAccelerationStructures;

	public VkWriteDescriptorSetPartitionedAccelerationStructureNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPartitionedAccelerationStructureInstancesInputNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PartitionedAccelerationStructureInstancesInputNV;
	public void* pNext;
	public VkBuildAccelerationStructureFlagsKHR flags;
	public uint instanceCount;
	public uint maxInstancePerPartitionCount;
	public uint partitionCount;
	public uint maxInstanceInGlobalPartitionCount;

	public VkPartitionedAccelerationStructureInstancesInputNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkBuildPartitionedAccelerationStructureInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.BuildPartitionedAccelerationStructureInfoNV;
	public void* pNext;
	public VkPartitionedAccelerationStructureInstancesInputNV input;
	public ulong srcAccelerationStructureData;
	public ulong dstAccelerationStructureData;
	public ulong scratchData;
	public ulong srcInfos;
	public ulong srcInfosCount;

	public VkBuildPartitionedAccelerationStructureInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsFeaturesEXT;
	public void* pNext;
	public VkBool32 deviceGeneratedCommands;
	public VkBool32 dynamicGeneratedPipelineLayout;

	public VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsPropertiesEXT;
	public void* pNext;
	public uint maxIndirectPipelineCount;
	public uint maxIndirectShaderObjectCount;
	public uint maxIndirectSequenceCount;
	public uint maxIndirectCommandsTokenCount;
	public uint maxIndirectCommandsTokenOffset;
	public uint maxIndirectCommandsIndirectStride;
	public VkIndirectCommandsInputModeFlagsEXT supportedIndirectCommandsInputModes;
	public VkShaderStageFlags supportedIndirectCommandsShaderStages;
	public VkShaderStageFlags supportedIndirectCommandsShaderStagesPipelineBinding;
	public VkShaderStageFlags supportedIndirectCommandsShaderStagesShaderBinding;
	public VkBool32 deviceGeneratedCommandsTransformFeedback;
	public VkBool32 deviceGeneratedCommandsMultiDrawIndirectCount;

	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGeneratedCommandsMemoryRequirementsInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeneratedCommandsMemoryRequirementsInfoEXT;
	public void* pNext;
	public VkIndirectExecutionSetEXT indirectExecutionSet;
	public VkIndirectCommandsLayoutEXT indirectCommandsLayout;
	public uint maxSequenceCount;
	public uint maxDrawCount;

	public VkGeneratedCommandsMemoryRequirementsInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkIndirectExecutionSetPipelineInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.IndirectExecutionSetPipelineInfoEXT;
	public void* pNext;
	public VkPipeline initialPipeline;
	public uint maxPipelineCount;

	public VkIndirectExecutionSetPipelineInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkIndirectExecutionSetShaderLayoutInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.IndirectExecutionSetShaderLayoutInfoEXT;
	public void* pNext;
	public uint setLayoutCount;
	public VkDescriptorSetLayout* pSetLayouts;

	public VkIndirectExecutionSetShaderLayoutInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkIndirectExecutionSetShaderInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.IndirectExecutionSetShaderInfoEXT;
	public void* pNext;
	public uint shaderCount;
	public VkShaderEXT* pInitialShaders;
	public VkIndirectExecutionSetShaderLayoutInfoEXT* pSetLayoutInfos;
	public uint maxShaderCount;
	public uint pushConstantRangeCount;
	public VkPushConstantRange* pPushConstantRanges;

	public VkIndirectExecutionSetShaderInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct VkIndirectExecutionSetInfoEXT
{
	[FieldOffset(0)]
	public VkIndirectExecutionSetPipelineInfoEXT* pPipelineInfo;
	[FieldOffset(0)]
	public VkIndirectExecutionSetShaderInfoEXT* pShaderInfo;
}

public unsafe partial struct VkIndirectExecutionSetCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.IndirectExecutionSetCreateInfoEXT;
	public void* pNext;
	public VkIndirectExecutionSetInfoTypeEXT type;
	public VkIndirectExecutionSetInfoEXT info;

	public VkIndirectExecutionSetCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGeneratedCommandsInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeneratedCommandsInfoEXT;
	public void* pNext;
	public VkShaderStageFlags shaderStages;
	public VkIndirectExecutionSetEXT indirectExecutionSet;
	public VkIndirectCommandsLayoutEXT indirectCommandsLayout;
	public ulong indirectAddress;
	public ulong indirectAddressSize;
	public ulong preprocessAddress;
	public ulong preprocessSize;
	public uint maxSequenceCount;
	public ulong sequenceCountAddress;
	public uint maxDrawCount;

	public VkGeneratedCommandsInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWriteIndirectExecutionSetPipelineEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WriteIndirectExecutionSetPipelineEXT;
	public void* pNext;
	public uint index;
	public VkPipeline pipeline;

	public VkWriteIndirectExecutionSetPipelineEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkIndirectCommandsPushConstantTokenEXT
{
	public VkPushConstantRange updateRange;
}

public partial struct VkIndirectCommandsVertexBufferTokenEXT
{
	public uint vertexBindingUnit;
}

public partial struct VkIndirectCommandsIndexBufferTokenEXT
{
	public VkIndirectCommandsInputModeFlagsEXT mode;
}

public partial struct VkIndirectCommandsExecutionSetTokenEXT
{
	public VkIndirectExecutionSetInfoTypeEXT type;
	public VkShaderStageFlags shaderStages;
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct VkIndirectCommandsTokenDataEXT
{
	[FieldOffset(0)]
	public VkIndirectCommandsPushConstantTokenEXT* pPushConstant;
	[FieldOffset(0)]
	public VkIndirectCommandsVertexBufferTokenEXT* pVertexBuffer;
	[FieldOffset(0)]
	public VkIndirectCommandsIndexBufferTokenEXT* pIndexBuffer;
	[FieldOffset(0)]
	public VkIndirectCommandsExecutionSetTokenEXT* pExecutionSet;
}

public unsafe partial struct VkIndirectCommandsLayoutTokenEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.IndirectCommandsLayoutTokenEXT;
	public void* pNext;
	public VkIndirectCommandsTokenTypeEXT type;
	public VkIndirectCommandsTokenDataEXT data;
	public uint offset;

	public VkIndirectCommandsLayoutTokenEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkIndirectCommandsLayoutCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.IndirectCommandsLayoutCreateInfoEXT;
	public void* pNext;
	public VkIndirectCommandsLayoutUsageFlagsEXT flags;
	public VkShaderStageFlags shaderStages;
	public uint indirectStride;
	public VkPipelineLayout pipelineLayout;
	public uint tokenCount;
	public VkIndirectCommandsLayoutTokenEXT* pTokens;

	public VkIndirectCommandsLayoutCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDrawIndirectCountIndirectCommandEXT
{
	public ulong bufferAddress;
	public uint stride;
	public uint commandCount;
}

public partial struct VkBindVertexBufferIndirectCommandEXT
{
	public ulong bufferAddress;
	public uint size;
	public uint stride;
}

public partial struct VkBindIndexBufferIndirectCommandEXT
{
	public ulong bufferAddress;
	public uint size;
	public VkIndexType indexType;
}

public unsafe partial struct VkGeneratedCommandsPipelineInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeneratedCommandsPipelineInfoEXT;
	public void* pNext;
	public VkPipeline pipeline;

	public VkGeneratedCommandsPipelineInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkGeneratedCommandsShaderInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.GeneratedCommandsShaderInfoEXT;
	public void* pNext;
	public uint shaderCount;
	public VkShaderEXT* pShaders;

	public VkGeneratedCommandsShaderInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWriteIndirectExecutionSetShaderEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WriteIndirectExecutionSetShaderEXT;
	public void* pNext;
	public uint index;
	public VkShaderEXT shader;

	public VkWriteIndirectExecutionSetShaderEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageAlignmentControlFeaturesMESA : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageAlignmentControlFeaturesMESA;
	public void* pNext;
	public VkBool32 imageAlignmentControl;

	public VkPhysicalDeviceImageAlignmentControlFeaturesMESA()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceImageAlignmentControlPropertiesMESA : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceImageAlignmentControlPropertiesMESA;
	public void* pNext;
	public uint supportedImageAlignmentMask;

	public VkPhysicalDeviceImageAlignmentControlPropertiesMESA()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImageAlignmentControlCreateInfoMESA : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImageAlignmentControlCreateInfoMESA;
	public void* pNext;
	public uint maximumRequestedAlignment;

	public VkImageAlignmentControlCreateInfoMESA()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDepthClampControlFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDepthClampControlFeaturesEXT;
	public void* pNext;
	public VkBool32 depthClampControl;

	public VkPhysicalDeviceDepthClampControlFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineViewportDepthClampControlCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineViewportDepthClampControlCreateInfoEXT;
	public void* pNext;
	public VkDepthClampModeEXT depthClampMode;
	public VkDepthClampRangeEXT* pDepthClampRange;

	public VkPipelineViewportDepthClampControlCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceHdrVividFeaturesHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceHdrVividFeaturesHUAWEI;
	public void* pNext;
	public VkBool32 hdrVivid;

	public VkPhysicalDeviceHdrVividFeaturesHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkHdrVividDynamicMetadataHUAWEI : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.HdrVividDynamicMetadataHUAWEI;
	public void* pNext;
	public ulong dynamicMetadataSize;
	public void* pDynamicMetadata;

	public VkHdrVividDynamicMetadataHUAWEI()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCooperativeMatrixFlexibleDimensionsPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CooperativeMatrixFlexibleDimensionsPropertiesNV;
	public void* pNext;
	public uint MGranularity;
	public uint NGranularity;
	public uint KGranularity;
	public VkComponentTypeKHR AType;
	public VkComponentTypeKHR BType;
	public VkComponentTypeKHR CType;
	public VkComponentTypeKHR ResultType;
	public VkBool32 saturatingAccumulation;
	public VkScopeKHR scope;
	public uint workgroupInvocations;

	public VkCooperativeMatrixFlexibleDimensionsPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCooperativeMatrix2FeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCooperativeMatrix2FeaturesNV;
	public void* pNext;
	public VkBool32 cooperativeMatrixWorkgroupScope;
	public VkBool32 cooperativeMatrixFlexibleDimensions;
	public VkBool32 cooperativeMatrixReductions;
	public VkBool32 cooperativeMatrixConversions;
	public VkBool32 cooperativeMatrixPerElementOperations;
	public VkBool32 cooperativeMatrixTensorAddressing;
	public VkBool32 cooperativeMatrixBlockLoads;

	public VkPhysicalDeviceCooperativeMatrix2FeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCooperativeMatrix2PropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCooperativeMatrix2PropertiesNV;
	public void* pNext;
	public uint cooperativeMatrixWorkgroupScopeMaxWorkgroupSize;
	public uint cooperativeMatrixFlexibleDimensionsMaxDimension;
	public uint cooperativeMatrixWorkgroupScopeReservedSharedMemory;

	public VkPhysicalDeviceCooperativeMatrix2PropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineOpacityMicromapFeaturesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineOpacityMicromapFeaturesARM;
	public void* pNext;
	public VkBool32 pipelineOpacityMicromap;

	public VkPhysicalDevicePipelineOpacityMicromapFeaturesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceVertexAttributeRobustnessFeaturesEXT;
	public void* pNext;
	public VkBool32 vertexAttributeRobustness;

	public VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFormatPackFeaturesARM : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFormatPackFeaturesARM;
	public void* pNext;
	public VkBool32 formatPack;

	public VkPhysicalDeviceFormatPackFeaturesARM()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE;
	public void* pNext;
	public VkBool32 fragmentDensityMapLayered;

	public VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE;
	public void* pNext;
	public uint maxFragmentDensityMapLayers;

	public VkPhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPipelineFragmentDensityMapLayeredCreateInfoVALVE : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineFragmentDensityMapLayeredCreateInfoVALVE;
	public void* pNext;
	public uint maxFragmentDensityMapLayers;

	public VkPipelineFragmentDensityMapLayeredCreateInfoVALVE()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSetPresentConfigNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SetPresentConfigNV;
	public void* pNext;
	public uint numFramesPerBatch;
	public uint presentConfigFeedback;

	public VkSetPresentConfigNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePresentMeteringFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePresentMeteringFeaturesNV;
	public void* pNext;
	public VkBool32 presentMetering;

	public VkPhysicalDevicePresentMeteringFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRenderingEndInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RenderingEndInfoEXT;
	public void* pNext;

	public VkRenderingEndInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT;
	public void* pNext;
	public VkBool32 zeroInitializeDeviceMemory;

	public VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePipelineCacheIncrementalModeFeaturesSEC;
	public void* pNext;
	public VkBool32 pipelineCacheIncrementalMode;

	public VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkAccelerationStructureBuildRangeInfoKHR
{
	public uint primitiveCount;
	public uint primitiveOffset;
	public uint firstVertex;
	public uint transformOffset;
}

public unsafe partial struct VkAccelerationStructureGeometryTrianglesDataKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureGeometryTrianglesDataKHR;
	public void* pNext;
	public VkFormat vertexFormat;
	public VkDeviceOrHostAddressConstKHR vertexData;
	public ulong vertexStride;
	public uint maxVertex;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexData;
	public VkDeviceOrHostAddressConstKHR transformData;

	public VkAccelerationStructureGeometryTrianglesDataKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureGeometryAabbsDataKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureGeometryAabbsDataKHR;
	public void* pNext;
	public VkDeviceOrHostAddressConstKHR data;
	public ulong stride;

	public VkAccelerationStructureGeometryAabbsDataKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureGeometryInstancesDataKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureGeometryInstancesDataKHR;
	public void* pNext;
	public VkBool32 arrayOfPointers;
	public VkDeviceOrHostAddressConstKHR data;

	public VkAccelerationStructureGeometryInstancesDataKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkAccelerationStructureGeometryDataKHR
{
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryTrianglesDataKHR triangles;
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryAabbsDataKHR aabbs;
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryInstancesDataKHR instances;
}

public unsafe partial struct VkAccelerationStructureGeometryKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureGeometryKHR;
	public void* pNext;
	public VkGeometryTypeKHR geometryType;
	public VkAccelerationStructureGeometryDataKHR geometry;
	public VkGeometryFlagsKHR flags;

	public VkAccelerationStructureGeometryKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureBuildGeometryInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureBuildGeometryInfoKHR;
	public void* pNext;
	public VkAccelerationStructureTypeKHR type;
	public VkBuildAccelerationStructureFlagsKHR flags;
	public VkBuildAccelerationStructureModeKHR mode;
	public VkAccelerationStructureKHR srcAccelerationStructure;
	public VkAccelerationStructureKHR dstAccelerationStructure;
	public uint geometryCount;
	public VkAccelerationStructureGeometryKHR* pGeometries;
	public VkAccelerationStructureGeometryKHR** ppGeometries;
	public VkDeviceOrHostAddressKHR scratchData;

	public VkAccelerationStructureBuildGeometryInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureCreateInfoKHR;
	public void* pNext;
	public VkAccelerationStructureCreateFlagsKHR createFlags;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;
	public VkAccelerationStructureTypeKHR type;
	public ulong deviceAddress;

	public VkAccelerationStructureCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWriteDescriptorSetAccelerationStructureKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WriteDescriptorSetAccelerationStructureKHR;
	public void* pNext;
	public uint accelerationStructureCount;
	public VkAccelerationStructureKHR* pAccelerationStructures;

	public VkWriteDescriptorSetAccelerationStructureKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceAccelerationStructureFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceAccelerationStructureFeaturesKHR;
	public void* pNext;
	public VkBool32 accelerationStructure;
	public VkBool32 accelerationStructureCaptureReplay;
	public VkBool32 accelerationStructureIndirectBuild;
	public VkBool32 accelerationStructureHostCommands;
	public VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind;

	public VkPhysicalDeviceAccelerationStructureFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceAccelerationStructurePropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceAccelerationStructurePropertiesKHR;
	public void* pNext;
	public ulong maxGeometryCount;
	public ulong maxInstanceCount;
	public ulong maxPrimitiveCount;
	public uint maxPerStageDescriptorAccelerationStructures;
	public uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
	public uint maxDescriptorSetAccelerationStructures;
	public uint maxDescriptorSetUpdateAfterBindAccelerationStructures;
	public uint minAccelerationStructureScratchOffsetAlignment;

	public VkPhysicalDeviceAccelerationStructurePropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureDeviceAddressInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureDeviceAddressInfoKHR;
	public void* pNext;
	public VkAccelerationStructureKHR accelerationStructure;

	public VkAccelerationStructureDeviceAddressInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureVersionInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureVersionInfoKHR;
	public void* pNext;
	public byte* pVersionData;

	public VkAccelerationStructureVersionInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyAccelerationStructureToMemoryInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyAccelerationStructureToMemoryInfoKHR;
	public void* pNext;
	public VkAccelerationStructureKHR src;
	public VkDeviceOrHostAddressKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;

	public VkCopyAccelerationStructureToMemoryInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyMemoryToAccelerationStructureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyMemoryToAccelerationStructureInfoKHR;
	public void* pNext;
	public VkDeviceOrHostAddressConstKHR src;
	public VkAccelerationStructureKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;

	public VkCopyMemoryToAccelerationStructureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCopyAccelerationStructureInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CopyAccelerationStructureInfoKHR;
	public void* pNext;
	public VkAccelerationStructureKHR src;
	public VkAccelerationStructureKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;

	public VkCopyAccelerationStructureInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRayTracingShaderGroupCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RayTracingShaderGroupCreateInfoKHR;
	public void* pNext;
	public VkRayTracingShaderGroupTypeKHR type;
	public uint generalShader;
	public uint closestHitShader;
	public uint anyHitShader;
	public uint intersectionShader;
	public void* pShaderGroupCaptureReplayHandle;

	public VkRayTracingShaderGroupCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRayTracingPipelineInterfaceCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RayTracingPipelineInterfaceCreateInfoKHR;
	public void* pNext;
	public uint maxPipelineRayPayloadSize;
	public uint maxPipelineRayHitAttributeSize;

	public VkRayTracingPipelineInterfaceCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkRayTracingPipelineCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.RayTracingPipelineCreateInfoKHR;
	public void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public VkPipelineShaderStageCreateInfo* pStages;
	public uint groupCount;
	public VkRayTracingShaderGroupCreateInfoKHR* pGroups;
	public uint maxPipelineRayRecursionDepth;
	public VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
	public VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface;
	public VkPipelineDynamicStateCreateInfo* pDynamicState;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public VkRayTracingPipelineCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingPipelineFeaturesKHR;
	public void* pNext;
	public VkBool32 rayTracingPipeline;
	public VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay;
	public VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
	public VkBool32 rayTracingPipelineTraceRaysIndirect;
	public VkBool32 rayTraversalPrimitiveCulling;

	public VkPhysicalDeviceRayTracingPipelineFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayTracingPipelinePropertiesKHR;
	public void* pNext;
	public uint shaderGroupHandleSize;
	public uint maxRayRecursionDepth;
	public uint maxShaderGroupStride;
	public uint shaderGroupBaseAlignment;
	public uint shaderGroupHandleCaptureReplaySize;
	public uint maxRayDispatchInvocationCount;
	public uint shaderGroupHandleAlignment;
	public uint maxRayHitAttributeSize;

	public VkPhysicalDeviceRayTracingPipelinePropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkTraceRaysIndirectCommandKHR
{
	public uint width;
	public uint height;
	public uint depth;
}

public unsafe partial struct VkPhysicalDeviceRayQueryFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceRayQueryFeaturesKHR;
	public void* pNext;
	public VkBool32 rayQuery;

	public VkPhysicalDeviceRayQueryFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMeshShaderFeaturesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMeshShaderFeaturesEXT;
	public void* pNext;
	public VkBool32 taskShader;
	public VkBool32 meshShader;
	public VkBool32 multiviewMeshShader;
	public VkBool32 primitiveFragmentShadingRateMeshShader;
	public VkBool32 meshShaderQueries;

	public VkPhysicalDeviceMeshShaderFeaturesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceMeshShaderPropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceMeshShaderPropertiesEXT;
	public void* pNext;
	public uint maxTaskWorkGroupTotalCount;
	public fixed uint maxTaskWorkGroupCount[3];
	public uint maxTaskWorkGroupInvocations;
	public fixed uint maxTaskWorkGroupSize[3];
	public uint maxTaskPayloadSize;
	public uint maxTaskSharedMemorySize;
	public uint maxTaskPayloadAndSharedMemorySize;
	public uint maxMeshWorkGroupTotalCount;
	public fixed uint maxMeshWorkGroupCount[3];
	public uint maxMeshWorkGroupInvocations;
	public fixed uint maxMeshWorkGroupSize[3];
	public uint maxMeshSharedMemorySize;
	public uint maxMeshPayloadAndSharedMemorySize;
	public uint maxMeshOutputMemorySize;
	public uint maxMeshPayloadAndOutputMemorySize;
	public uint maxMeshOutputComponents;
	public uint maxMeshOutputVertices;
	public uint maxMeshOutputPrimitives;
	public uint maxMeshOutputLayers;
	public uint maxMeshMultiviewViewCount;
	public uint meshOutputPerVertexGranularity;
	public uint meshOutputPerPrimitiveGranularity;
	public uint maxPreferredTaskWorkGroupInvocations;
	public uint maxPreferredMeshWorkGroupInvocations;
	public VkBool32 prefersLocalInvocationVertexOutput;
	public VkBool32 prefersLocalInvocationPrimitiveOutput;
	public VkBool32 prefersCompactVertexOutput;
	public VkBool32 prefersCompactPrimitiveOutput;

	public VkPhysicalDeviceMeshShaderPropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public partial struct VkDrawMeshTasksIndirectCommandEXT
{
	public uint groupCountX;
	public uint groupCountY;
	public uint groupCountZ;
}

public unsafe partial struct VkAndroidSurfaceCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AndroidSurfaceCreateInfoKHR;
	public void* pNext;
	public VkAndroidSurfaceCreateFlagsKHR flags;
	public nint window;

	public VkAndroidSurfaceCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAndroidHardwareBufferUsageANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AndroidHardwareBufferUsageAndroid;
	public void* pNext;
	public ulong androidHardwareBufferUsage;

	public VkAndroidHardwareBufferUsageANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAndroidHardwareBufferPropertiesANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AndroidHardwareBufferPropertiesAndroid;
	public void* pNext;
	public ulong allocationSize;
	public uint memoryTypeBits;

	public VkAndroidHardwareBufferPropertiesANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAndroidHardwareBufferFormatPropertiesANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AndroidHardwareBufferFormatPropertiesAndroid;
	public void* pNext;
	public VkFormat format;
	public ulong externalFormat;
	public VkFormatFeatureFlags formatFeatures;
	public VkComponentMapping samplerYcbcrConversionComponents;
	public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	public VkSamplerYcbcrRange suggestedYcbcrRange;
	public VkChromaLocation suggestedXChromaOffset;
	public VkChromaLocation suggestedYChromaOffset;

	public VkAndroidHardwareBufferFormatPropertiesANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportAndroidHardwareBufferInfoANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportAndroidHardwareBufferInfoAndroid;
	public void* pNext;
	public nint buffer;

	public VkImportAndroidHardwareBufferInfoANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryGetAndroidHardwareBufferInfoANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryGetAndroidHardwareBufferInfoAndroid;
	public void* pNext;
	public VkDeviceMemory memory;

	public VkMemoryGetAndroidHardwareBufferInfoANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExternalFormatANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExternalFormatAndroid;
	public void* pNext;
	public ulong externalFormat;

	public VkExternalFormatANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAndroidHardwareBufferFormatProperties2ANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AndroidHardwareBufferFormatProperties2Android;
	public void* pNext;
	public VkFormat format;
	public ulong externalFormat;
	public VkFormatFeatureFlags2 formatFeatures;
	public VkComponentMapping samplerYcbcrConversionComponents;
	public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	public VkSamplerYcbcrRange suggestedYcbcrRange;
	public VkChromaLocation suggestedXChromaOffset;
	public VkChromaLocation suggestedYChromaOffset;

	public VkAndroidHardwareBufferFormatProperties2ANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalFormatResolveFeaturesANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalFormatResolveFeaturesAndroid;
	public void* pNext;
	public VkBool32 externalFormatResolve;

	public VkPhysicalDeviceExternalFormatResolveFeaturesANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceExternalFormatResolvePropertiesANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceExternalFormatResolvePropertiesAndroid;
	public void* pNext;
	public VkBool32 nullColorAttachmentWithExternalFormatResolve;
	public VkChromaLocation externalFormatResolveChromaOffsetX;
	public VkChromaLocation externalFormatResolveChromaOffsetY;

	public VkPhysicalDeviceExternalFormatResolvePropertiesANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAndroidHardwareBufferFormatResolvePropertiesANDROID : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AndroidHardwareBufferFormatResolvePropertiesAndroid;
	public void* pNext;
	public VkFormat colorAttachmentFormat;

	public VkAndroidHardwareBufferFormatResolvePropertiesANDROID()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMetalSurfaceCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MetalSurfaceCreateInfoEXT;
	public void* pNext;
	public VkMetalSurfaceCreateFlagsEXT flags;
	public nint pLayer;

	public VkMetalSurfaceCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMetalObjectCreateInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMetalObjectCreateInfoEXT;
	public void* pNext;
	public VkExportMetalObjectTypeFlagsEXT exportObjectType;

	public VkExportMetalObjectCreateInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMetalObjectsInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMetalObjectsInfoEXT;
	public void* pNext;

	public VkExportMetalObjectsInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMetalDeviceInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMetalDeviceInfoEXT;
	public void* pNext;
	public nint mtlDevice;

	public VkExportMetalDeviceInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMetalCommandQueueInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMetalCommandQueueInfoEXT;
	public void* pNext;
	public VkQueue queue;
	public nint mtlCommandQueue;

	public VkExportMetalCommandQueueInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMetalBufferInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMetalBufferInfoEXT;
	public void* pNext;
	public VkDeviceMemory memory;
	public nint mtlBuffer;

	public VkExportMetalBufferInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMetalBufferInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMetalBufferInfoEXT;
	public void* pNext;
	public nint mtlBuffer;

	public VkImportMetalBufferInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMetalTextureInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMetalTextureInfoEXT;
	public void* pNext;
	public VkImage image;
	public VkImageView imageView;
	public VkBufferView bufferView;
	public VkImageAspectFlags plane;
	public nint mtlTexture;

	public VkExportMetalTextureInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMetalTextureInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMetalTextureInfoEXT;
	public void* pNext;
	public VkImageAspectFlags plane;
	public nint mtlTexture;

	public VkImportMetalTextureInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMetalIOSurfaceInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMetalIOSurfaceInfoEXT;
	public void* pNext;
	public VkImage image;
	public nint ioSurface;

	public VkExportMetalIOSurfaceInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMetalIOSurfaceInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMetalIOSurfaceInfoEXT;
	public void* pNext;
	public nint ioSurface;

	public VkImportMetalIOSurfaceInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMetalSharedEventInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMetalSharedEventInfoEXT;
	public void* pNext;
	public VkSemaphore semaphore;
	public VkEvent @event;
	public nint mtlSharedEvent;

	public VkExportMetalSharedEventInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMetalSharedEventInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMetalSharedEventInfoEXT;
	public void* pNext;
	public nint mtlSharedEvent;

	public VkImportMetalSharedEventInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMemoryMetalHandleInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMemoryMetalHandleInfoEXT;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public void* handle;

	public VkImportMemoryMetalHandleInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryMetalHandlePropertiesEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryMetalHandlePropertiesEXT;
	public void* pNext;
	public uint memoryTypeBits;

	public VkMemoryMetalHandlePropertiesEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryGetMetalHandleInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryGetMetalHandleInfoEXT;
	public void* pNext;
	public VkDeviceMemory memory;
	public VkExternalMemoryHandleTypeFlags handleType;

	public VkMemoryGetMetalHandleInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkViSurfaceCreateInfoNN : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ViSurfaceCreateInfoNN;
	public void* pNext;
	public VkViSurfaceCreateFlagsNN flags;
	public void* window;

	public VkViSurfaceCreateInfoNN()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWaylandSurfaceCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.WaylandSurfaceCreateInfoKHR;
	public void* pNext;
	public VkWaylandSurfaceCreateFlagsKHR flags;
	public nint display;
	public nint surface;

	public VkWaylandSurfaceCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWin32SurfaceCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.Win32SurfaceCreateInfoKHR;
	public void* pNext;
	public VkWin32SurfaceCreateFlagsKHR flags;
	public nint hinstance;
	public nint hwnd;

	public VkWin32SurfaceCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMemoryWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMemoryWin32HandleInfoKHR;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public nint handle;
	public nint name;

	public VkImportMemoryWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMemoryWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMemoryWin32HandleInfoKHR;
	public void* pNext;
	public nint pAttributes;
	public uint dwAccess;
	public nint name;

	public VkExportMemoryWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryWin32HandlePropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryWin32HandlePropertiesKHR;
	public void* pNext;
	public uint memoryTypeBits;

	public VkMemoryWin32HandlePropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkMemoryGetWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.MemoryGetWin32HandleInfoKHR;
	public void* pNext;
	public VkDeviceMemory memory;
	public VkExternalMemoryHandleTypeFlags handleType;

	public VkMemoryGetWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWin32KeyedMutexAcquireReleaseInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.Win32KeyedMutexAcquireReleaseInfoKHR;
	public void* pNext;
	public uint acquireCount;
	public VkDeviceMemory* pAcquireSyncs;
	public ulong* pAcquireKeys;
	public uint* pAcquireTimeouts;
	public uint releaseCount;
	public VkDeviceMemory* pReleaseSyncs;
	public ulong* pReleaseKeys;

	public VkWin32KeyedMutexAcquireReleaseInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportSemaphoreWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportSemaphoreWin32HandleInfoKHR;
	public void* pNext;
	public VkSemaphore semaphore;
	public VkSemaphoreImportFlags flags;
	public VkExternalSemaphoreHandleTypeFlags handleType;
	public nint handle;
	public nint name;

	public VkImportSemaphoreWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportSemaphoreWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportSemaphoreWin32HandleInfoKHR;
	public void* pNext;
	public nint pAttributes;
	public uint dwAccess;
	public nint name;

	public VkExportSemaphoreWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkD3D12FenceSubmitInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.D3D12FenceSubmitInfoKHR;
	public void* pNext;
	public uint waitSemaphoreValuesCount;
	public ulong* pWaitSemaphoreValues;
	public uint signalSemaphoreValuesCount;
	public ulong* pSignalSemaphoreValues;

	public VkD3D12FenceSubmitInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSemaphoreGetWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SemaphoreGetWin32HandleInfoKHR;
	public void* pNext;
	public VkSemaphore semaphore;
	public VkExternalSemaphoreHandleTypeFlags handleType;

	public VkSemaphoreGetWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportFenceWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportFenceWin32HandleInfoKHR;
	public void* pNext;
	public VkFence fence;
	public VkFenceImportFlags flags;
	public VkExternalFenceHandleTypeFlags handleType;
	public nint handle;
	public nint name;

	public VkImportFenceWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportFenceWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportFenceWin32HandleInfoKHR;
	public void* pNext;
	public nint pAttributes;
	public uint dwAccess;
	public nint name;

	public VkExportFenceWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkFenceGetWin32HandleInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.FenceGetWin32HandleInfoKHR;
	public void* pNext;
	public VkFence fence;
	public VkExternalFenceHandleTypeFlags handleType;

	public VkFenceGetWin32HandleInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkImportMemoryWin32HandleInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ImportMemoryWin32HandleInfoNV;
	public void* pNext;
	public VkExternalMemoryHandleTypeFlagsNV handleType;
	public nint handle;

	public VkImportMemoryWin32HandleInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExportMemoryWin32HandleInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExportMemoryWin32HandleInfoNV;
	public void* pNext;
	public nint pAttributes;
	public uint dwAccess;

	public VkExportMemoryWin32HandleInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkWin32KeyedMutexAcquireReleaseInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.Win32KeyedMutexAcquireReleaseInfoNV;
	public void* pNext;
	public uint acquireCount;
	public VkDeviceMemory* pAcquireSyncs;
	public ulong* pAcquireKeys;
	public uint* pAcquireTimeoutMilliseconds;
	public uint releaseCount;
	public VkDeviceMemory* pReleaseSyncs;
	public ulong* pReleaseKeys;

	public VkWin32KeyedMutexAcquireReleaseInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceFullScreenExclusiveInfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceFullScreenExclusiveInfoEXT;
	public void* pNext;
	public VkFullScreenExclusiveEXT fullScreenExclusive;

	public VkSurfaceFullScreenExclusiveInfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceCapabilitiesFullScreenExclusiveEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceCapabilitiesFullScreenExclusiveEXT;
	public void* pNext;
	public VkBool32 fullScreenExclusiveSupported;

	public VkSurfaceCapabilitiesFullScreenExclusiveEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkSurfaceFullScreenExclusiveWin32InfoEXT : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.SurfaceFullScreenExclusiveWin32InfoEXT;
	public void* pNext;
	public nint hmonitor;

	public VkSurfaceFullScreenExclusiveWin32InfoEXT()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkXcbSurfaceCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.XcbSurfaceCreateInfoKHR;
	public void* pNext;
	public VkXcbSurfaceCreateFlagsKHR flags;
	public nint connection;
	public uint window;

	public VkXcbSurfaceCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkXlibSurfaceCreateInfoKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.XlibSurfaceCreateInfoKHR;
	public void* pNext;
	public VkXlibSurfaceCreateFlagsKHR flags;
	public nint dpy;
	public ulong window;

	public VkXlibSurfaceCreateInfoKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePortabilitySubsetFeaturesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePortabilitySubsetFeaturesKHR;
	public void* pNext;
	public VkBool32 constantAlphaColorBlendFactors;
	public VkBool32 events;
	public VkBool32 imageViewFormatReinterpretation;
	public VkBool32 imageViewFormatSwizzle;
	public VkBool32 imageView2DOn3DImage;
	public VkBool32 multisampleArrayImage;
	public VkBool32 mutableComparisonSamplers;
	public VkBool32 pointPolygons;
	public VkBool32 samplerMipLodBias;
	public VkBool32 separateStencilMaskRef;
	public VkBool32 shaderSampleRateInterpolationFunctions;
	public VkBool32 tessellationIsolines;
	public VkBool32 tessellationPointMode;
	public VkBool32 triangleFans;
	public VkBool32 vertexAttributeAccessBeyondStride;

	public VkPhysicalDevicePortabilitySubsetFeaturesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDevicePortabilitySubsetPropertiesKHR : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDevicePortabilitySubsetPropertiesKHR;
	public void* pNext;
	public uint minVertexInputBindingStrideAlignment;

	public VkPhysicalDevicePortabilitySubsetPropertiesKHR()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderEnqueueFeaturesAMDX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderEnqueueFeaturesAMDX;
	public void* pNext;
	public VkBool32 shaderEnqueue;
	public VkBool32 shaderMeshEnqueue;

	public VkPhysicalDeviceShaderEnqueueFeaturesAMDX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceShaderEnqueuePropertiesAMDX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceShaderEnqueuePropertiesAMDX;
	public void* pNext;
	public uint maxExecutionGraphDepth;
	public uint maxExecutionGraphShaderOutputNodes;
	public uint maxExecutionGraphShaderPayloadSize;
	public uint maxExecutionGraphShaderPayloadCount;
	public uint executionGraphDispatchAddressAlignment;
	public fixed uint maxExecutionGraphWorkgroupCount[3];
	public uint maxExecutionGraphWorkgroups;

	public VkPhysicalDeviceShaderEnqueuePropertiesAMDX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExecutionGraphPipelineScratchSizeAMDX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExecutionGraphPipelineScratchSizeAMDX;
	public void* pNext;
	public ulong minSize;
	public ulong maxSize;
	public ulong sizeGranularity;

	public VkExecutionGraphPipelineScratchSizeAMDX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkExecutionGraphPipelineCreateInfoAMDX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.ExecutionGraphPipelineCreateInfoAMDX;
	public void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public VkPipelineShaderStageCreateInfo* pStages;
	public VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public VkExecutionGraphPipelineCreateInfoAMDX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

[StructLayout(LayoutKind.Explicit)]
public unsafe partial struct VkDeviceOrHostAddressConstAMDX
{
	[FieldOffset(0)]
	public ulong deviceAddress;
	[FieldOffset(0)]
	public void* hostAddress;
}

public partial struct VkDispatchGraphInfoAMDX
{
	public uint nodeIndex;
	public uint payloadCount;
	public VkDeviceOrHostAddressConstAMDX payloads;
	public ulong payloadStride;
}

public partial struct VkDispatchGraphCountInfoAMDX
{
	public uint count;
	public VkDeviceOrHostAddressConstAMDX infos;
	public ulong stride;
}

public unsafe partial struct VkPipelineShaderStageNodeCreateInfoAMDX : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PipelineShaderStageNodeCreateInfoAMDX;
	public void* pNext;
	public byte* pName;
	public uint index;

	public VkPipelineShaderStageNodeCreateInfoAMDX()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCudaModuleCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CudaModuleCreateInfoNV;
	public void* pNext;
	public ulong dataSize;
	public void* pData;

	public VkCudaModuleCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCudaFunctionCreateInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CudaFunctionCreateInfoNV;
	public void* pNext;
	public VkCudaModuleNV module;
	public byte* pName;

	public VkCudaFunctionCreateInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkCudaLaunchInfoNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.CudaLaunchInfoNV;
	public void* pNext;
	public VkCudaFunctionNV function;
	public uint gridDimX;
	public uint gridDimY;
	public uint gridDimZ;
	public uint blockDimX;
	public uint blockDimY;
	public uint blockDimZ;
	public uint sharedMemBytes;
	public ulong paramCount;
	public void** pParams;
	public ulong extraCount;
	public void** pExtras;

	public VkCudaLaunchInfoNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCudaKernelLaunchFeaturesNV;
	public void* pNext;
	public VkBool32 cudaKernelLaunchFeatures;

	public VkPhysicalDeviceCudaKernelLaunchFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceCudaKernelLaunchPropertiesNV;
	public void* pNext;
	public uint computeCapabilityMinor;
	public uint computeCapabilityMajor;

	public VkPhysicalDeviceCudaKernelLaunchPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDisplacementMicromapFeaturesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDisplacementMicromapFeaturesNV;
	public void* pNext;
	public VkBool32 displacementMicromap;

	public VkPhysicalDeviceDisplacementMicromapFeaturesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkPhysicalDeviceDisplacementMicromapPropertiesNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.PhysicalDeviceDisplacementMicromapPropertiesNV;
	public void* pNext;
	public uint maxDisplacementMicromapSubdivisionLevel;

	public VkPhysicalDeviceDisplacementMicromapPropertiesNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

public unsafe partial struct VkAccelerationStructureTrianglesDisplacementMicromapNV : IStructureType, IChainType
{
	public VkStructureType sType = VkStructureType.AccelerationStructureTrianglesDisplacementMicromapNV;
	public void* pNext;
	public VkFormat displacementBiasAndScaleFormat;
	public VkFormat displacementVectorFormat;
	public VkDeviceOrHostAddressConstKHR displacementBiasAndScaleBuffer;
	public ulong displacementBiasAndScaleStride;
	public VkDeviceOrHostAddressConstKHR displacementVectorBuffer;
	public ulong displacementVectorStride;
	public VkDeviceOrHostAddressConstKHR displacedMicromapPrimitiveFlags;
	public ulong displacedMicromapPrimitiveFlagsStride;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexBuffer;
	public ulong indexStride;
	public uint baseTriangle;
	public uint usageCountsCount;
	public VkMicromapUsageEXT* pUsageCounts;
	public VkMicromapUsageEXT** ppUsageCounts;
	public VkMicromapEXT micromap;

	public VkAccelerationStructureTrianglesDisplacementMicromapNV()
	{
	}

	/// <inheritdoc />
	readonly VkStructureType IStructureType.sType => sType;

	/// <inheritdoc />
	void* IChainType.pNext
	{
		get => pNext;
		set => pNext = value;
	}
}

