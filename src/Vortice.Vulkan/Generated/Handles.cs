// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System.Diagnostics;

namespace Vortice.Vulkan;

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkBuffer : IEquatable<VkBuffer>
{
	public VkBuffer(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkBuffer Null => new(0);
	public static implicit operator VkBuffer(ulong handle) => new(handle);
	public static implicit operator ulong(VkBuffer handle) => handle.Handle;
	public static bool operator ==(VkBuffer left, VkBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(VkBuffer left, VkBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(VkBuffer left, ulong right) => left.Handle == right;
	public static bool operator !=(VkBuffer left, ulong right) => left.Handle != right;
	public bool Equals(VkBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkImage : IEquatable<VkImage>
{
	public VkImage(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkImage Null => new(0);
	public static implicit operator VkImage(ulong handle) => new(handle);
	public static implicit operator ulong(VkImage handle) => handle.Handle;
	public static bool operator ==(VkImage left, VkImage right) => left.Handle == right.Handle;
	public static bool operator !=(VkImage left, VkImage right) => left.Handle != right.Handle;
	public static bool operator ==(VkImage left, ulong right) => left.Handle == right;
	public static bool operator !=(VkImage left, ulong right) => left.Handle != right;
	public bool Equals(VkImage other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkImage handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkImage)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkInstance : IEquatable<VkInstance>
{
	public VkInstance(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkInstance Null => new(0);
	public static implicit operator VkInstance(nint handle) => new(handle);
	public static implicit operator nint(VkInstance handle) => handle.Handle;
	public static bool operator ==(VkInstance left, VkInstance right) => left.Handle == right.Handle;
	public static bool operator !=(VkInstance left, VkInstance right) => left.Handle != right.Handle;
	public static bool operator ==(VkInstance left, nint right) => left.Handle == right;
	public static bool operator !=(VkInstance left, nint right) => left.Handle != right;
	public bool Equals(VkInstance other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkInstance handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkInstance)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkPhysicalDevice : IEquatable<VkPhysicalDevice>
{
	public VkPhysicalDevice(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkPhysicalDevice Null => new(0);
	public static implicit operator VkPhysicalDevice(nint handle) => new(handle);
	public static implicit operator nint(VkPhysicalDevice handle) => handle.Handle;
	public static bool operator ==(VkPhysicalDevice left, VkPhysicalDevice right) => left.Handle == right.Handle;
	public static bool operator !=(VkPhysicalDevice left, VkPhysicalDevice right) => left.Handle != right.Handle;
	public static bool operator ==(VkPhysicalDevice left, nint right) => left.Handle == right;
	public static bool operator !=(VkPhysicalDevice left, nint right) => left.Handle != right;
	public bool Equals(VkPhysicalDevice other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkPhysicalDevice handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkPhysicalDevice)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDevice : IEquatable<VkDevice>
{
	public VkDevice(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDevice Null => new(0);
	public static implicit operator VkDevice(nint handle) => new(handle);
	public static implicit operator nint(VkDevice handle) => handle.Handle;
	public static bool operator ==(VkDevice left, VkDevice right) => left.Handle == right.Handle;
	public static bool operator !=(VkDevice left, VkDevice right) => left.Handle != right.Handle;
	public static bool operator ==(VkDevice left, nint right) => left.Handle == right;
	public static bool operator !=(VkDevice left, nint right) => left.Handle != right;
	public bool Equals(VkDevice other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDevice handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDevice)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkQueue : IEquatable<VkQueue>
{
	public VkQueue(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkQueue Null => new(0);
	public static implicit operator VkQueue(nint handle) => new(handle);
	public static implicit operator nint(VkQueue handle) => handle.Handle;
	public static bool operator ==(VkQueue left, VkQueue right) => left.Handle == right.Handle;
	public static bool operator !=(VkQueue left, VkQueue right) => left.Handle != right.Handle;
	public static bool operator ==(VkQueue left, nint right) => left.Handle == right;
	public static bool operator !=(VkQueue left, nint right) => left.Handle != right;
	public bool Equals(VkQueue other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkQueue handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkQueue)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkSemaphore : IEquatable<VkSemaphore>
{
	public VkSemaphore(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkSemaphore Null => new(0);
	public static implicit operator VkSemaphore(ulong handle) => new(handle);
	public static implicit operator ulong(VkSemaphore handle) => handle.Handle;
	public static bool operator ==(VkSemaphore left, VkSemaphore right) => left.Handle == right.Handle;
	public static bool operator !=(VkSemaphore left, VkSemaphore right) => left.Handle != right.Handle;
	public static bool operator ==(VkSemaphore left, ulong right) => left.Handle == right;
	public static bool operator !=(VkSemaphore left, ulong right) => left.Handle != right;
	public bool Equals(VkSemaphore other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkSemaphore handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkSemaphore)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkCommandBuffer : IEquatable<VkCommandBuffer>
{
	public VkCommandBuffer(nint handle) { Handle = handle; }
	public nint Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkCommandBuffer Null => new(0);
	public static implicit operator VkCommandBuffer(nint handle) => new(handle);
	public static implicit operator nint(VkCommandBuffer handle) => handle.Handle;
	public static bool operator ==(VkCommandBuffer left, VkCommandBuffer right) => left.Handle == right.Handle;
	public static bool operator !=(VkCommandBuffer left, VkCommandBuffer right) => left.Handle != right.Handle;
	public static bool operator ==(VkCommandBuffer left, nint right) => left.Handle == right;
	public static bool operator !=(VkCommandBuffer left, nint right) => left.Handle != right;
	public bool Equals(VkCommandBuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkCommandBuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkCommandBuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkFence : IEquatable<VkFence>
{
	public VkFence(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkFence Null => new(0);
	public static implicit operator VkFence(ulong handle) => new(handle);
	public static implicit operator ulong(VkFence handle) => handle.Handle;
	public static bool operator ==(VkFence left, VkFence right) => left.Handle == right.Handle;
	public static bool operator !=(VkFence left, VkFence right) => left.Handle != right.Handle;
	public static bool operator ==(VkFence left, ulong right) => left.Handle == right;
	public static bool operator !=(VkFence left, ulong right) => left.Handle != right;
	public bool Equals(VkFence other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkFence handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkFence)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDeviceMemory : IEquatable<VkDeviceMemory>
{
	public VkDeviceMemory(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDeviceMemory Null => new(0);
	public static implicit operator VkDeviceMemory(ulong handle) => new(handle);
	public static implicit operator ulong(VkDeviceMemory handle) => handle.Handle;
	public static bool operator ==(VkDeviceMemory left, VkDeviceMemory right) => left.Handle == right.Handle;
	public static bool operator !=(VkDeviceMemory left, VkDeviceMemory right) => left.Handle != right.Handle;
	public static bool operator ==(VkDeviceMemory left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDeviceMemory left, ulong right) => left.Handle != right;
	public bool Equals(VkDeviceMemory other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDeviceMemory handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDeviceMemory)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkEvent : IEquatable<VkEvent>
{
	public VkEvent(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkEvent Null => new(0);
	public static implicit operator VkEvent(ulong handle) => new(handle);
	public static implicit operator ulong(VkEvent handle) => handle.Handle;
	public static bool operator ==(VkEvent left, VkEvent right) => left.Handle == right.Handle;
	public static bool operator !=(VkEvent left, VkEvent right) => left.Handle != right.Handle;
	public static bool operator ==(VkEvent left, ulong right) => left.Handle == right;
	public static bool operator !=(VkEvent left, ulong right) => left.Handle != right;
	public bool Equals(VkEvent other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkEvent handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkEvent)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkQueryPool : IEquatable<VkQueryPool>
{
	public VkQueryPool(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkQueryPool Null => new(0);
	public static implicit operator VkQueryPool(ulong handle) => new(handle);
	public static implicit operator ulong(VkQueryPool handle) => handle.Handle;
	public static bool operator ==(VkQueryPool left, VkQueryPool right) => left.Handle == right.Handle;
	public static bool operator !=(VkQueryPool left, VkQueryPool right) => left.Handle != right.Handle;
	public static bool operator ==(VkQueryPool left, ulong right) => left.Handle == right;
	public static bool operator !=(VkQueryPool left, ulong right) => left.Handle != right;
	public bool Equals(VkQueryPool other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkQueryPool handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkQueryPool)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkBufferView : IEquatable<VkBufferView>
{
	public VkBufferView(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkBufferView Null => new(0);
	public static implicit operator VkBufferView(ulong handle) => new(handle);
	public static implicit operator ulong(VkBufferView handle) => handle.Handle;
	public static bool operator ==(VkBufferView left, VkBufferView right) => left.Handle == right.Handle;
	public static bool operator !=(VkBufferView left, VkBufferView right) => left.Handle != right.Handle;
	public static bool operator ==(VkBufferView left, ulong right) => left.Handle == right;
	public static bool operator !=(VkBufferView left, ulong right) => left.Handle != right;
	public bool Equals(VkBufferView other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkBufferView handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkBufferView)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkImageView : IEquatable<VkImageView>
{
	public VkImageView(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkImageView Null => new(0);
	public static implicit operator VkImageView(ulong handle) => new(handle);
	public static implicit operator ulong(VkImageView handle) => handle.Handle;
	public static bool operator ==(VkImageView left, VkImageView right) => left.Handle == right.Handle;
	public static bool operator !=(VkImageView left, VkImageView right) => left.Handle != right.Handle;
	public static bool operator ==(VkImageView left, ulong right) => left.Handle == right;
	public static bool operator !=(VkImageView left, ulong right) => left.Handle != right;
	public bool Equals(VkImageView other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkImageView handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkImageView)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkShaderModule : IEquatable<VkShaderModule>
{
	public VkShaderModule(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkShaderModule Null => new(0);
	public static implicit operator VkShaderModule(ulong handle) => new(handle);
	public static implicit operator ulong(VkShaderModule handle) => handle.Handle;
	public static bool operator ==(VkShaderModule left, VkShaderModule right) => left.Handle == right.Handle;
	public static bool operator !=(VkShaderModule left, VkShaderModule right) => left.Handle != right.Handle;
	public static bool operator ==(VkShaderModule left, ulong right) => left.Handle == right;
	public static bool operator !=(VkShaderModule left, ulong right) => left.Handle != right;
	public bool Equals(VkShaderModule other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkShaderModule handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkShaderModule)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkPipelineCache : IEquatable<VkPipelineCache>
{
	public VkPipelineCache(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkPipelineCache Null => new(0);
	public static implicit operator VkPipelineCache(ulong handle) => new(handle);
	public static implicit operator ulong(VkPipelineCache handle) => handle.Handle;
	public static bool operator ==(VkPipelineCache left, VkPipelineCache right) => left.Handle == right.Handle;
	public static bool operator !=(VkPipelineCache left, VkPipelineCache right) => left.Handle != right.Handle;
	public static bool operator ==(VkPipelineCache left, ulong right) => left.Handle == right;
	public static bool operator !=(VkPipelineCache left, ulong right) => left.Handle != right;
	public bool Equals(VkPipelineCache other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkPipelineCache handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkPipelineCache)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkPipelineLayout : IEquatable<VkPipelineLayout>
{
	public VkPipelineLayout(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkPipelineLayout Null => new(0);
	public static implicit operator VkPipelineLayout(ulong handle) => new(handle);
	public static implicit operator ulong(VkPipelineLayout handle) => handle.Handle;
	public static bool operator ==(VkPipelineLayout left, VkPipelineLayout right) => left.Handle == right.Handle;
	public static bool operator !=(VkPipelineLayout left, VkPipelineLayout right) => left.Handle != right.Handle;
	public static bool operator ==(VkPipelineLayout left, ulong right) => left.Handle == right;
	public static bool operator !=(VkPipelineLayout left, ulong right) => left.Handle != right;
	public bool Equals(VkPipelineLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkPipelineLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkPipelineLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkPipeline : IEquatable<VkPipeline>
{
	public VkPipeline(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkPipeline Null => new(0);
	public static implicit operator VkPipeline(ulong handle) => new(handle);
	public static implicit operator ulong(VkPipeline handle) => handle.Handle;
	public static bool operator ==(VkPipeline left, VkPipeline right) => left.Handle == right.Handle;
	public static bool operator !=(VkPipeline left, VkPipeline right) => left.Handle != right.Handle;
	public static bool operator ==(VkPipeline left, ulong right) => left.Handle == right;
	public static bool operator !=(VkPipeline left, ulong right) => left.Handle != right;
	public bool Equals(VkPipeline other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkPipeline handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkPipeline)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkRenderPass : IEquatable<VkRenderPass>
{
	public VkRenderPass(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkRenderPass Null => new(0);
	public static implicit operator VkRenderPass(ulong handle) => new(handle);
	public static implicit operator ulong(VkRenderPass handle) => handle.Handle;
	public static bool operator ==(VkRenderPass left, VkRenderPass right) => left.Handle == right.Handle;
	public static bool operator !=(VkRenderPass left, VkRenderPass right) => left.Handle != right.Handle;
	public static bool operator ==(VkRenderPass left, ulong right) => left.Handle == right;
	public static bool operator !=(VkRenderPass left, ulong right) => left.Handle != right;
	public bool Equals(VkRenderPass other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkRenderPass handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkRenderPass)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDescriptorSetLayout : IEquatable<VkDescriptorSetLayout>
{
	public VkDescriptorSetLayout(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDescriptorSetLayout Null => new(0);
	public static implicit operator VkDescriptorSetLayout(ulong handle) => new(handle);
	public static implicit operator ulong(VkDescriptorSetLayout handle) => handle.Handle;
	public static bool operator ==(VkDescriptorSetLayout left, VkDescriptorSetLayout right) => left.Handle == right.Handle;
	public static bool operator !=(VkDescriptorSetLayout left, VkDescriptorSetLayout right) => left.Handle != right.Handle;
	public static bool operator ==(VkDescriptorSetLayout left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDescriptorSetLayout left, ulong right) => left.Handle != right;
	public bool Equals(VkDescriptorSetLayout other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDescriptorSetLayout handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDescriptorSetLayout)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkSampler : IEquatable<VkSampler>
{
	public VkSampler(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkSampler Null => new(0);
	public static implicit operator VkSampler(ulong handle) => new(handle);
	public static implicit operator ulong(VkSampler handle) => handle.Handle;
	public static bool operator ==(VkSampler left, VkSampler right) => left.Handle == right.Handle;
	public static bool operator !=(VkSampler left, VkSampler right) => left.Handle != right.Handle;
	public static bool operator ==(VkSampler left, ulong right) => left.Handle == right;
	public static bool operator !=(VkSampler left, ulong right) => left.Handle != right;
	public bool Equals(VkSampler other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkSampler handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkSampler)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDescriptorSet : IEquatable<VkDescriptorSet>
{
	public VkDescriptorSet(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDescriptorSet Null => new(0);
	public static implicit operator VkDescriptorSet(ulong handle) => new(handle);
	public static implicit operator ulong(VkDescriptorSet handle) => handle.Handle;
	public static bool operator ==(VkDescriptorSet left, VkDescriptorSet right) => left.Handle == right.Handle;
	public static bool operator !=(VkDescriptorSet left, VkDescriptorSet right) => left.Handle != right.Handle;
	public static bool operator ==(VkDescriptorSet left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDescriptorSet left, ulong right) => left.Handle != right;
	public bool Equals(VkDescriptorSet other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDescriptorSet handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDescriptorSet)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDescriptorPool : IEquatable<VkDescriptorPool>
{
	public VkDescriptorPool(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDescriptorPool Null => new(0);
	public static implicit operator VkDescriptorPool(ulong handle) => new(handle);
	public static implicit operator ulong(VkDescriptorPool handle) => handle.Handle;
	public static bool operator ==(VkDescriptorPool left, VkDescriptorPool right) => left.Handle == right.Handle;
	public static bool operator !=(VkDescriptorPool left, VkDescriptorPool right) => left.Handle != right.Handle;
	public static bool operator ==(VkDescriptorPool left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDescriptorPool left, ulong right) => left.Handle != right;
	public bool Equals(VkDescriptorPool other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDescriptorPool handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDescriptorPool)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkFramebuffer : IEquatable<VkFramebuffer>
{
	public VkFramebuffer(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkFramebuffer Null => new(0);
	public static implicit operator VkFramebuffer(ulong handle) => new(handle);
	public static implicit operator ulong(VkFramebuffer handle) => handle.Handle;
	public static bool operator ==(VkFramebuffer left, VkFramebuffer right) => left.Handle == right.Handle;
	public static bool operator !=(VkFramebuffer left, VkFramebuffer right) => left.Handle != right.Handle;
	public static bool operator ==(VkFramebuffer left, ulong right) => left.Handle == right;
	public static bool operator !=(VkFramebuffer left, ulong right) => left.Handle != right;
	public bool Equals(VkFramebuffer other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkFramebuffer handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkFramebuffer)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkCommandPool : IEquatable<VkCommandPool>
{
	public VkCommandPool(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkCommandPool Null => new(0);
	public static implicit operator VkCommandPool(ulong handle) => new(handle);
	public static implicit operator ulong(VkCommandPool handle) => handle.Handle;
	public static bool operator ==(VkCommandPool left, VkCommandPool right) => left.Handle == right.Handle;
	public static bool operator !=(VkCommandPool left, VkCommandPool right) => left.Handle != right.Handle;
	public static bool operator ==(VkCommandPool left, ulong right) => left.Handle == right;
	public static bool operator !=(VkCommandPool left, ulong right) => left.Handle != right;
	public bool Equals(VkCommandPool other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkCommandPool handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkCommandPool)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkSamplerYcbcrConversion : IEquatable<VkSamplerYcbcrConversion>
{
	public VkSamplerYcbcrConversion(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkSamplerYcbcrConversion Null => new(0);
	public static implicit operator VkSamplerYcbcrConversion(ulong handle) => new(handle);
	public static implicit operator ulong(VkSamplerYcbcrConversion handle) => handle.Handle;
	public static bool operator ==(VkSamplerYcbcrConversion left, VkSamplerYcbcrConversion right) => left.Handle == right.Handle;
	public static bool operator !=(VkSamplerYcbcrConversion left, VkSamplerYcbcrConversion right) => left.Handle != right.Handle;
	public static bool operator ==(VkSamplerYcbcrConversion left, ulong right) => left.Handle == right;
	public static bool operator !=(VkSamplerYcbcrConversion left, ulong right) => left.Handle != right;
	public bool Equals(VkSamplerYcbcrConversion other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkSamplerYcbcrConversion handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkSamplerYcbcrConversion)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDescriptorUpdateTemplate : IEquatable<VkDescriptorUpdateTemplate>
{
	public VkDescriptorUpdateTemplate(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDescriptorUpdateTemplate Null => new(0);
	public static implicit operator VkDescriptorUpdateTemplate(ulong handle) => new(handle);
	public static implicit operator ulong(VkDescriptorUpdateTemplate handle) => handle.Handle;
	public static bool operator ==(VkDescriptorUpdateTemplate left, VkDescriptorUpdateTemplate right) => left.Handle == right.Handle;
	public static bool operator !=(VkDescriptorUpdateTemplate left, VkDescriptorUpdateTemplate right) => left.Handle != right.Handle;
	public static bool operator ==(VkDescriptorUpdateTemplate left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDescriptorUpdateTemplate left, ulong right) => left.Handle != right;
	public bool Equals(VkDescriptorUpdateTemplate other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDescriptorUpdateTemplate handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDescriptorUpdateTemplate)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkPrivateDataSlot : IEquatable<VkPrivateDataSlot>
{
	public VkPrivateDataSlot(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkPrivateDataSlot Null => new(0);
	public static implicit operator VkPrivateDataSlot(ulong handle) => new(handle);
	public static implicit operator ulong(VkPrivateDataSlot handle) => handle.Handle;
	public static bool operator ==(VkPrivateDataSlot left, VkPrivateDataSlot right) => left.Handle == right.Handle;
	public static bool operator !=(VkPrivateDataSlot left, VkPrivateDataSlot right) => left.Handle != right.Handle;
	public static bool operator ==(VkPrivateDataSlot left, ulong right) => left.Handle == right;
	public static bool operator !=(VkPrivateDataSlot left, ulong right) => left.Handle != right;
	public bool Equals(VkPrivateDataSlot other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkPrivateDataSlot handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkPrivateDataSlot)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkSurfaceKHR : IEquatable<VkSurfaceKHR>
{
	public VkSurfaceKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkSurfaceKHR Null => new(0);
	public static implicit operator VkSurfaceKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkSurfaceKHR handle) => handle.Handle;
	public static bool operator ==(VkSurfaceKHR left, VkSurfaceKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkSurfaceKHR left, VkSurfaceKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkSurfaceKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkSurfaceKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkSurfaceKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkSurfaceKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkSurfaceKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkSwapchainKHR : IEquatable<VkSwapchainKHR>
{
	public VkSwapchainKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkSwapchainKHR Null => new(0);
	public static implicit operator VkSwapchainKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkSwapchainKHR handle) => handle.Handle;
	public static bool operator ==(VkSwapchainKHR left, VkSwapchainKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkSwapchainKHR left, VkSwapchainKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkSwapchainKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkSwapchainKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkSwapchainKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkSwapchainKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkSwapchainKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDisplayKHR : IEquatable<VkDisplayKHR>
{
	public VkDisplayKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDisplayKHR Null => new(0);
	public static implicit operator VkDisplayKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkDisplayKHR handle) => handle.Handle;
	public static bool operator ==(VkDisplayKHR left, VkDisplayKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkDisplayKHR left, VkDisplayKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkDisplayKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDisplayKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkDisplayKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDisplayKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDisplayKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDisplayModeKHR : IEquatable<VkDisplayModeKHR>
{
	public VkDisplayModeKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDisplayModeKHR Null => new(0);
	public static implicit operator VkDisplayModeKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkDisplayModeKHR handle) => handle.Handle;
	public static bool operator ==(VkDisplayModeKHR left, VkDisplayModeKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkDisplayModeKHR left, VkDisplayModeKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkDisplayModeKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDisplayModeKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkDisplayModeKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDisplayModeKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDisplayModeKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkVideoSessionKHR : IEquatable<VkVideoSessionKHR>
{
	public VkVideoSessionKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkVideoSessionKHR Null => new(0);
	public static implicit operator VkVideoSessionKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkVideoSessionKHR handle) => handle.Handle;
	public static bool operator ==(VkVideoSessionKHR left, VkVideoSessionKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkVideoSessionKHR left, VkVideoSessionKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkVideoSessionKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkVideoSessionKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkVideoSessionKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkVideoSessionKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkVideoSessionKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkVideoSessionParametersKHR : IEquatable<VkVideoSessionParametersKHR>
{
	public VkVideoSessionParametersKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkVideoSessionParametersKHR Null => new(0);
	public static implicit operator VkVideoSessionParametersKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkVideoSessionParametersKHR handle) => handle.Handle;
	public static bool operator ==(VkVideoSessionParametersKHR left, VkVideoSessionParametersKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkVideoSessionParametersKHR left, VkVideoSessionParametersKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkVideoSessionParametersKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkVideoSessionParametersKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkVideoSessionParametersKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkVideoSessionParametersKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkVideoSessionParametersKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDeferredOperationKHR : IEquatable<VkDeferredOperationKHR>
{
	public VkDeferredOperationKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDeferredOperationKHR Null => new(0);
	public static implicit operator VkDeferredOperationKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkDeferredOperationKHR handle) => handle.Handle;
	public static bool operator ==(VkDeferredOperationKHR left, VkDeferredOperationKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkDeferredOperationKHR left, VkDeferredOperationKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkDeferredOperationKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDeferredOperationKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkDeferredOperationKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDeferredOperationKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDeferredOperationKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkPipelineBinaryKHR : IEquatable<VkPipelineBinaryKHR>
{
	public VkPipelineBinaryKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkPipelineBinaryKHR Null => new(0);
	public static implicit operator VkPipelineBinaryKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkPipelineBinaryKHR handle) => handle.Handle;
	public static bool operator ==(VkPipelineBinaryKHR left, VkPipelineBinaryKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkPipelineBinaryKHR left, VkPipelineBinaryKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkPipelineBinaryKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkPipelineBinaryKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkPipelineBinaryKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkPipelineBinaryKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkPipelineBinaryKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDebugReportCallbackEXT : IEquatable<VkDebugReportCallbackEXT>
{
	public VkDebugReportCallbackEXT(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDebugReportCallbackEXT Null => new(0);
	public static implicit operator VkDebugReportCallbackEXT(ulong handle) => new(handle);
	public static implicit operator ulong(VkDebugReportCallbackEXT handle) => handle.Handle;
	public static bool operator ==(VkDebugReportCallbackEXT left, VkDebugReportCallbackEXT right) => left.Handle == right.Handle;
	public static bool operator !=(VkDebugReportCallbackEXT left, VkDebugReportCallbackEXT right) => left.Handle != right.Handle;
	public static bool operator ==(VkDebugReportCallbackEXT left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDebugReportCallbackEXT left, ulong right) => left.Handle != right;
	public bool Equals(VkDebugReportCallbackEXT other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDebugReportCallbackEXT handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDebugReportCallbackEXT)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkCuModuleNVX : IEquatable<VkCuModuleNVX>
{
	public VkCuModuleNVX(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkCuModuleNVX Null => new(0);
	public static implicit operator VkCuModuleNVX(ulong handle) => new(handle);
	public static implicit operator ulong(VkCuModuleNVX handle) => handle.Handle;
	public static bool operator ==(VkCuModuleNVX left, VkCuModuleNVX right) => left.Handle == right.Handle;
	public static bool operator !=(VkCuModuleNVX left, VkCuModuleNVX right) => left.Handle != right.Handle;
	public static bool operator ==(VkCuModuleNVX left, ulong right) => left.Handle == right;
	public static bool operator !=(VkCuModuleNVX left, ulong right) => left.Handle != right;
	public bool Equals(VkCuModuleNVX other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkCuModuleNVX handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkCuModuleNVX)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkCuFunctionNVX : IEquatable<VkCuFunctionNVX>
{
	public VkCuFunctionNVX(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkCuFunctionNVX Null => new(0);
	public static implicit operator VkCuFunctionNVX(ulong handle) => new(handle);
	public static implicit operator ulong(VkCuFunctionNVX handle) => handle.Handle;
	public static bool operator ==(VkCuFunctionNVX left, VkCuFunctionNVX right) => left.Handle == right.Handle;
	public static bool operator !=(VkCuFunctionNVX left, VkCuFunctionNVX right) => left.Handle != right.Handle;
	public static bool operator ==(VkCuFunctionNVX left, ulong right) => left.Handle == right;
	public static bool operator !=(VkCuFunctionNVX left, ulong right) => left.Handle != right;
	public bool Equals(VkCuFunctionNVX other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkCuFunctionNVX handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkCuFunctionNVX)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDebugUtilsMessengerEXT : IEquatable<VkDebugUtilsMessengerEXT>
{
	public VkDebugUtilsMessengerEXT(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDebugUtilsMessengerEXT Null => new(0);
	public static implicit operator VkDebugUtilsMessengerEXT(ulong handle) => new(handle);
	public static implicit operator ulong(VkDebugUtilsMessengerEXT handle) => handle.Handle;
	public static bool operator ==(VkDebugUtilsMessengerEXT left, VkDebugUtilsMessengerEXT right) => left.Handle == right.Handle;
	public static bool operator !=(VkDebugUtilsMessengerEXT left, VkDebugUtilsMessengerEXT right) => left.Handle != right.Handle;
	public static bool operator ==(VkDebugUtilsMessengerEXT left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDebugUtilsMessengerEXT left, ulong right) => left.Handle != right;
	public bool Equals(VkDebugUtilsMessengerEXT other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDebugUtilsMessengerEXT handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDebugUtilsMessengerEXT)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkValidationCacheEXT : IEquatable<VkValidationCacheEXT>
{
	public VkValidationCacheEXT(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkValidationCacheEXT Null => new(0);
	public static implicit operator VkValidationCacheEXT(ulong handle) => new(handle);
	public static implicit operator ulong(VkValidationCacheEXT handle) => handle.Handle;
	public static bool operator ==(VkValidationCacheEXT left, VkValidationCacheEXT right) => left.Handle == right.Handle;
	public static bool operator !=(VkValidationCacheEXT left, VkValidationCacheEXT right) => left.Handle != right.Handle;
	public static bool operator ==(VkValidationCacheEXT left, ulong right) => left.Handle == right;
	public static bool operator !=(VkValidationCacheEXT left, ulong right) => left.Handle != right;
	public bool Equals(VkValidationCacheEXT other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkValidationCacheEXT handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkValidationCacheEXT)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkAccelerationStructureNV : IEquatable<VkAccelerationStructureNV>
{
	public VkAccelerationStructureNV(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkAccelerationStructureNV Null => new(0);
	public static implicit operator VkAccelerationStructureNV(ulong handle) => new(handle);
	public static implicit operator ulong(VkAccelerationStructureNV handle) => handle.Handle;
	public static bool operator ==(VkAccelerationStructureNV left, VkAccelerationStructureNV right) => left.Handle == right.Handle;
	public static bool operator !=(VkAccelerationStructureNV left, VkAccelerationStructureNV right) => left.Handle != right.Handle;
	public static bool operator ==(VkAccelerationStructureNV left, ulong right) => left.Handle == right;
	public static bool operator !=(VkAccelerationStructureNV left, ulong right) => left.Handle != right;
	public bool Equals(VkAccelerationStructureNV other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkAccelerationStructureNV handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkAccelerationStructureNV)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkPerformanceConfigurationINTEL : IEquatable<VkPerformanceConfigurationINTEL>
{
	public VkPerformanceConfigurationINTEL(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkPerformanceConfigurationINTEL Null => new(0);
	public static implicit operator VkPerformanceConfigurationINTEL(ulong handle) => new(handle);
	public static implicit operator ulong(VkPerformanceConfigurationINTEL handle) => handle.Handle;
	public static bool operator ==(VkPerformanceConfigurationINTEL left, VkPerformanceConfigurationINTEL right) => left.Handle == right.Handle;
	public static bool operator !=(VkPerformanceConfigurationINTEL left, VkPerformanceConfigurationINTEL right) => left.Handle != right.Handle;
	public static bool operator ==(VkPerformanceConfigurationINTEL left, ulong right) => left.Handle == right;
	public static bool operator !=(VkPerformanceConfigurationINTEL left, ulong right) => left.Handle != right;
	public bool Equals(VkPerformanceConfigurationINTEL other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkPerformanceConfigurationINTEL handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkPerformanceConfigurationINTEL)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkIndirectCommandsLayoutNV : IEquatable<VkIndirectCommandsLayoutNV>
{
	public VkIndirectCommandsLayoutNV(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkIndirectCommandsLayoutNV Null => new(0);
	public static implicit operator VkIndirectCommandsLayoutNV(ulong handle) => new(handle);
	public static implicit operator ulong(VkIndirectCommandsLayoutNV handle) => handle.Handle;
	public static bool operator ==(VkIndirectCommandsLayoutNV left, VkIndirectCommandsLayoutNV right) => left.Handle == right.Handle;
	public static bool operator !=(VkIndirectCommandsLayoutNV left, VkIndirectCommandsLayoutNV right) => left.Handle != right.Handle;
	public static bool operator ==(VkIndirectCommandsLayoutNV left, ulong right) => left.Handle == right;
	public static bool operator !=(VkIndirectCommandsLayoutNV left, ulong right) => left.Handle != right;
	public bool Equals(VkIndirectCommandsLayoutNV other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkIndirectCommandsLayoutNV handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkIndirectCommandsLayoutNV)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkAccelerationStructureKHR : IEquatable<VkAccelerationStructureKHR>
{
	public VkAccelerationStructureKHR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkAccelerationStructureKHR Null => new(0);
	public static implicit operator VkAccelerationStructureKHR(ulong handle) => new(handle);
	public static implicit operator ulong(VkAccelerationStructureKHR handle) => handle.Handle;
	public static bool operator ==(VkAccelerationStructureKHR left, VkAccelerationStructureKHR right) => left.Handle == right.Handle;
	public static bool operator !=(VkAccelerationStructureKHR left, VkAccelerationStructureKHR right) => left.Handle != right.Handle;
	public static bool operator ==(VkAccelerationStructureKHR left, ulong right) => left.Handle == right;
	public static bool operator !=(VkAccelerationStructureKHR left, ulong right) => left.Handle != right;
	public bool Equals(VkAccelerationStructureKHR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkAccelerationStructureKHR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkAccelerationStructureKHR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkRemoteAddressNV : IEquatable<VkRemoteAddressNV>
{
	public VkRemoteAddressNV(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkRemoteAddressNV Null => new(0);
	public static implicit operator VkRemoteAddressNV(ulong handle) => new(handle);
	public static implicit operator ulong(VkRemoteAddressNV handle) => handle.Handle;
	public static bool operator ==(VkRemoteAddressNV left, VkRemoteAddressNV right) => left.Handle == right.Handle;
	public static bool operator !=(VkRemoteAddressNV left, VkRemoteAddressNV right) => left.Handle != right.Handle;
	public static bool operator ==(VkRemoteAddressNV left, ulong right) => left.Handle == right;
	public static bool operator !=(VkRemoteAddressNV left, ulong right) => left.Handle != right;
	public bool Equals(VkRemoteAddressNV other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkRemoteAddressNV handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkRemoteAddressNV)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkMicromapEXT : IEquatable<VkMicromapEXT>
{
	public VkMicromapEXT(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkMicromapEXT Null => new(0);
	public static implicit operator VkMicromapEXT(ulong handle) => new(handle);
	public static implicit operator ulong(VkMicromapEXT handle) => handle.Handle;
	public static bool operator ==(VkMicromapEXT left, VkMicromapEXT right) => left.Handle == right.Handle;
	public static bool operator !=(VkMicromapEXT left, VkMicromapEXT right) => left.Handle != right.Handle;
	public static bool operator ==(VkMicromapEXT left, ulong right) => left.Handle == right;
	public static bool operator !=(VkMicromapEXT left, ulong right) => left.Handle != right;
	public bool Equals(VkMicromapEXT other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkMicromapEXT handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkMicromapEXT)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkTensorARM : IEquatable<VkTensorARM>
{
	public VkTensorARM(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkTensorARM Null => new(0);
	public static implicit operator VkTensorARM(ulong handle) => new(handle);
	public static implicit operator ulong(VkTensorARM handle) => handle.Handle;
	public static bool operator ==(VkTensorARM left, VkTensorARM right) => left.Handle == right.Handle;
	public static bool operator !=(VkTensorARM left, VkTensorARM right) => left.Handle != right.Handle;
	public static bool operator ==(VkTensorARM left, ulong right) => left.Handle == right;
	public static bool operator !=(VkTensorARM left, ulong right) => left.Handle != right;
	public bool Equals(VkTensorARM other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkTensorARM handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkTensorARM)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkTensorViewARM : IEquatable<VkTensorViewARM>
{
	public VkTensorViewARM(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkTensorViewARM Null => new(0);
	public static implicit operator VkTensorViewARM(ulong handle) => new(handle);
	public static implicit operator ulong(VkTensorViewARM handle) => handle.Handle;
	public static bool operator ==(VkTensorViewARM left, VkTensorViewARM right) => left.Handle == right.Handle;
	public static bool operator !=(VkTensorViewARM left, VkTensorViewARM right) => left.Handle != right.Handle;
	public static bool operator ==(VkTensorViewARM left, ulong right) => left.Handle == right;
	public static bool operator !=(VkTensorViewARM left, ulong right) => left.Handle != right;
	public bool Equals(VkTensorViewARM other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkTensorViewARM handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkTensorViewARM)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkOpticalFlowSessionNV : IEquatable<VkOpticalFlowSessionNV>
{
	public VkOpticalFlowSessionNV(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkOpticalFlowSessionNV Null => new(0);
	public static implicit operator VkOpticalFlowSessionNV(ulong handle) => new(handle);
	public static implicit operator ulong(VkOpticalFlowSessionNV handle) => handle.Handle;
	public static bool operator ==(VkOpticalFlowSessionNV left, VkOpticalFlowSessionNV right) => left.Handle == right.Handle;
	public static bool operator !=(VkOpticalFlowSessionNV left, VkOpticalFlowSessionNV right) => left.Handle != right.Handle;
	public static bool operator ==(VkOpticalFlowSessionNV left, ulong right) => left.Handle == right;
	public static bool operator !=(VkOpticalFlowSessionNV left, ulong right) => left.Handle != right;
	public bool Equals(VkOpticalFlowSessionNV other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkOpticalFlowSessionNV handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkOpticalFlowSessionNV)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkShaderEXT : IEquatable<VkShaderEXT>
{
	public VkShaderEXT(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkShaderEXT Null => new(0);
	public static implicit operator VkShaderEXT(ulong handle) => new(handle);
	public static implicit operator ulong(VkShaderEXT handle) => handle.Handle;
	public static bool operator ==(VkShaderEXT left, VkShaderEXT right) => left.Handle == right.Handle;
	public static bool operator !=(VkShaderEXT left, VkShaderEXT right) => left.Handle != right.Handle;
	public static bool operator ==(VkShaderEXT left, ulong right) => left.Handle == right;
	public static bool operator !=(VkShaderEXT left, ulong right) => left.Handle != right;
	public bool Equals(VkShaderEXT other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkShaderEXT handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkShaderEXT)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkDataGraphPipelineSessionARM : IEquatable<VkDataGraphPipelineSessionARM>
{
	public VkDataGraphPipelineSessionARM(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkDataGraphPipelineSessionARM Null => new(0);
	public static implicit operator VkDataGraphPipelineSessionARM(ulong handle) => new(handle);
	public static implicit operator ulong(VkDataGraphPipelineSessionARM handle) => handle.Handle;
	public static bool operator ==(VkDataGraphPipelineSessionARM left, VkDataGraphPipelineSessionARM right) => left.Handle == right.Handle;
	public static bool operator !=(VkDataGraphPipelineSessionARM left, VkDataGraphPipelineSessionARM right) => left.Handle != right.Handle;
	public static bool operator ==(VkDataGraphPipelineSessionARM left, ulong right) => left.Handle == right;
	public static bool operator !=(VkDataGraphPipelineSessionARM left, ulong right) => left.Handle != right;
	public bool Equals(VkDataGraphPipelineSessionARM other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkDataGraphPipelineSessionARM handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkDataGraphPipelineSessionARM)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkExternalComputeQueueNV : IEquatable<VkExternalComputeQueueNV>
{
	public VkExternalComputeQueueNV(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkExternalComputeQueueNV Null => new(0);
	public static implicit operator VkExternalComputeQueueNV(ulong handle) => new(handle);
	public static implicit operator ulong(VkExternalComputeQueueNV handle) => handle.Handle;
	public static bool operator ==(VkExternalComputeQueueNV left, VkExternalComputeQueueNV right) => left.Handle == right.Handle;
	public static bool operator !=(VkExternalComputeQueueNV left, VkExternalComputeQueueNV right) => left.Handle != right.Handle;
	public static bool operator ==(VkExternalComputeQueueNV left, ulong right) => left.Handle == right;
	public static bool operator !=(VkExternalComputeQueueNV left, ulong right) => left.Handle != right;
	public bool Equals(VkExternalComputeQueueNV other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkExternalComputeQueueNV handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkExternalComputeQueueNV)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkIndirectExecutionSetEXT : IEquatable<VkIndirectExecutionSetEXT>
{
	public VkIndirectExecutionSetEXT(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkIndirectExecutionSetEXT Null => new(0);
	public static implicit operator VkIndirectExecutionSetEXT(ulong handle) => new(handle);
	public static implicit operator ulong(VkIndirectExecutionSetEXT handle) => handle.Handle;
	public static bool operator ==(VkIndirectExecutionSetEXT left, VkIndirectExecutionSetEXT right) => left.Handle == right.Handle;
	public static bool operator !=(VkIndirectExecutionSetEXT left, VkIndirectExecutionSetEXT right) => left.Handle != right.Handle;
	public static bool operator ==(VkIndirectExecutionSetEXT left, ulong right) => left.Handle == right;
	public static bool operator !=(VkIndirectExecutionSetEXT left, ulong right) => left.Handle != right;
	public bool Equals(VkIndirectExecutionSetEXT other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkIndirectExecutionSetEXT handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkIndirectExecutionSetEXT)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkIndirectCommandsLayoutEXT : IEquatable<VkIndirectCommandsLayoutEXT>
{
	public VkIndirectCommandsLayoutEXT(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkIndirectCommandsLayoutEXT Null => new(0);
	public static implicit operator VkIndirectCommandsLayoutEXT(ulong handle) => new(handle);
	public static implicit operator ulong(VkIndirectCommandsLayoutEXT handle) => handle.Handle;
	public static bool operator ==(VkIndirectCommandsLayoutEXT left, VkIndirectCommandsLayoutEXT right) => left.Handle == right.Handle;
	public static bool operator !=(VkIndirectCommandsLayoutEXT left, VkIndirectCommandsLayoutEXT right) => left.Handle != right.Handle;
	public static bool operator ==(VkIndirectCommandsLayoutEXT left, ulong right) => left.Handle == right;
	public static bool operator !=(VkIndirectCommandsLayoutEXT left, ulong right) => left.Handle != right;
	public bool Equals(VkIndirectCommandsLayoutEXT other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkIndirectCommandsLayoutEXT handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkIndirectCommandsLayoutEXT)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct LPCWSTR : IEquatable<LPCWSTR>
{
	public LPCWSTR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static LPCWSTR Null => new(0);
	public static implicit operator LPCWSTR(ulong handle) => new(handle);
	public static implicit operator ulong(LPCWSTR handle) => handle.Handle;
	public static bool operator ==(LPCWSTR left, LPCWSTR right) => left.Handle == right.Handle;
	public static bool operator !=(LPCWSTR left, LPCWSTR right) => left.Handle != right.Handle;
	public static bool operator ==(LPCWSTR left, ulong right) => left.Handle == right;
	public static bool operator !=(LPCWSTR left, ulong right) => left.Handle != right;
	public bool Equals(LPCWSTR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is LPCWSTR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(LPCWSTR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct HANDLE : IEquatable<HANDLE>
{
	public HANDLE(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static HANDLE Null => new(0);
	public static implicit operator HANDLE(ulong handle) => new(handle);
	public static implicit operator ulong(HANDLE handle) => handle.Handle;
	public static bool operator ==(HANDLE left, HANDLE right) => left.Handle == right.Handle;
	public static bool operator !=(HANDLE left, HANDLE right) => left.Handle != right.Handle;
	public static bool operator ==(HANDLE left, ulong right) => left.Handle == right;
	public static bool operator !=(HANDLE left, ulong right) => left.Handle != right;
	public bool Equals(HANDLE other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is HANDLE handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(HANDLE)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct HINSTANCE : IEquatable<HINSTANCE>
{
	public HINSTANCE(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static HINSTANCE Null => new(0);
	public static implicit operator HINSTANCE(ulong handle) => new(handle);
	public static implicit operator ulong(HINSTANCE handle) => handle.Handle;
	public static bool operator ==(HINSTANCE left, HINSTANCE right) => left.Handle == right.Handle;
	public static bool operator !=(HINSTANCE left, HINSTANCE right) => left.Handle != right.Handle;
	public static bool operator ==(HINSTANCE left, ulong right) => left.Handle == right;
	public static bool operator !=(HINSTANCE left, ulong right) => left.Handle != right;
	public bool Equals(HINSTANCE other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is HINSTANCE handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(HINSTANCE)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct HWND : IEquatable<HWND>
{
	public HWND(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static HWND Null => new(0);
	public static implicit operator HWND(ulong handle) => new(handle);
	public static implicit operator ulong(HWND handle) => handle.Handle;
	public static bool operator ==(HWND left, HWND right) => left.Handle == right.Handle;
	public static bool operator !=(HWND left, HWND right) => left.Handle != right.Handle;
	public static bool operator ==(HWND left, ulong right) => left.Handle == right;
	public static bool operator !=(HWND left, ulong right) => left.Handle != right;
	public bool Equals(HWND other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is HWND handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(HWND)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct HMONITOR : IEquatable<HMONITOR>
{
	public HMONITOR(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static HMONITOR Null => new(0);
	public static implicit operator HMONITOR(ulong handle) => new(handle);
	public static implicit operator ulong(HMONITOR handle) => handle.Handle;
	public static bool operator ==(HMONITOR left, HMONITOR right) => left.Handle == right.Handle;
	public static bool operator !=(HMONITOR left, HMONITOR right) => left.Handle != right.Handle;
	public static bool operator ==(HMONITOR left, ulong right) => left.Handle == right;
	public static bool operator !=(HMONITOR left, ulong right) => left.Handle != right;
	public bool Equals(HMONITOR other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is HMONITOR handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(HMONITOR)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkCudaModuleNV : IEquatable<VkCudaModuleNV>
{
	public VkCudaModuleNV(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkCudaModuleNV Null => new(0);
	public static implicit operator VkCudaModuleNV(ulong handle) => new(handle);
	public static implicit operator ulong(VkCudaModuleNV handle) => handle.Handle;
	public static bool operator ==(VkCudaModuleNV left, VkCudaModuleNV right) => left.Handle == right.Handle;
	public static bool operator !=(VkCudaModuleNV left, VkCudaModuleNV right) => left.Handle != right.Handle;
	public static bool operator ==(VkCudaModuleNV left, ulong right) => left.Handle == right;
	public static bool operator !=(VkCudaModuleNV left, ulong right) => left.Handle != right;
	public bool Equals(VkCudaModuleNV other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkCudaModuleNV handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkCudaModuleNV)} [0x{Handle.ToString("X")}]";
}

/// <summary>
/// A non-dispatchable handle.
/// </summary>
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly partial struct VkCudaFunctionNV : IEquatable<VkCudaFunctionNV>
{
	public VkCudaFunctionNV(ulong handle) { Handle = handle; }
	public ulong Handle { get; }
	public bool IsNull => Handle == 0;
	public bool IsNotNull => Handle != 0;
	public static VkCudaFunctionNV Null => new(0);
	public static implicit operator VkCudaFunctionNV(ulong handle) => new(handle);
	public static implicit operator ulong(VkCudaFunctionNV handle) => handle.Handle;
	public static bool operator ==(VkCudaFunctionNV left, VkCudaFunctionNV right) => left.Handle == right.Handle;
	public static bool operator !=(VkCudaFunctionNV left, VkCudaFunctionNV right) => left.Handle != right.Handle;
	public static bool operator ==(VkCudaFunctionNV left, ulong right) => left.Handle == right;
	public static bool operator !=(VkCudaFunctionNV left, ulong right) => left.Handle != right;
	public bool Equals(VkCudaFunctionNV other) => Handle == other.Handle;
	/// <inheritdoc/>
	public override bool Equals(object? obj) => obj is VkCudaFunctionNV handle && Equals(handle);
	/// <inheritdoc/>
	public override int GetHashCode() => Handle.GetHashCode();
	private string DebuggerDisplay => $"{nameof(VkCudaFunctionNV)} [0x{Handle.ToString("X")}]";
}

