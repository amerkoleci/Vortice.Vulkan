// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vortice.Vulkan;

unsafe partial class VkInstanceApi
{
	public VkResult vkEnumeratePhysicalDevices(VkInstance instance, out uint physicalDeviceCount)
	{
		physicalDeviceCount = default;
		fixed (uint* physicalDeviceCountPtr = &physicalDeviceCount)
		{
			return ((delegate* unmanaged<VkInstance, uint*, VkPhysicalDevice*, VkResult>)vkEnumeratePhysicalDevices_ptr.Value)(instance, physicalDeviceCountPtr, default);
		}
	}

	public VkResult vkEnumeratePhysicalDevices(VkInstance instance, Span<VkPhysicalDevice> physicalDevices)
	{
		uint physicalDeviceCount = checked((uint)physicalDevices.Length);
		fixed (VkPhysicalDevice* physicalDevicesPtr = physicalDevices)
		{
			return ((delegate* unmanaged<VkInstance, uint*, VkPhysicalDevice*, VkResult>)vkEnumeratePhysicalDevices_ptr.Value)(instance, &physicalDeviceCount, physicalDevicesPtr);
		}
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, out uint queueFamilyPropertyCount)
	{
		queueFamilyPropertyCount = default;
		fixed (uint* queueFamilyPropertyCountPtr = &queueFamilyPropertyCount)
		{
			((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties*, void>)vkGetPhysicalDeviceQueueFamilyProperties_ptr.Value)(physicalDevice, queueFamilyPropertyCountPtr, default);
		}
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, Span<VkQueueFamilyProperties> queueFamilyProperties)
	{
		uint queueFamilyPropertyCount = checked((uint)queueFamilyProperties.Length);
		fixed (VkQueueFamilyProperties* queueFamilyPropertiesPtr = queueFamilyProperties)
		{
			((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties*, void>)vkGetPhysicalDeviceQueueFamilyProperties_ptr.Value)(physicalDevice, &queueFamilyPropertyCount, queueFamilyPropertiesPtr);
		}
	}

	public VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, out uint propertyCount)
	{
		propertyCount = default;
		fixed (uint* propertyCountPtr = &propertyCount)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkLayerProperties*, VkResult>)vkEnumerateDeviceLayerProperties_ptr.Value)(physicalDevice, propertyCountPtr, default);
		}
	}

	public VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, Span<VkLayerProperties> properties)
	{
		uint propertyCount = checked((uint)properties.Length);
		fixed (VkLayerProperties* propertiesPtr = properties)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkLayerProperties*, VkResult>)vkEnumerateDeviceLayerProperties_ptr.Value)(physicalDevice, &propertyCount, propertiesPtr);
		}
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, out uint propertyCount)
	{
		propertyCount = default;
		fixed (uint* propertyCountPtr = &propertyCount)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void>)vkGetPhysicalDeviceSparseImageFormatProperties_ptr.Value)(physicalDevice, format, type, samples, usage, tiling, propertyCountPtr, default);
		}
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, Span<VkSparseImageFormatProperties> properties)
	{
		uint propertyCount = checked((uint)properties.Length);
		fixed (VkSparseImageFormatProperties* propertiesPtr = properties)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void>)vkGetPhysicalDeviceSparseImageFormatProperties_ptr.Value)(physicalDevice, format, type, samples, usage, tiling, &propertyCount, propertiesPtr);
		}
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, out uint queueFamilyPropertyCount)
	{
		queueFamilyPropertyCount = default;
		fixed (uint* queueFamilyPropertyCountPtr = &queueFamilyPropertyCount)
		{
			((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)vkGetPhysicalDeviceQueueFamilyProperties2_ptr.Value)(physicalDevice, queueFamilyPropertyCountPtr, default);
		}
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, Span<VkQueueFamilyProperties2> queueFamilyProperties)
	{
		uint queueFamilyPropertyCount = checked((uint)queueFamilyProperties.Length);
		fixed (VkQueueFamilyProperties2* queueFamilyPropertiesPtr = queueFamilyProperties)
		{
			((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)vkGetPhysicalDeviceQueueFamilyProperties2_ptr.Value)(physicalDevice, &queueFamilyPropertyCount, queueFamilyPropertiesPtr);
		}
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, out uint propertyCount)
	{
		propertyCount = default;
		fixed (uint* propertyCountPtr = &propertyCount)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)vkGetPhysicalDeviceSparseImageFormatProperties2_ptr.Value)(physicalDevice, formatInfo, propertyCountPtr, default);
		}
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, Span<VkSparseImageFormatProperties2> properties)
	{
		uint propertyCount = checked((uint)properties.Length);
		fixed (VkSparseImageFormatProperties2* propertiesPtr = properties)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)vkGetPhysicalDeviceSparseImageFormatProperties2_ptr.Value)(physicalDevice, formatInfo, &propertyCount, propertiesPtr);
		}
	}

	public VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out uint surfaceFormatCount)
	{
		surfaceFormatCount = default;
		fixed (uint* surfaceFormatCountPtr = &surfaceFormatCount)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR*, VkResult>)vkGetPhysicalDeviceSurfaceFormatsKHR_ptr.Value)(physicalDevice, surface, surfaceFormatCountPtr, default);
		}
	}

	public VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, Span<VkSurfaceFormatKHR> surfaceFormats)
	{
		uint surfaceFormatCount = checked((uint)surfaceFormats.Length);
		fixed (VkSurfaceFormatKHR* surfaceFormatsPtr = surfaceFormats)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR*, VkResult>)vkGetPhysicalDeviceSurfaceFormatsKHR_ptr.Value)(physicalDevice, surface, &surfaceFormatCount, surfaceFormatsPtr);
		}
	}

	public VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out uint presentModeCount)
	{
		presentModeCount = default;
		fixed (uint* presentModeCountPtr = &presentModeCount)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR*, VkResult>)vkGetPhysicalDeviceSurfacePresentModesKHR_ptr.Value)(physicalDevice, surface, presentModeCountPtr, default);
		}
	}

	public VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, Span<VkPresentModeKHR> presentModes)
	{
		uint presentModeCount = checked((uint)presentModes.Length);
		fixed (VkPresentModeKHR* presentModesPtr = presentModes)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR*, VkResult>)vkGetPhysicalDeviceSurfacePresentModesKHR_ptr.Value)(physicalDevice, surface, &presentModeCount, presentModesPtr);
		}
	}

	public VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out uint rectCount)
	{
		rectCount = default;
		fixed (uint* rectCountPtr = &rectCount)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D*, VkResult>)vkGetPhysicalDevicePresentRectanglesKHR_ptr.Value)(physicalDevice, surface, rectCountPtr, default);
		}
	}

	public VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, Span<VkRect2D> rects)
	{
		uint rectCount = checked((uint)rects.Length);
		fixed (VkRect2D* rectsPtr = rects)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D*, VkResult>)vkGetPhysicalDevicePresentRectanglesKHR_ptr.Value)(physicalDevice, surface, &rectCount, rectsPtr);
		}
	}

	public VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, out uint propertyCount)
	{
		propertyCount = default;
		fixed (uint* propertyCountPtr = &propertyCount)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR*, VkResult>)vkGetPhysicalDeviceDisplayPropertiesKHR_ptr.Value)(physicalDevice, propertyCountPtr, default);
		}
	}

	public VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, Span<VkDisplayPropertiesKHR> properties)
	{
		uint propertyCount = checked((uint)properties.Length);
		fixed (VkDisplayPropertiesKHR* propertiesPtr = properties)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR*, VkResult>)vkGetPhysicalDeviceDisplayPropertiesKHR_ptr.Value)(physicalDevice, &propertyCount, propertiesPtr);
		}
	}

	public VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, out uint propertyCount)
	{
		propertyCount = default;
		fixed (uint* propertyCountPtr = &propertyCount)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR*, VkResult>)vkGetPhysicalDeviceDisplayPlanePropertiesKHR_ptr.Value)(physicalDevice, propertyCountPtr, default);
		}
	}

	public VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, Span<VkDisplayPlanePropertiesKHR> properties)
	{
		uint propertyCount = checked((uint)properties.Length);
		fixed (VkDisplayPlanePropertiesKHR* propertiesPtr = properties)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR*, VkResult>)vkGetPhysicalDeviceDisplayPlanePropertiesKHR_ptr.Value)(physicalDevice, &propertyCount, propertiesPtr);
		}
	}

	public VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, out uint displayCount)
	{
		displayCount = default;
		fixed (uint* displayCountPtr = &displayCount)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkDisplayKHR*, VkResult>)vkGetDisplayPlaneSupportedDisplaysKHR_ptr.Value)(physicalDevice, planeIndex, displayCountPtr, default);
		}
	}

	public VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, Span<VkDisplayKHR> displays)
	{
		uint displayCount = checked((uint)displays.Length);
		fixed (VkDisplayKHR* displaysPtr = displays)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkDisplayKHR*, VkResult>)vkGetDisplayPlaneSupportedDisplaysKHR_ptr.Value)(physicalDevice, planeIndex, &displayCount, displaysPtr);
		}
	}

	public VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, out uint propertyCount)
	{
		propertyCount = default;
		fixed (uint* propertyCountPtr = &propertyCount)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR*, VkResult>)vkGetDisplayModePropertiesKHR_ptr.Value)(physicalDevice, display, propertyCountPtr, default);
		}
	}

	public VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, Span<VkDisplayModePropertiesKHR> properties)
	{
		uint propertyCount = checked((uint)properties.Length);
		fixed (VkDisplayModePropertiesKHR* propertiesPtr = properties)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR*, VkResult>)vkGetDisplayModePropertiesKHR_ptr.Value)(physicalDevice, display, &propertyCount, propertiesPtr);
		}
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, out uint queueFamilyPropertyCount)
	{
		queueFamilyPropertyCount = default;
		fixed (uint* queueFamilyPropertyCountPtr = &queueFamilyPropertyCount)
		{
			((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)vkGetPhysicalDeviceQueueFamilyProperties2KHR_ptr.Value)(physicalDevice, queueFamilyPropertyCountPtr, default);
		}
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, Span<VkQueueFamilyProperties2> queueFamilyProperties)
	{
		uint queueFamilyPropertyCount = checked((uint)queueFamilyProperties.Length);
		fixed (VkQueueFamilyProperties2* queueFamilyPropertiesPtr = queueFamilyProperties)
		{
			((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)vkGetPhysicalDeviceQueueFamilyProperties2KHR_ptr.Value)(physicalDevice, &queueFamilyPropertyCount, queueFamilyPropertiesPtr);
		}
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, out uint propertyCount)
	{
		propertyCount = default;
		fixed (uint* propertyCountPtr = &propertyCount)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)vkGetPhysicalDeviceSparseImageFormatProperties2KHR_ptr.Value)(physicalDevice, formatInfo, propertyCountPtr, default);
		}
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, Span<VkSparseImageFormatProperties2> properties)
	{
		uint propertyCount = checked((uint)properties.Length);
		fixed (VkSparseImageFormatProperties2* propertiesPtr = properties)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)vkGetPhysicalDeviceSparseImageFormatProperties2KHR_ptr.Value)(physicalDevice, formatInfo, &propertyCount, propertiesPtr);
		}
	}

	public VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, out uint physicalDeviceGroupCount)
	{
		physicalDeviceGroupCount = default;
		fixed (uint* physicalDeviceGroupCountPtr = &physicalDeviceGroupCount)
		{
			return ((delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)vkEnumeratePhysicalDeviceGroupsKHR_ptr.Value)(instance, physicalDeviceGroupCountPtr, default);
		}
	}

	public VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, Span<VkPhysicalDeviceGroupProperties> physicalDeviceGroupProperties)
	{
		uint physicalDeviceGroupCount = checked((uint)physicalDeviceGroupProperties.Length);
		fixed (VkPhysicalDeviceGroupProperties* physicalDeviceGroupPropertiesPtr = physicalDeviceGroupProperties)
		{
			return ((delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)vkEnumeratePhysicalDeviceGroupsKHR_ptr.Value)(instance, &physicalDeviceGroupCount, physicalDeviceGroupPropertiesPtr);
		}
	}

}
