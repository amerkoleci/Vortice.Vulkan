// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static Vortice.Vulkan.Vulkan;

namespace Vortice.Vulkan;

public unsafe partial class VkDeviceApi
{
	public VkDevice Device { get; }

	// Device functions
	public readonly PFN_vkVoidFunction vkDestroyDevice_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceQueue_ptr;
	public readonly PFN_vkVoidFunction vkQueueSubmit_ptr;
	public readonly PFN_vkVoidFunction vkQueueWaitIdle_ptr;
	public readonly PFN_vkVoidFunction vkDeviceWaitIdle_ptr;
	public readonly PFN_vkVoidFunction vkAllocateMemory_ptr;
	public readonly PFN_vkVoidFunction vkFreeMemory_ptr;
	public readonly PFN_vkVoidFunction vkMapMemory_ptr;
	public readonly PFN_vkVoidFunction vkUnmapMemory_ptr;
	public readonly PFN_vkVoidFunction vkFlushMappedMemoryRanges_ptr;
	public readonly PFN_vkVoidFunction vkInvalidateMappedMemoryRanges_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceMemoryCommitment_ptr;
	public readonly PFN_vkVoidFunction vkBindBufferMemory_ptr;
	public readonly PFN_vkVoidFunction vkBindImageMemory_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferMemoryRequirements_ptr;
	public readonly PFN_vkVoidFunction vkGetImageMemoryRequirements_ptr;
	public readonly PFN_vkVoidFunction vkGetImageSparseMemoryRequirements_ptr;
	public readonly PFN_vkVoidFunction vkQueueBindSparse_ptr;
	public readonly PFN_vkVoidFunction vkCreateFence_ptr;
	public readonly PFN_vkVoidFunction vkDestroyFence_ptr;
	public readonly PFN_vkVoidFunction vkResetFences_ptr;
	public readonly PFN_vkVoidFunction vkGetFenceStatus_ptr;
	public readonly PFN_vkVoidFunction vkWaitForFences_ptr;
	public readonly PFN_vkVoidFunction vkCreateSemaphore_ptr;
	public readonly PFN_vkVoidFunction vkDestroySemaphore_ptr;
	public readonly PFN_vkVoidFunction vkCreateEvent_ptr;
	public readonly PFN_vkVoidFunction vkDestroyEvent_ptr;
	public readonly PFN_vkVoidFunction vkGetEventStatus_ptr;
	public readonly PFN_vkVoidFunction vkSetEvent_ptr;
	public readonly PFN_vkVoidFunction vkResetEvent_ptr;
	public readonly PFN_vkVoidFunction vkCreateQueryPool_ptr;
	public readonly PFN_vkVoidFunction vkDestroyQueryPool_ptr;
	public readonly PFN_vkVoidFunction vkGetQueryPoolResults_ptr;
	public readonly PFN_vkVoidFunction vkCreateBuffer_ptr;
	public readonly PFN_vkVoidFunction vkDestroyBuffer_ptr;
	public readonly PFN_vkVoidFunction vkCreateBufferView_ptr;
	public readonly PFN_vkVoidFunction vkDestroyBufferView_ptr;
	public readonly PFN_vkVoidFunction vkCreateImage_ptr;
	public readonly PFN_vkVoidFunction vkDestroyImage_ptr;
	public readonly PFN_vkVoidFunction vkGetImageSubresourceLayout_ptr;
	public readonly PFN_vkVoidFunction vkCreateImageView_ptr;
	public readonly PFN_vkVoidFunction vkDestroyImageView_ptr;
	public readonly PFN_vkVoidFunction vkCreateShaderModule_ptr;
	public readonly PFN_vkVoidFunction vkDestroyShaderModule_ptr;
	public readonly PFN_vkVoidFunction vkCreatePipelineCache_ptr;
	public readonly PFN_vkVoidFunction vkDestroyPipelineCache_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelineCacheData_ptr;
	public readonly PFN_vkVoidFunction vkMergePipelineCaches_ptr;
	public readonly PFN_vkVoidFunction vkCreateGraphicsPipelines_ptr;
	public readonly PFN_vkVoidFunction vkCreateComputePipelines_ptr;
	public readonly PFN_vkVoidFunction vkDestroyPipeline_ptr;
	public readonly PFN_vkVoidFunction vkCreatePipelineLayout_ptr;
	public readonly PFN_vkVoidFunction vkDestroyPipelineLayout_ptr;
	public readonly PFN_vkVoidFunction vkCreateSampler_ptr;
	public readonly PFN_vkVoidFunction vkDestroySampler_ptr;
	public readonly PFN_vkVoidFunction vkCreateDescriptorSetLayout_ptr;
	public readonly PFN_vkVoidFunction vkDestroyDescriptorSetLayout_ptr;
	public readonly PFN_vkVoidFunction vkCreateDescriptorPool_ptr;
	public readonly PFN_vkVoidFunction vkDestroyDescriptorPool_ptr;
	public readonly PFN_vkVoidFunction vkResetDescriptorPool_ptr;
	public readonly PFN_vkVoidFunction vkAllocateDescriptorSets_ptr;
	public readonly PFN_vkVoidFunction vkFreeDescriptorSets_ptr;
	public readonly PFN_vkVoidFunction vkUpdateDescriptorSets_ptr;
	public readonly PFN_vkVoidFunction vkCreateFramebuffer_ptr;
	public readonly PFN_vkVoidFunction vkDestroyFramebuffer_ptr;
	public readonly PFN_vkVoidFunction vkCreateRenderPass_ptr;
	public readonly PFN_vkVoidFunction vkDestroyRenderPass_ptr;
	public readonly PFN_vkVoidFunction vkGetRenderAreaGranularity_ptr;
	public readonly PFN_vkVoidFunction vkCreateCommandPool_ptr;
	public readonly PFN_vkVoidFunction vkDestroyCommandPool_ptr;
	public readonly PFN_vkVoidFunction vkResetCommandPool_ptr;
	public readonly PFN_vkVoidFunction vkAllocateCommandBuffers_ptr;
	public readonly PFN_vkVoidFunction vkFreeCommandBuffers_ptr;
	public readonly PFN_vkVoidFunction vkBeginCommandBuffer_ptr;
	public readonly PFN_vkVoidFunction vkEndCommandBuffer_ptr;
	public readonly PFN_vkVoidFunction vkResetCommandBuffer_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindPipeline_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetViewport_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetScissor_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetLineWidth_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthBias_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetBlendConstants_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthBounds_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetStencilCompareMask_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetStencilWriteMask_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetStencilReference_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindDescriptorSets_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindIndexBuffer_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindVertexBuffers_ptr;
	public readonly PFN_vkVoidFunction vkCmdDraw_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndexed_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndirect_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndexedIndirect_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatch_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatchIndirect_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyBuffer_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyImage_ptr;
	public readonly PFN_vkVoidFunction vkCmdBlitImage_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyBufferToImage_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyImageToBuffer_ptr;
	public readonly PFN_vkVoidFunction vkCmdUpdateBuffer_ptr;
	public readonly PFN_vkVoidFunction vkCmdFillBuffer_ptr;
	public readonly PFN_vkVoidFunction vkCmdClearColorImage_ptr;
	public readonly PFN_vkVoidFunction vkCmdClearDepthStencilImage_ptr;
	public readonly PFN_vkVoidFunction vkCmdClearAttachments_ptr;
	public readonly PFN_vkVoidFunction vkCmdResolveImage_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetEvent_ptr;
	public readonly PFN_vkVoidFunction vkCmdResetEvent_ptr;
	public readonly PFN_vkVoidFunction vkCmdWaitEvents_ptr;
	public readonly PFN_vkVoidFunction vkCmdPipelineBarrier_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginQuery_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndQuery_ptr;
	public readonly PFN_vkVoidFunction vkCmdResetQueryPool_ptr;
	public readonly PFN_vkVoidFunction vkCmdWriteTimestamp_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyQueryPoolResults_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushConstants_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginRenderPass_ptr;
	public readonly PFN_vkVoidFunction vkCmdNextSubpass_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndRenderPass_ptr;
	public readonly PFN_vkVoidFunction vkCmdExecuteCommands_ptr;
	public readonly PFN_vkVoidFunction vkBindBufferMemory2_ptr;
	public readonly PFN_vkVoidFunction vkBindImageMemory2_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceGroupPeerMemoryFeatures_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDeviceMask_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatchBase_ptr;
	public readonly PFN_vkVoidFunction vkGetImageMemoryRequirements2_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferMemoryRequirements2_ptr;
	public readonly PFN_vkVoidFunction vkGetImageSparseMemoryRequirements2_ptr;
	public readonly PFN_vkVoidFunction vkTrimCommandPool_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceQueue2_ptr;
	public readonly PFN_vkVoidFunction vkCreateSamplerYcbcrConversion_ptr;
	public readonly PFN_vkVoidFunction vkDestroySamplerYcbcrConversion_ptr;
	public readonly PFN_vkVoidFunction vkCreateDescriptorUpdateTemplate_ptr;
	public readonly PFN_vkVoidFunction vkDestroyDescriptorUpdateTemplate_ptr;
	public readonly PFN_vkVoidFunction vkUpdateDescriptorSetWithTemplate_ptr;
	public readonly PFN_vkVoidFunction vkGetDescriptorSetLayoutSupport_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndirectCount_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndexedIndirectCount_ptr;
	public readonly PFN_vkVoidFunction vkCreateRenderPass2_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginRenderPass2_ptr;
	public readonly PFN_vkVoidFunction vkCmdNextSubpass2_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndRenderPass2_ptr;
	public readonly PFN_vkVoidFunction vkResetQueryPool_ptr;
	public readonly PFN_vkVoidFunction vkGetSemaphoreCounterValue_ptr;
	public readonly PFN_vkVoidFunction vkWaitSemaphores_ptr;
	public readonly PFN_vkVoidFunction vkSignalSemaphore_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferDeviceAddress_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferOpaqueCaptureAddress_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceMemoryOpaqueCaptureAddress_ptr;
	public readonly PFN_vkVoidFunction vkCreatePrivateDataSlot_ptr;
	public readonly PFN_vkVoidFunction vkDestroyPrivateDataSlot_ptr;
	public readonly PFN_vkVoidFunction vkSetPrivateData_ptr;
	public readonly PFN_vkVoidFunction vkGetPrivateData_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetEvent2_ptr;
	public readonly PFN_vkVoidFunction vkCmdResetEvent2_ptr;
	public readonly PFN_vkVoidFunction vkCmdWaitEvents2_ptr;
	public readonly PFN_vkVoidFunction vkCmdPipelineBarrier2_ptr;
	public readonly PFN_vkVoidFunction vkCmdWriteTimestamp2_ptr;
	public readonly PFN_vkVoidFunction vkQueueSubmit2_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyBuffer2_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyImage2_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyBufferToImage2_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyImageToBuffer2_ptr;
	public readonly PFN_vkVoidFunction vkCmdBlitImage2_ptr;
	public readonly PFN_vkVoidFunction vkCmdResolveImage2_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginRendering_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndRendering_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCullMode_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetFrontFace_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPrimitiveTopology_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetViewportWithCount_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetScissorWithCount_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindVertexBuffers2_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthTestEnable_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthWriteEnable_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthCompareOp_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthBoundsTestEnable_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetStencilTestEnable_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetStencilOp_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRasterizerDiscardEnable_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthBiasEnable_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPrimitiveRestartEnable_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceBufferMemoryRequirements_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceImageMemoryRequirements_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceImageSparseMemoryRequirements_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetLineStipple_ptr;
	public readonly PFN_vkVoidFunction vkMapMemory2_ptr;
	public readonly PFN_vkVoidFunction vkUnmapMemory2_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindIndexBuffer2_ptr;
	public readonly PFN_vkVoidFunction vkGetRenderingAreaGranularity_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceImageSubresourceLayout_ptr;
	public readonly PFN_vkVoidFunction vkGetImageSubresourceLayout2_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushDescriptorSet_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushDescriptorSetWithTemplate_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRenderingAttachmentLocations_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRenderingInputAttachmentIndices_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindDescriptorSets2_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushConstants2_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushDescriptorSet2_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushDescriptorSetWithTemplate2_ptr;
	public readonly PFN_vkVoidFunction vkCopyMemoryToImage_ptr;
	public readonly PFN_vkVoidFunction vkCopyImageToMemory_ptr;
	public readonly PFN_vkVoidFunction vkCopyImageToImage_ptr;
	public readonly PFN_vkVoidFunction vkTransitionImageLayout_ptr;
	public readonly PFN_vkVoidFunction vkCreateSwapchainKHR_ptr;
	public readonly PFN_vkVoidFunction vkDestroySwapchainKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetSwapchainImagesKHR_ptr;
	public readonly PFN_vkVoidFunction vkAcquireNextImageKHR_ptr;
	public readonly PFN_vkVoidFunction vkQueuePresentKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceGroupPresentCapabilitiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceGroupSurfacePresentModesKHR_ptr;
	public readonly PFN_vkVoidFunction vkAcquireNextImage2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateSharedSwapchainsKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateVideoSessionKHR_ptr;
	public readonly PFN_vkVoidFunction vkDestroyVideoSessionKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetVideoSessionMemoryRequirementsKHR_ptr;
	public readonly PFN_vkVoidFunction vkBindVideoSessionMemoryKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateVideoSessionParametersKHR_ptr;
	public readonly PFN_vkVoidFunction vkUpdateVideoSessionParametersKHR_ptr;
	public readonly PFN_vkVoidFunction vkDestroyVideoSessionParametersKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginVideoCodingKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndVideoCodingKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdControlVideoCodingKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdDecodeVideoKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginRenderingKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndRenderingKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceGroupPeerMemoryFeaturesKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDeviceMaskKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatchBaseKHR_ptr;
	public readonly PFN_vkVoidFunction vkTrimCommandPoolKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryFdKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryFdPropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkImportSemaphoreFdKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetSemaphoreFdKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushDescriptorSetKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushDescriptorSetWithTemplateKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateDescriptorUpdateTemplateKHR_ptr;
	public readonly PFN_vkVoidFunction vkDestroyDescriptorUpdateTemplateKHR_ptr;
	public readonly PFN_vkVoidFunction vkUpdateDescriptorSetWithTemplateKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateRenderPass2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginRenderPass2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdNextSubpass2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndRenderPass2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetSwapchainStatusKHR_ptr;
	public readonly PFN_vkVoidFunction vkImportFenceFdKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetFenceFdKHR_ptr;
	public readonly PFN_vkVoidFunction vkAcquireProfilingLockKHR_ptr;
	public readonly PFN_vkVoidFunction vkReleaseProfilingLockKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetImageMemoryRequirements2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferMemoryRequirements2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetImageSparseMemoryRequirements2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateSamplerYcbcrConversionKHR_ptr;
	public readonly PFN_vkVoidFunction vkDestroySamplerYcbcrConversionKHR_ptr;
	public readonly PFN_vkVoidFunction vkBindBufferMemory2KHR_ptr;
	public readonly PFN_vkVoidFunction vkBindImageMemory2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDescriptorSetLayoutSupportKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndirectCountKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndexedIndirectCountKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetSemaphoreCounterValueKHR_ptr;
	public readonly PFN_vkVoidFunction vkWaitSemaphoresKHR_ptr;
	public readonly PFN_vkVoidFunction vkSignalSemaphoreKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetFragmentShadingRateKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRenderingAttachmentLocationsKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRenderingInputAttachmentIndicesKHR_ptr;
	public readonly PFN_vkVoidFunction vkWaitForPresentKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferDeviceAddressKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferOpaqueCaptureAddressKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceMemoryOpaqueCaptureAddressKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateDeferredOperationKHR_ptr;
	public readonly PFN_vkVoidFunction vkDestroyDeferredOperationKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeferredOperationMaxConcurrencyKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeferredOperationResultKHR_ptr;
	public readonly PFN_vkVoidFunction vkDeferredOperationJoinKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelineExecutablePropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelineExecutableStatisticsKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelineExecutableInternalRepresentationsKHR_ptr;
	public readonly PFN_vkVoidFunction vkMapMemory2KHR_ptr;
	public readonly PFN_vkVoidFunction vkUnmapMemory2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetEncodedVideoSessionParametersKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdEncodeVideoKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetEvent2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdResetEvent2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdWaitEvents2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdPipelineBarrier2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdWriteTimestamp2KHR_ptr;
	public readonly PFN_vkVoidFunction vkQueueSubmit2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyBuffer2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyImage2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyBufferToImage2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyImageToBuffer2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdBlitImage2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdResolveImage2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdTraceRaysIndirect2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceBufferMemoryRequirementsKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceImageMemoryRequirementsKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceImageSparseMemoryRequirementsKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindIndexBuffer2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetRenderingAreaGranularityKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceImageSubresourceLayoutKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetImageSubresourceLayout2KHR_ptr;
	public readonly PFN_vkVoidFunction vkWaitForPresent2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCreatePipelineBinariesKHR_ptr;
	public readonly PFN_vkVoidFunction vkDestroyPipelineBinaryKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelineKeyKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelineBinaryDataKHR_ptr;
	public readonly PFN_vkVoidFunction vkReleaseCapturedPipelineDataKHR_ptr;
	public readonly PFN_vkVoidFunction vkReleaseSwapchainImagesKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetLineStippleKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetCalibratedTimestampsKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindDescriptorSets2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushConstants2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushDescriptorSet2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdPushDescriptorSetWithTemplate2KHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDescriptorBufferOffsets2EXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindDescriptorBufferEmbeddedSamplers2EXT_ptr;
	public readonly PFN_vkVoidFunction vkDebugMarkerSetObjectTagEXT_ptr;
	public readonly PFN_vkVoidFunction vkDebugMarkerSetObjectNameEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDebugMarkerBeginEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDebugMarkerEndEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDebugMarkerInsertEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindTransformFeedbackBuffersEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginTransformFeedbackEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndTransformFeedbackEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginQueryIndexedEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndQueryIndexedEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndirectByteCountEXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateCuModuleNVX_ptr;
	public readonly PFN_vkVoidFunction vkCreateCuFunctionNVX_ptr;
	public readonly PFN_vkVoidFunction vkDestroyCuModuleNVX_ptr;
	public readonly PFN_vkVoidFunction vkDestroyCuFunctionNVX_ptr;
	public readonly PFN_vkVoidFunction vkCmdCuLaunchKernelNVX_ptr;
	public readonly PFN_vkVoidFunction vkGetImageViewHandleNVX_ptr;
	public readonly PFN_vkVoidFunction vkGetImageViewHandle64NVX_ptr;
	public readonly PFN_vkVoidFunction vkGetImageViewAddressNVX_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndirectCountAMD_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawIndexedIndirectCountAMD_ptr;
	public readonly PFN_vkVoidFunction vkGetShaderInfoAMD_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginConditionalRenderingEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndConditionalRenderingEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetViewportWScalingNV_ptr;
	public readonly PFN_vkVoidFunction vkDisplayPowerControlEXT_ptr;
	public readonly PFN_vkVoidFunction vkRegisterDeviceEventEXT_ptr;
	public readonly PFN_vkVoidFunction vkRegisterDisplayEventEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetSwapchainCounterEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetRefreshCycleDurationGOOGLE_ptr;
	public readonly PFN_vkVoidFunction vkGetPastPresentationTimingGOOGLE_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDiscardRectangleEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDiscardRectangleEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDiscardRectangleModeEXT_ptr;
	public readonly PFN_vkVoidFunction vkSetHdrMetadataEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetSampleLocationsEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetImageDrmFormatModifierPropertiesEXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateValidationCacheEXT_ptr;
	public readonly PFN_vkVoidFunction vkDestroyValidationCacheEXT_ptr;
	public readonly PFN_vkVoidFunction vkMergeValidationCachesEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetValidationCacheDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindShadingRateImageNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetViewportShadingRatePaletteNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCoarseSampleOrderNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateAccelerationStructureNV_ptr;
	public readonly PFN_vkVoidFunction vkDestroyAccelerationStructureNV_ptr;
	public readonly PFN_vkVoidFunction vkGetAccelerationStructureMemoryRequirementsNV_ptr;
	public readonly PFN_vkVoidFunction vkBindAccelerationStructureMemoryNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdBuildAccelerationStructureNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyAccelerationStructureNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdTraceRaysNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateRayTracingPipelinesNV_ptr;
	public readonly PFN_vkVoidFunction vkGetRayTracingShaderGroupHandlesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetRayTracingShaderGroupHandlesNV_ptr;
	public readonly PFN_vkVoidFunction vkGetAccelerationStructureHandleNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdWriteAccelerationStructuresPropertiesNV_ptr;
	public readonly PFN_vkVoidFunction vkCompileDeferredNV_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryHostPointerPropertiesEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdWriteBufferMarkerAMD_ptr;
	public readonly PFN_vkVoidFunction vkCmdWriteBufferMarker2AMD_ptr;
	public readonly PFN_vkVoidFunction vkGetCalibratedTimestampsEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawMeshTasksNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawMeshTasksIndirectNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawMeshTasksIndirectCountNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetExclusiveScissorEnableNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetExclusiveScissorNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCheckpointNV_ptr;
	public readonly PFN_vkVoidFunction vkGetQueueCheckpointDataNV_ptr;
	public readonly PFN_vkVoidFunction vkGetQueueCheckpointData2NV_ptr;
	public readonly PFN_vkVoidFunction vkInitializePerformanceApiINTEL_ptr;
	public readonly PFN_vkVoidFunction vkUninitializePerformanceApiINTEL_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPerformanceMarkerINTEL_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPerformanceStreamMarkerINTEL_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPerformanceOverrideINTEL_ptr;
	public readonly PFN_vkVoidFunction vkAcquirePerformanceConfigurationINTEL_ptr;
	public readonly PFN_vkVoidFunction vkReleasePerformanceConfigurationINTEL_ptr;
	public readonly PFN_vkVoidFunction vkQueueSetPerformanceConfigurationINTEL_ptr;
	public readonly PFN_vkVoidFunction vkGetPerformanceParameterINTEL_ptr;
	public readonly PFN_vkVoidFunction vkSetLocalDimmingAMD_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferDeviceAddressEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetLineStippleEXT_ptr;
	public readonly PFN_vkVoidFunction vkResetQueryPoolEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCullModeEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetFrontFaceEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPrimitiveTopologyEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetViewportWithCountEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetScissorWithCountEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindVertexBuffers2EXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthTestEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthWriteEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthCompareOpEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthBoundsTestEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetStencilTestEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetStencilOpEXT_ptr;
	public readonly PFN_vkVoidFunction vkCopyMemoryToImageEXT_ptr;
	public readonly PFN_vkVoidFunction vkCopyImageToMemoryEXT_ptr;
	public readonly PFN_vkVoidFunction vkCopyImageToImageEXT_ptr;
	public readonly PFN_vkVoidFunction vkTransitionImageLayoutEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetImageSubresourceLayout2EXT_ptr;
	public readonly PFN_vkVoidFunction vkReleaseSwapchainImagesEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetGeneratedCommandsMemoryRequirementsNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdPreprocessGeneratedCommandsNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdExecuteGeneratedCommandsNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindPipelineShaderGroupNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateIndirectCommandsLayoutNV_ptr;
	public readonly PFN_vkVoidFunction vkDestroyIndirectCommandsLayoutNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthBias2EXT_ptr;
	public readonly PFN_vkVoidFunction vkCreatePrivateDataSlotEXT_ptr;
	public readonly PFN_vkVoidFunction vkDestroyPrivateDataSlotEXT_ptr;
	public readonly PFN_vkVoidFunction vkSetPrivateDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetPrivateDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatchTileQCOM_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginPerTileExecutionQCOM_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndPerTileExecutionQCOM_ptr;
	public readonly PFN_vkVoidFunction vkGetDescriptorSetLayoutSizeEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetDescriptorSetLayoutBindingOffsetEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetDescriptorEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindDescriptorBuffersEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDescriptorBufferOffsetsEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindDescriptorBufferEmbeddedSamplersEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetBufferOpaqueCaptureDescriptorDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetImageOpaqueCaptureDescriptorDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetImageViewOpaqueCaptureDescriptorDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetSamplerOpaqueCaptureDescriptorDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetFragmentShadingRateEnumNV_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceFaultInfoEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetVertexInputEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI_ptr;
	public readonly PFN_vkVoidFunction vkCmdSubpassShadingHUAWEI_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindInvocationMaskHUAWEI_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryRemoteAddressNV_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelinePropertiesEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPatchControlPointsEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRasterizerDiscardEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthBiasEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetLogicOpEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPrimitiveRestartEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetColorWriteEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawMultiEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawMultiIndexedEXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateMicromapEXT_ptr;
	public readonly PFN_vkVoidFunction vkDestroyMicromapEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBuildMicromapsEXT_ptr;
	public readonly PFN_vkVoidFunction vkBuildMicromapsEXT_ptr;
	public readonly PFN_vkVoidFunction vkCopyMicromapEXT_ptr;
	public readonly PFN_vkVoidFunction vkCopyMicromapToMemoryEXT_ptr;
	public readonly PFN_vkVoidFunction vkCopyMemoryToMicromapEXT_ptr;
	public readonly PFN_vkVoidFunction vkWriteMicromapsPropertiesEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyMicromapEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyMicromapToMemoryEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyMemoryToMicromapEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdWriteMicromapsPropertiesEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceMicromapCompatibilityEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetMicromapBuildSizesEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawClusterHUAWEI_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawClusterIndirectHUAWEI_ptr;
	public readonly PFN_vkVoidFunction vkSetDeviceMemoryPriorityEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetDescriptorSetLayoutHostMappingInfoVALVE_ptr;
	public readonly PFN_vkVoidFunction vkGetDescriptorSetHostMappingVALVE_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyMemoryIndirectNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyMemoryToImageIndirectNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdDecompressMemoryNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdDecompressMemoryIndirectCountNV_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelineIndirectMemoryRequirementsNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdUpdatePipelineIndirectBufferNV_ptr;
	public readonly PFN_vkVoidFunction vkGetPipelineIndirectDeviceAddressNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthClampEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetPolygonModeEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRasterizationSamplesEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetSampleMaskEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetAlphaToCoverageEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetAlphaToOneEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetLogicOpEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetColorBlendEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetColorBlendEquationEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetColorWriteMaskEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetTessellationDomainOriginEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRasterizationStreamEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetConservativeRasterizationModeEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetExtraPrimitiveOverestimationSizeEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthClipEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetSampleLocationsEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetColorBlendAdvancedEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetProvokingVertexModeEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetLineRasterizationModeEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetLineStippleEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthClipNegativeOneToOneEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetViewportWScalingEnableNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetViewportSwizzleNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCoverageToColorEnableNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCoverageToColorLocationNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCoverageModulationModeNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCoverageModulationTableEnableNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCoverageModulationTableNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetShadingRateImageEnableNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRepresentativeFragmentTestEnableNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetCoverageReductionModeNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateTensorARM_ptr;
	public readonly PFN_vkVoidFunction vkDestroyTensorARM_ptr;
	public readonly PFN_vkVoidFunction vkCreateTensorViewARM_ptr;
	public readonly PFN_vkVoidFunction vkDestroyTensorViewARM_ptr;
	public readonly PFN_vkVoidFunction vkGetTensorMemoryRequirementsARM_ptr;
	public readonly PFN_vkVoidFunction vkBindTensorMemoryARM_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceTensorMemoryRequirementsARM_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyTensorARM_ptr;
	public readonly PFN_vkVoidFunction vkGetTensorOpaqueCaptureDescriptorDataARM_ptr;
	public readonly PFN_vkVoidFunction vkGetTensorViewOpaqueCaptureDescriptorDataARM_ptr;
	public readonly PFN_vkVoidFunction vkGetShaderModuleIdentifierEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetShaderModuleCreateInfoIdentifierEXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateOpticalFlowSessionNV_ptr;
	public readonly PFN_vkVoidFunction vkDestroyOpticalFlowSessionNV_ptr;
	public readonly PFN_vkVoidFunction vkBindOpticalFlowSessionImageNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdOpticalFlowExecuteNV_ptr;
	public readonly PFN_vkVoidFunction vkAntiLagUpdateAMD_ptr;
	public readonly PFN_vkVoidFunction vkCreateShadersEXT_ptr;
	public readonly PFN_vkVoidFunction vkDestroyShaderEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetShaderBinaryDataEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindShadersEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetDepthClampRangeEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetFramebufferTilePropertiesQCOM_ptr;
	public readonly PFN_vkVoidFunction vkGetDynamicRenderingTilePropertiesQCOM_ptr;
	public readonly PFN_vkVoidFunction vkConvertCooperativeVectorMatrixNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdConvertCooperativeVectorMatrixNV_ptr;
	public readonly PFN_vkVoidFunction vkSetLatencySleepModeNV_ptr;
	public readonly PFN_vkVoidFunction vkLatencySleepNV_ptr;
	public readonly PFN_vkVoidFunction vkSetLatencyMarkerNV_ptr;
	public readonly PFN_vkVoidFunction vkGetLatencyTimingsNV_ptr;
	public readonly PFN_vkVoidFunction vkQueueNotifyOutOfBandNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateDataGraphPipelinesARM_ptr;
	public readonly PFN_vkVoidFunction vkCreateDataGraphPipelineSessionARM_ptr;
	public readonly PFN_vkVoidFunction vkGetDataGraphPipelineSessionBindPointRequirementsARM_ptr;
	public readonly PFN_vkVoidFunction vkGetDataGraphPipelineSessionMemoryRequirementsARM_ptr;
	public readonly PFN_vkVoidFunction vkBindDataGraphPipelineSessionMemoryARM_ptr;
	public readonly PFN_vkVoidFunction vkDestroyDataGraphPipelineSessionARM_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatchDataGraphARM_ptr;
	public readonly PFN_vkVoidFunction vkGetDataGraphPipelineAvailablePropertiesARM_ptr;
	public readonly PFN_vkVoidFunction vkGetDataGraphPipelinePropertiesARM_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetAttachmentFeedbackLoopEnableEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBindTileMemoryQCOM_ptr;
	public readonly PFN_vkVoidFunction vkCreateExternalComputeQueueNV_ptr;
	public readonly PFN_vkVoidFunction vkDestroyExternalComputeQueueNV_ptr;
	public readonly PFN_vkVoidFunction vkGetExternalComputeQueueDataNV_ptr;
	public readonly PFN_vkVoidFunction vkGetClusterAccelerationStructureBuildSizesNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdBuildClusterAccelerationStructureIndirectNV_ptr;
	public readonly PFN_vkVoidFunction vkGetPartitionedAccelerationStructuresBuildSizesNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdBuildPartitionedAccelerationStructuresNV_ptr;
	public readonly PFN_vkVoidFunction vkGetGeneratedCommandsMemoryRequirementsEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdPreprocessGeneratedCommandsEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdExecuteGeneratedCommandsEXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateIndirectCommandsLayoutEXT_ptr;
	public readonly PFN_vkVoidFunction vkDestroyIndirectCommandsLayoutEXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateIndirectExecutionSetEXT_ptr;
	public readonly PFN_vkVoidFunction vkDestroyIndirectExecutionSetEXT_ptr;
	public readonly PFN_vkVoidFunction vkUpdateIndirectExecutionSetPipelineEXT_ptr;
	public readonly PFN_vkVoidFunction vkUpdateIndirectExecutionSetShaderEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndRendering2EXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateAccelerationStructureKHR_ptr;
	public readonly PFN_vkVoidFunction vkDestroyAccelerationStructureKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdBuildAccelerationStructuresKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdBuildAccelerationStructuresIndirectKHR_ptr;
	public readonly PFN_vkVoidFunction vkBuildAccelerationStructuresKHR_ptr;
	public readonly PFN_vkVoidFunction vkCopyAccelerationStructureKHR_ptr;
	public readonly PFN_vkVoidFunction vkCopyAccelerationStructureToMemoryKHR_ptr;
	public readonly PFN_vkVoidFunction vkCopyMemoryToAccelerationStructureKHR_ptr;
	public readonly PFN_vkVoidFunction vkWriteAccelerationStructuresPropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyAccelerationStructureKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyAccelerationStructureToMemoryKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdCopyMemoryToAccelerationStructureKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetAccelerationStructureDeviceAddressKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdWriteAccelerationStructuresPropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceAccelerationStructureCompatibilityKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetAccelerationStructureBuildSizesKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdTraceRaysKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateRayTracingPipelinesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetRayTracingCaptureReplayShaderGroupHandlesKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdTraceRaysIndirectKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetRayTracingShaderGroupStackSizeKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdSetRayTracingPipelineStackSizeKHR_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawMeshTasksEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawMeshTasksIndirectEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdDrawMeshTasksIndirectCountEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetAndroidHardwareBufferPropertiesANDROID_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryAndroidHardwareBufferANDROID_ptr;
	public readonly PFN_vkVoidFunction vkExportMetalObjectsEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryMetalHandleEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryMetalHandlePropertiesEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryWin32HandleKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryWin32HandlePropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkImportSemaphoreWin32HandleKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetSemaphoreWin32HandleKHR_ptr;
	public readonly PFN_vkVoidFunction vkImportFenceWin32HandleKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetFenceWin32HandleKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetMemoryWin32HandleNV_ptr;
	public readonly PFN_vkVoidFunction vkAcquireFullScreenExclusiveModeEXT_ptr;
	public readonly PFN_vkVoidFunction vkReleaseFullScreenExclusiveModeEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceGroupSurfacePresentModes2EXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateExecutionGraphPipelinesAMDX_ptr;
	public readonly PFN_vkVoidFunction vkGetExecutionGraphPipelineScratchSizeAMDX_ptr;
	public readonly PFN_vkVoidFunction vkGetExecutionGraphPipelineNodeIndexAMDX_ptr;
	public readonly PFN_vkVoidFunction vkCmdInitializeGraphScratchMemoryAMDX_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatchGraphAMDX_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatchGraphIndirectAMDX_ptr;
	public readonly PFN_vkVoidFunction vkCmdDispatchGraphIndirectCountAMDX_ptr;
	public readonly PFN_vkVoidFunction vkCreateCudaModuleNV_ptr;
	public readonly PFN_vkVoidFunction vkGetCudaModuleCacheNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateCudaFunctionNV_ptr;
	public readonly PFN_vkVoidFunction vkDestroyCudaModuleNV_ptr;
	public readonly PFN_vkVoidFunction vkDestroyCudaFunctionNV_ptr;
	public readonly PFN_vkVoidFunction vkCmdCudaLaunchKernelNV_ptr;

	public VkDeviceApi(VkInstanceApi api, in VkDevice device)
	{
		Device = device;

		vkDestroyDevice_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyDevice"u8);
		vkGetDeviceQueue_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceQueue"u8);
		vkQueueSubmit_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkQueueSubmit"u8);
		vkQueueWaitIdle_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkQueueWaitIdle"u8);
		vkDeviceWaitIdle_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDeviceWaitIdle"u8);
		vkAllocateMemory_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAllocateMemory"u8);
		vkFreeMemory_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkFreeMemory"u8);
		vkMapMemory_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkMapMemory"u8);
		vkUnmapMemory_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUnmapMemory"u8);
		vkFlushMappedMemoryRanges_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkFlushMappedMemoryRanges"u8);
		vkInvalidateMappedMemoryRanges_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkInvalidateMappedMemoryRanges"u8);
		vkGetDeviceMemoryCommitment_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceMemoryCommitment"u8);
		vkBindBufferMemory_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindBufferMemory"u8);
		vkBindImageMemory_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindImageMemory"u8);
		vkGetBufferMemoryRequirements_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferMemoryRequirements"u8);
		vkGetImageMemoryRequirements_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageMemoryRequirements"u8);
		vkGetImageSparseMemoryRequirements_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageSparseMemoryRequirements"u8);
		vkQueueBindSparse_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkQueueBindSparse"u8);
		vkCreateFence_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateFence"u8);
		vkDestroyFence_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyFence"u8);
		vkResetFences_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkResetFences"u8);
		vkGetFenceStatus_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetFenceStatus"u8);
		vkWaitForFences_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkWaitForFences"u8);
		vkCreateSemaphore_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateSemaphore"u8);
		vkDestroySemaphore_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroySemaphore"u8);
		vkCreateEvent_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateEvent"u8);
		vkDestroyEvent_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyEvent"u8);
		vkGetEventStatus_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetEventStatus"u8);
		vkSetEvent_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSetEvent"u8);
		vkResetEvent_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkResetEvent"u8);
		vkCreateQueryPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateQueryPool"u8);
		vkDestroyQueryPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyQueryPool"u8);
		vkGetQueryPoolResults_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetQueryPoolResults"u8);
		vkCreateBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateBuffer"u8);
		vkDestroyBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyBuffer"u8);
		vkCreateBufferView_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateBufferView"u8);
		vkDestroyBufferView_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyBufferView"u8);
		vkCreateImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateImage"u8);
		vkDestroyImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyImage"u8);
		vkGetImageSubresourceLayout_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageSubresourceLayout"u8);
		vkCreateImageView_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateImageView"u8);
		vkDestroyImageView_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyImageView"u8);
		vkCreateShaderModule_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateShaderModule"u8);
		vkDestroyShaderModule_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyShaderModule"u8);
		vkCreatePipelineCache_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreatePipelineCache"u8);
		vkDestroyPipelineCache_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyPipelineCache"u8);
		vkGetPipelineCacheData_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelineCacheData"u8);
		vkMergePipelineCaches_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkMergePipelineCaches"u8);
		vkCreateGraphicsPipelines_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateGraphicsPipelines"u8);
		vkCreateComputePipelines_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateComputePipelines"u8);
		vkDestroyPipeline_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyPipeline"u8);
		vkCreatePipelineLayout_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreatePipelineLayout"u8);
		vkDestroyPipelineLayout_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyPipelineLayout"u8);
		vkCreateSampler_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateSampler"u8);
		vkDestroySampler_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroySampler"u8);
		vkCreateDescriptorSetLayout_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateDescriptorSetLayout"u8);
		vkDestroyDescriptorSetLayout_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyDescriptorSetLayout"u8);
		vkCreateDescriptorPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateDescriptorPool"u8);
		vkDestroyDescriptorPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyDescriptorPool"u8);
		vkResetDescriptorPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkResetDescriptorPool"u8);
		vkAllocateDescriptorSets_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAllocateDescriptorSets"u8);
		vkFreeDescriptorSets_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkFreeDescriptorSets"u8);
		vkUpdateDescriptorSets_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUpdateDescriptorSets"u8);
		vkCreateFramebuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateFramebuffer"u8);
		vkDestroyFramebuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyFramebuffer"u8);
		vkCreateRenderPass_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateRenderPass"u8);
		vkDestroyRenderPass_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyRenderPass"u8);
		vkGetRenderAreaGranularity_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetRenderAreaGranularity"u8);
		vkCreateCommandPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateCommandPool"u8);
		vkDestroyCommandPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyCommandPool"u8);
		vkResetCommandPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkResetCommandPool"u8);
		vkAllocateCommandBuffers_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAllocateCommandBuffers"u8);
		vkFreeCommandBuffers_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkFreeCommandBuffers"u8);
		vkBeginCommandBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBeginCommandBuffer"u8);
		vkEndCommandBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkEndCommandBuffer"u8);
		vkResetCommandBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkResetCommandBuffer"u8);
		vkCmdBindPipeline_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindPipeline"u8);
		vkCmdSetViewport_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetViewport"u8);
		vkCmdSetScissor_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetScissor"u8);
		vkCmdSetLineWidth_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetLineWidth"u8);
		vkCmdSetDepthBias_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthBias"u8);
		vkCmdSetBlendConstants_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetBlendConstants"u8);
		vkCmdSetDepthBounds_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthBounds"u8);
		vkCmdSetStencilCompareMask_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetStencilCompareMask"u8);
		vkCmdSetStencilWriteMask_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetStencilWriteMask"u8);
		vkCmdSetStencilReference_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetStencilReference"u8);
		vkCmdBindDescriptorSets_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindDescriptorSets"u8);
		vkCmdBindIndexBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindIndexBuffer"u8);
		vkCmdBindVertexBuffers_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindVertexBuffers"u8);
		vkCmdDraw_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDraw"u8);
		vkCmdDrawIndexed_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndexed"u8);
		vkCmdDrawIndirect_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndirect"u8);
		vkCmdDrawIndexedIndirect_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndexedIndirect"u8);
		vkCmdDispatch_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatch"u8);
		vkCmdDispatchIndirect_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatchIndirect"u8);
		vkCmdCopyBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyBuffer"u8);
		vkCmdCopyImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyImage"u8);
		vkCmdBlitImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBlitImage"u8);
		vkCmdCopyBufferToImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyBufferToImage"u8);
		vkCmdCopyImageToBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyImageToBuffer"u8);
		vkCmdUpdateBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdUpdateBuffer"u8);
		vkCmdFillBuffer_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdFillBuffer"u8);
		vkCmdClearColorImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdClearColorImage"u8);
		vkCmdClearDepthStencilImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdClearDepthStencilImage"u8);
		vkCmdClearAttachments_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdClearAttachments"u8);
		vkCmdResolveImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdResolveImage"u8);
		vkCmdSetEvent_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetEvent"u8);
		vkCmdResetEvent_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdResetEvent"u8);
		vkCmdWaitEvents_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWaitEvents"u8);
		vkCmdPipelineBarrier_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPipelineBarrier"u8);
		vkCmdBeginQuery_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginQuery"u8);
		vkCmdEndQuery_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndQuery"u8);
		vkCmdResetQueryPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdResetQueryPool"u8);
		vkCmdWriteTimestamp_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWriteTimestamp"u8);
		vkCmdCopyQueryPoolResults_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyQueryPoolResults"u8);
		vkCmdPushConstants_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushConstants"u8);
		vkCmdBeginRenderPass_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginRenderPass"u8);
		vkCmdNextSubpass_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdNextSubpass"u8);
		vkCmdEndRenderPass_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndRenderPass"u8);
		vkCmdExecuteCommands_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdExecuteCommands"u8);
		vkBindBufferMemory2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindBufferMemory2"u8);
		vkBindImageMemory2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindImageMemory2"u8);
		vkGetDeviceGroupPeerMemoryFeatures_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceGroupPeerMemoryFeatures"u8);
		vkCmdSetDeviceMask_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDeviceMask"u8);
		vkCmdDispatchBase_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatchBase"u8);
		vkGetImageMemoryRequirements2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageMemoryRequirements2"u8);
		vkGetBufferMemoryRequirements2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferMemoryRequirements2"u8);
		vkGetImageSparseMemoryRequirements2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageSparseMemoryRequirements2"u8);
		vkTrimCommandPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkTrimCommandPool"u8);
		vkGetDeviceQueue2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceQueue2"u8);
		vkCreateSamplerYcbcrConversion_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateSamplerYcbcrConversion"u8);
		vkDestroySamplerYcbcrConversion_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroySamplerYcbcrConversion"u8);
		vkCreateDescriptorUpdateTemplate_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateDescriptorUpdateTemplate"u8);
		vkDestroyDescriptorUpdateTemplate_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyDescriptorUpdateTemplate"u8);
		vkUpdateDescriptorSetWithTemplate_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUpdateDescriptorSetWithTemplate"u8);
		vkGetDescriptorSetLayoutSupport_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDescriptorSetLayoutSupport"u8);
		vkCmdDrawIndirectCount_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndirectCount"u8);
		vkCmdDrawIndexedIndirectCount_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndexedIndirectCount"u8);
		vkCreateRenderPass2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateRenderPass2"u8);
		vkCmdBeginRenderPass2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginRenderPass2"u8);
		vkCmdNextSubpass2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdNextSubpass2"u8);
		vkCmdEndRenderPass2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndRenderPass2"u8);
		vkResetQueryPool_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkResetQueryPool"u8);
		vkGetSemaphoreCounterValue_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetSemaphoreCounterValue"u8);
		vkWaitSemaphores_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkWaitSemaphores"u8);
		vkSignalSemaphore_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSignalSemaphore"u8);
		vkGetBufferDeviceAddress_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferDeviceAddress"u8);
		vkGetBufferOpaqueCaptureAddress_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferOpaqueCaptureAddress"u8);
		vkGetDeviceMemoryOpaqueCaptureAddress_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceMemoryOpaqueCaptureAddress"u8);
		vkCreatePrivateDataSlot_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreatePrivateDataSlot"u8);
		vkDestroyPrivateDataSlot_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyPrivateDataSlot"u8);
		vkSetPrivateData_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSetPrivateData"u8);
		vkGetPrivateData_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPrivateData"u8);
		vkCmdSetEvent2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetEvent2"u8);
		vkCmdResetEvent2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdResetEvent2"u8);
		vkCmdWaitEvents2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWaitEvents2"u8);
		vkCmdPipelineBarrier2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPipelineBarrier2"u8);
		vkCmdWriteTimestamp2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWriteTimestamp2"u8);
		vkQueueSubmit2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkQueueSubmit2"u8);
		vkCmdCopyBuffer2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyBuffer2"u8);
		vkCmdCopyImage2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyImage2"u8);
		vkCmdCopyBufferToImage2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyBufferToImage2"u8);
		vkCmdCopyImageToBuffer2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyImageToBuffer2"u8);
		vkCmdBlitImage2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBlitImage2"u8);
		vkCmdResolveImage2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdResolveImage2"u8);
		vkCmdBeginRendering_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginRendering"u8);
		vkCmdEndRendering_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndRendering"u8);
		vkCmdSetCullMode_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCullMode"u8);
		vkCmdSetFrontFace_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetFrontFace"u8);
		vkCmdSetPrimitiveTopology_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPrimitiveTopology"u8);
		vkCmdSetViewportWithCount_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetViewportWithCount"u8);
		vkCmdSetScissorWithCount_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetScissorWithCount"u8);
		vkCmdBindVertexBuffers2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindVertexBuffers2"u8);
		vkCmdSetDepthTestEnable_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthTestEnable"u8);
		vkCmdSetDepthWriteEnable_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthWriteEnable"u8);
		vkCmdSetDepthCompareOp_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthCompareOp"u8);
		vkCmdSetDepthBoundsTestEnable_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthBoundsTestEnable"u8);
		vkCmdSetStencilTestEnable_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetStencilTestEnable"u8);
		vkCmdSetStencilOp_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetStencilOp"u8);
		vkCmdSetRasterizerDiscardEnable_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRasterizerDiscardEnable"u8);
		vkCmdSetDepthBiasEnable_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthBiasEnable"u8);
		vkCmdSetPrimitiveRestartEnable_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPrimitiveRestartEnable"u8);
		vkGetDeviceBufferMemoryRequirements_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceBufferMemoryRequirements"u8);
		vkGetDeviceImageMemoryRequirements_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceImageMemoryRequirements"u8);
		vkGetDeviceImageSparseMemoryRequirements_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceImageSparseMemoryRequirements"u8);
		vkCmdSetLineStipple_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetLineStipple"u8);
		vkMapMemory2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkMapMemory2"u8);
		vkUnmapMemory2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUnmapMemory2"u8);
		vkCmdBindIndexBuffer2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindIndexBuffer2"u8);
		vkGetRenderingAreaGranularity_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetRenderingAreaGranularity"u8);
		vkGetDeviceImageSubresourceLayout_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceImageSubresourceLayout"u8);
		vkGetImageSubresourceLayout2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageSubresourceLayout2"u8);
		vkCmdPushDescriptorSet_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushDescriptorSet"u8);
		vkCmdPushDescriptorSetWithTemplate_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushDescriptorSetWithTemplate"u8);
		vkCmdSetRenderingAttachmentLocations_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRenderingAttachmentLocations"u8);
		vkCmdSetRenderingInputAttachmentIndices_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRenderingInputAttachmentIndices"u8);
		vkCmdBindDescriptorSets2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindDescriptorSets2"u8);
		vkCmdPushConstants2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushConstants2"u8);
		vkCmdPushDescriptorSet2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushDescriptorSet2"u8);
		vkCmdPushDescriptorSetWithTemplate2_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushDescriptorSetWithTemplate2"u8);
		vkCopyMemoryToImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyMemoryToImage"u8);
		vkCopyImageToMemory_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyImageToMemory"u8);
		vkCopyImageToImage_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyImageToImage"u8);
		vkTransitionImageLayout_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkTransitionImageLayout"u8);
		vkCreateSwapchainKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateSwapchainKHR"u8);
		vkDestroySwapchainKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroySwapchainKHR"u8);
		vkGetSwapchainImagesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetSwapchainImagesKHR"u8);
		vkAcquireNextImageKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAcquireNextImageKHR"u8);
		vkQueuePresentKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkQueuePresentKHR"u8);
		vkGetDeviceGroupPresentCapabilitiesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceGroupPresentCapabilitiesKHR"u8);
		vkGetDeviceGroupSurfacePresentModesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceGroupSurfacePresentModesKHR"u8);
		vkAcquireNextImage2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAcquireNextImage2KHR"u8);
		vkCreateSharedSwapchainsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateSharedSwapchainsKHR"u8);
		vkCreateVideoSessionKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateVideoSessionKHR"u8);
		vkDestroyVideoSessionKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyVideoSessionKHR"u8);
		vkGetVideoSessionMemoryRequirementsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetVideoSessionMemoryRequirementsKHR"u8);
		vkBindVideoSessionMemoryKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindVideoSessionMemoryKHR"u8);
		vkCreateVideoSessionParametersKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateVideoSessionParametersKHR"u8);
		vkUpdateVideoSessionParametersKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUpdateVideoSessionParametersKHR"u8);
		vkDestroyVideoSessionParametersKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyVideoSessionParametersKHR"u8);
		vkCmdBeginVideoCodingKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginVideoCodingKHR"u8);
		vkCmdEndVideoCodingKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndVideoCodingKHR"u8);
		vkCmdControlVideoCodingKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdControlVideoCodingKHR"u8);
		vkCmdDecodeVideoKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDecodeVideoKHR"u8);
		vkCmdBeginRenderingKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginRenderingKHR"u8);
		vkCmdEndRenderingKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndRenderingKHR"u8);
		vkGetDeviceGroupPeerMemoryFeaturesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceGroupPeerMemoryFeaturesKHR"u8);
		vkCmdSetDeviceMaskKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDeviceMaskKHR"u8);
		vkCmdDispatchBaseKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatchBaseKHR"u8);
		vkTrimCommandPoolKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkTrimCommandPoolKHR"u8);
		vkGetMemoryFdKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryFdKHR"u8);
		vkGetMemoryFdPropertiesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryFdPropertiesKHR"u8);
		vkImportSemaphoreFdKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkImportSemaphoreFdKHR"u8);
		vkGetSemaphoreFdKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetSemaphoreFdKHR"u8);
		vkCmdPushDescriptorSetKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushDescriptorSetKHR"u8);
		vkCmdPushDescriptorSetWithTemplateKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushDescriptorSetWithTemplateKHR"u8);
		vkCreateDescriptorUpdateTemplateKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateDescriptorUpdateTemplateKHR"u8);
		vkDestroyDescriptorUpdateTemplateKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyDescriptorUpdateTemplateKHR"u8);
		vkUpdateDescriptorSetWithTemplateKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUpdateDescriptorSetWithTemplateKHR"u8);
		vkCreateRenderPass2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateRenderPass2KHR"u8);
		vkCmdBeginRenderPass2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginRenderPass2KHR"u8);
		vkCmdNextSubpass2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdNextSubpass2KHR"u8);
		vkCmdEndRenderPass2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndRenderPass2KHR"u8);
		vkGetSwapchainStatusKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetSwapchainStatusKHR"u8);
		vkImportFenceFdKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkImportFenceFdKHR"u8);
		vkGetFenceFdKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetFenceFdKHR"u8);
		vkAcquireProfilingLockKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAcquireProfilingLockKHR"u8);
		vkReleaseProfilingLockKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkReleaseProfilingLockKHR"u8);
		vkGetImageMemoryRequirements2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageMemoryRequirements2KHR"u8);
		vkGetBufferMemoryRequirements2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferMemoryRequirements2KHR"u8);
		vkGetImageSparseMemoryRequirements2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageSparseMemoryRequirements2KHR"u8);
		vkCreateSamplerYcbcrConversionKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateSamplerYcbcrConversionKHR"u8);
		vkDestroySamplerYcbcrConversionKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroySamplerYcbcrConversionKHR"u8);
		vkBindBufferMemory2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindBufferMemory2KHR"u8);
		vkBindImageMemory2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindImageMemory2KHR"u8);
		vkGetDescriptorSetLayoutSupportKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDescriptorSetLayoutSupportKHR"u8);
		vkCmdDrawIndirectCountKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndirectCountKHR"u8);
		vkCmdDrawIndexedIndirectCountKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndexedIndirectCountKHR"u8);
		vkGetSemaphoreCounterValueKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetSemaphoreCounterValueKHR"u8);
		vkWaitSemaphoresKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkWaitSemaphoresKHR"u8);
		vkSignalSemaphoreKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSignalSemaphoreKHR"u8);
		vkCmdSetFragmentShadingRateKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetFragmentShadingRateKHR"u8);
		vkCmdSetRenderingAttachmentLocationsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRenderingAttachmentLocationsKHR"u8);
		vkCmdSetRenderingInputAttachmentIndicesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRenderingInputAttachmentIndicesKHR"u8);
		vkWaitForPresentKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkWaitForPresentKHR"u8);
		vkGetBufferDeviceAddressKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferDeviceAddressKHR"u8);
		vkGetBufferOpaqueCaptureAddressKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferOpaqueCaptureAddressKHR"u8);
		vkGetDeviceMemoryOpaqueCaptureAddressKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceMemoryOpaqueCaptureAddressKHR"u8);
		vkCreateDeferredOperationKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateDeferredOperationKHR"u8);
		vkDestroyDeferredOperationKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyDeferredOperationKHR"u8);
		vkGetDeferredOperationMaxConcurrencyKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeferredOperationMaxConcurrencyKHR"u8);
		vkGetDeferredOperationResultKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeferredOperationResultKHR"u8);
		vkDeferredOperationJoinKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDeferredOperationJoinKHR"u8);
		vkGetPipelineExecutablePropertiesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelineExecutablePropertiesKHR"u8);
		vkGetPipelineExecutableStatisticsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelineExecutableStatisticsKHR"u8);
		vkGetPipelineExecutableInternalRepresentationsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelineExecutableInternalRepresentationsKHR"u8);
		vkMapMemory2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkMapMemory2KHR"u8);
		vkUnmapMemory2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUnmapMemory2KHR"u8);
		vkGetEncodedVideoSessionParametersKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetEncodedVideoSessionParametersKHR"u8);
		vkCmdEncodeVideoKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEncodeVideoKHR"u8);
		vkCmdSetEvent2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetEvent2KHR"u8);
		vkCmdResetEvent2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdResetEvent2KHR"u8);
		vkCmdWaitEvents2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWaitEvents2KHR"u8);
		vkCmdPipelineBarrier2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPipelineBarrier2KHR"u8);
		vkCmdWriteTimestamp2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWriteTimestamp2KHR"u8);
		vkQueueSubmit2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkQueueSubmit2KHR"u8);
		vkCmdCopyBuffer2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyBuffer2KHR"u8);
		vkCmdCopyImage2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyImage2KHR"u8);
		vkCmdCopyBufferToImage2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyBufferToImage2KHR"u8);
		vkCmdCopyImageToBuffer2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyImageToBuffer2KHR"u8);
		vkCmdBlitImage2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBlitImage2KHR"u8);
		vkCmdResolveImage2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdResolveImage2KHR"u8);
		vkCmdTraceRaysIndirect2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdTraceRaysIndirect2KHR"u8);
		vkGetDeviceBufferMemoryRequirementsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceBufferMemoryRequirementsKHR"u8);
		vkGetDeviceImageMemoryRequirementsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceImageMemoryRequirementsKHR"u8);
		vkGetDeviceImageSparseMemoryRequirementsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceImageSparseMemoryRequirementsKHR"u8);
		vkCmdBindIndexBuffer2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindIndexBuffer2KHR"u8);
		vkGetRenderingAreaGranularityKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetRenderingAreaGranularityKHR"u8);
		vkGetDeviceImageSubresourceLayoutKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceImageSubresourceLayoutKHR"u8);
		vkGetImageSubresourceLayout2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageSubresourceLayout2KHR"u8);
		vkWaitForPresent2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkWaitForPresent2KHR"u8);
		vkCreatePipelineBinariesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreatePipelineBinariesKHR"u8);
		vkDestroyPipelineBinaryKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyPipelineBinaryKHR"u8);
		vkGetPipelineKeyKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelineKeyKHR"u8);
		vkGetPipelineBinaryDataKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelineBinaryDataKHR"u8);
		vkReleaseCapturedPipelineDataKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkReleaseCapturedPipelineDataKHR"u8);
		vkReleaseSwapchainImagesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkReleaseSwapchainImagesKHR"u8);
		vkCmdSetLineStippleKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetLineStippleKHR"u8);
		vkGetCalibratedTimestampsKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetCalibratedTimestampsKHR"u8);
		vkCmdBindDescriptorSets2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindDescriptorSets2KHR"u8);
		vkCmdPushConstants2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushConstants2KHR"u8);
		vkCmdPushDescriptorSet2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushDescriptorSet2KHR"u8);
		vkCmdPushDescriptorSetWithTemplate2KHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPushDescriptorSetWithTemplate2KHR"u8);
		vkCmdSetDescriptorBufferOffsets2EXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDescriptorBufferOffsets2EXT"u8);
		vkCmdBindDescriptorBufferEmbeddedSamplers2EXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT"u8);
		vkDebugMarkerSetObjectTagEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDebugMarkerSetObjectTagEXT"u8);
		vkDebugMarkerSetObjectNameEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDebugMarkerSetObjectNameEXT"u8);
		vkCmdDebugMarkerBeginEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDebugMarkerBeginEXT"u8);
		vkCmdDebugMarkerEndEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDebugMarkerEndEXT"u8);
		vkCmdDebugMarkerInsertEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDebugMarkerInsertEXT"u8);
		vkCmdBindTransformFeedbackBuffersEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindTransformFeedbackBuffersEXT"u8);
		vkCmdBeginTransformFeedbackEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginTransformFeedbackEXT"u8);
		vkCmdEndTransformFeedbackEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndTransformFeedbackEXT"u8);
		vkCmdBeginQueryIndexedEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginQueryIndexedEXT"u8);
		vkCmdEndQueryIndexedEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndQueryIndexedEXT"u8);
		vkCmdDrawIndirectByteCountEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndirectByteCountEXT"u8);
		vkCreateCuModuleNVX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateCuModuleNVX"u8);
		vkCreateCuFunctionNVX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateCuFunctionNVX"u8);
		vkDestroyCuModuleNVX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyCuModuleNVX"u8);
		vkDestroyCuFunctionNVX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyCuFunctionNVX"u8);
		vkCmdCuLaunchKernelNVX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCuLaunchKernelNVX"u8);
		vkGetImageViewHandleNVX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageViewHandleNVX"u8);
		vkGetImageViewHandle64NVX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageViewHandle64NVX"u8);
		vkGetImageViewAddressNVX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageViewAddressNVX"u8);
		vkCmdDrawIndirectCountAMD_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndirectCountAMD"u8);
		vkCmdDrawIndexedIndirectCountAMD_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawIndexedIndirectCountAMD"u8);
		vkGetShaderInfoAMD_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetShaderInfoAMD"u8);
		vkCmdBeginConditionalRenderingEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginConditionalRenderingEXT"u8);
		vkCmdEndConditionalRenderingEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndConditionalRenderingEXT"u8);
		vkCmdSetViewportWScalingNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetViewportWScalingNV"u8);
		vkDisplayPowerControlEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDisplayPowerControlEXT"u8);
		vkRegisterDeviceEventEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkRegisterDeviceEventEXT"u8);
		vkRegisterDisplayEventEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkRegisterDisplayEventEXT"u8);
		vkGetSwapchainCounterEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetSwapchainCounterEXT"u8);
		vkGetRefreshCycleDurationGOOGLE_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetRefreshCycleDurationGOOGLE"u8);
		vkGetPastPresentationTimingGOOGLE_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPastPresentationTimingGOOGLE"u8);
		vkCmdSetDiscardRectangleEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDiscardRectangleEXT"u8);
		vkCmdSetDiscardRectangleEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDiscardRectangleEnableEXT"u8);
		vkCmdSetDiscardRectangleModeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDiscardRectangleModeEXT"u8);
		vkSetHdrMetadataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSetHdrMetadataEXT"u8);
		vkCmdSetSampleLocationsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetSampleLocationsEXT"u8);
		vkGetImageDrmFormatModifierPropertiesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageDrmFormatModifierPropertiesEXT"u8);
		vkCreateValidationCacheEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateValidationCacheEXT"u8);
		vkDestroyValidationCacheEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyValidationCacheEXT"u8);
		vkMergeValidationCachesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkMergeValidationCachesEXT"u8);
		vkGetValidationCacheDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetValidationCacheDataEXT"u8);
		vkCmdBindShadingRateImageNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindShadingRateImageNV"u8);
		vkCmdSetViewportShadingRatePaletteNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetViewportShadingRatePaletteNV"u8);
		vkCmdSetCoarseSampleOrderNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCoarseSampleOrderNV"u8);
		vkCreateAccelerationStructureNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateAccelerationStructureNV"u8);
		vkDestroyAccelerationStructureNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyAccelerationStructureNV"u8);
		vkGetAccelerationStructureMemoryRequirementsNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetAccelerationStructureMemoryRequirementsNV"u8);
		vkBindAccelerationStructureMemoryNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindAccelerationStructureMemoryNV"u8);
		vkCmdBuildAccelerationStructureNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBuildAccelerationStructureNV"u8);
		vkCmdCopyAccelerationStructureNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyAccelerationStructureNV"u8);
		vkCmdTraceRaysNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdTraceRaysNV"u8);
		vkCreateRayTracingPipelinesNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateRayTracingPipelinesNV"u8);
		vkGetRayTracingShaderGroupHandlesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetRayTracingShaderGroupHandlesKHR"u8);
		vkGetRayTracingShaderGroupHandlesNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetRayTracingShaderGroupHandlesNV"u8);
		vkGetAccelerationStructureHandleNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetAccelerationStructureHandleNV"u8);
		vkCmdWriteAccelerationStructuresPropertiesNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWriteAccelerationStructuresPropertiesNV"u8);
		vkCompileDeferredNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCompileDeferredNV"u8);
		vkGetMemoryHostPointerPropertiesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryHostPointerPropertiesEXT"u8);
		vkCmdWriteBufferMarkerAMD_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWriteBufferMarkerAMD"u8);
		vkCmdWriteBufferMarker2AMD_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWriteBufferMarker2AMD"u8);
		vkGetCalibratedTimestampsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetCalibratedTimestampsEXT"u8);
		vkCmdDrawMeshTasksNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawMeshTasksNV"u8);
		vkCmdDrawMeshTasksIndirectNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawMeshTasksIndirectNV"u8);
		vkCmdDrawMeshTasksIndirectCountNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawMeshTasksIndirectCountNV"u8);
		vkCmdSetExclusiveScissorEnableNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetExclusiveScissorEnableNV"u8);
		vkCmdSetExclusiveScissorNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetExclusiveScissorNV"u8);
		vkCmdSetCheckpointNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCheckpointNV"u8);
		vkGetQueueCheckpointDataNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetQueueCheckpointDataNV"u8);
		vkGetQueueCheckpointData2NV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetQueueCheckpointData2NV"u8);
		vkInitializePerformanceApiINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkInitializePerformanceApiINTEL"u8);
		vkUninitializePerformanceApiINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUninitializePerformanceApiINTEL"u8);
		vkCmdSetPerformanceMarkerINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPerformanceMarkerINTEL"u8);
		vkCmdSetPerformanceStreamMarkerINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPerformanceStreamMarkerINTEL"u8);
		vkCmdSetPerformanceOverrideINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPerformanceOverrideINTEL"u8);
		vkAcquirePerformanceConfigurationINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAcquirePerformanceConfigurationINTEL"u8);
		vkReleasePerformanceConfigurationINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkReleasePerformanceConfigurationINTEL"u8);
		vkQueueSetPerformanceConfigurationINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkQueueSetPerformanceConfigurationINTEL"u8);
		vkGetPerformanceParameterINTEL_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPerformanceParameterINTEL"u8);
		vkSetLocalDimmingAMD_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSetLocalDimmingAMD"u8);
		vkGetBufferDeviceAddressEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferDeviceAddressEXT"u8);
		vkCmdSetLineStippleEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetLineStippleEXT"u8);
		vkResetQueryPoolEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkResetQueryPoolEXT"u8);
		vkCmdSetCullModeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCullModeEXT"u8);
		vkCmdSetFrontFaceEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetFrontFaceEXT"u8);
		vkCmdSetPrimitiveTopologyEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPrimitiveTopologyEXT"u8);
		vkCmdSetViewportWithCountEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetViewportWithCountEXT"u8);
		vkCmdSetScissorWithCountEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetScissorWithCountEXT"u8);
		vkCmdBindVertexBuffers2EXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindVertexBuffers2EXT"u8);
		vkCmdSetDepthTestEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthTestEnableEXT"u8);
		vkCmdSetDepthWriteEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthWriteEnableEXT"u8);
		vkCmdSetDepthCompareOpEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthCompareOpEXT"u8);
		vkCmdSetDepthBoundsTestEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthBoundsTestEnableEXT"u8);
		vkCmdSetStencilTestEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetStencilTestEnableEXT"u8);
		vkCmdSetStencilOpEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetStencilOpEXT"u8);
		vkCopyMemoryToImageEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyMemoryToImageEXT"u8);
		vkCopyImageToMemoryEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyImageToMemoryEXT"u8);
		vkCopyImageToImageEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyImageToImageEXT"u8);
		vkTransitionImageLayoutEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkTransitionImageLayoutEXT"u8);
		vkGetImageSubresourceLayout2EXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageSubresourceLayout2EXT"u8);
		vkReleaseSwapchainImagesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkReleaseSwapchainImagesEXT"u8);
		vkGetGeneratedCommandsMemoryRequirementsNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetGeneratedCommandsMemoryRequirementsNV"u8);
		vkCmdPreprocessGeneratedCommandsNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPreprocessGeneratedCommandsNV"u8);
		vkCmdExecuteGeneratedCommandsNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdExecuteGeneratedCommandsNV"u8);
		vkCmdBindPipelineShaderGroupNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindPipelineShaderGroupNV"u8);
		vkCreateIndirectCommandsLayoutNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateIndirectCommandsLayoutNV"u8);
		vkDestroyIndirectCommandsLayoutNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyIndirectCommandsLayoutNV"u8);
		vkCmdSetDepthBias2EXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthBias2EXT"u8);
		vkCreatePrivateDataSlotEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreatePrivateDataSlotEXT"u8);
		vkDestroyPrivateDataSlotEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyPrivateDataSlotEXT"u8);
		vkSetPrivateDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSetPrivateDataEXT"u8);
		vkGetPrivateDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPrivateDataEXT"u8);
		vkCmdDispatchTileQCOM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatchTileQCOM"u8);
		vkCmdBeginPerTileExecutionQCOM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBeginPerTileExecutionQCOM"u8);
		vkCmdEndPerTileExecutionQCOM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndPerTileExecutionQCOM"u8);
		vkGetDescriptorSetLayoutSizeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDescriptorSetLayoutSizeEXT"u8);
		vkGetDescriptorSetLayoutBindingOffsetEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDescriptorSetLayoutBindingOffsetEXT"u8);
		vkGetDescriptorEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDescriptorEXT"u8);
		vkCmdBindDescriptorBuffersEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindDescriptorBuffersEXT"u8);
		vkCmdSetDescriptorBufferOffsetsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDescriptorBufferOffsetsEXT"u8);
		vkCmdBindDescriptorBufferEmbeddedSamplersEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT"u8);
		vkGetBufferOpaqueCaptureDescriptorDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetBufferOpaqueCaptureDescriptorDataEXT"u8);
		vkGetImageOpaqueCaptureDescriptorDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageOpaqueCaptureDescriptorDataEXT"u8);
		vkGetImageViewOpaqueCaptureDescriptorDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetImageViewOpaqueCaptureDescriptorDataEXT"u8);
		vkGetSamplerOpaqueCaptureDescriptorDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetSamplerOpaqueCaptureDescriptorDataEXT"u8);
		vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"u8);
		vkCmdSetFragmentShadingRateEnumNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetFragmentShadingRateEnumNV"u8);
		vkGetDeviceFaultInfoEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceFaultInfoEXT"u8);
		vkCmdSetVertexInputEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetVertexInputEXT"u8);
		vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"u8);
		vkCmdSubpassShadingHUAWEI_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSubpassShadingHUAWEI"u8);
		vkCmdBindInvocationMaskHUAWEI_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindInvocationMaskHUAWEI"u8);
		vkGetMemoryRemoteAddressNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryRemoteAddressNV"u8);
		vkGetPipelinePropertiesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelinePropertiesEXT"u8);
		vkCmdSetPatchControlPointsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPatchControlPointsEXT"u8);
		vkCmdSetRasterizerDiscardEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRasterizerDiscardEnableEXT"u8);
		vkCmdSetDepthBiasEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthBiasEnableEXT"u8);
		vkCmdSetLogicOpEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetLogicOpEXT"u8);
		vkCmdSetPrimitiveRestartEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPrimitiveRestartEnableEXT"u8);
		vkCmdSetColorWriteEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetColorWriteEnableEXT"u8);
		vkCmdDrawMultiEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawMultiEXT"u8);
		vkCmdDrawMultiIndexedEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawMultiIndexedEXT"u8);
		vkCreateMicromapEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateMicromapEXT"u8);
		vkDestroyMicromapEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyMicromapEXT"u8);
		vkCmdBuildMicromapsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBuildMicromapsEXT"u8);
		vkBuildMicromapsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBuildMicromapsEXT"u8);
		vkCopyMicromapEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyMicromapEXT"u8);
		vkCopyMicromapToMemoryEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyMicromapToMemoryEXT"u8);
		vkCopyMemoryToMicromapEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyMemoryToMicromapEXT"u8);
		vkWriteMicromapsPropertiesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkWriteMicromapsPropertiesEXT"u8);
		vkCmdCopyMicromapEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyMicromapEXT"u8);
		vkCmdCopyMicromapToMemoryEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyMicromapToMemoryEXT"u8);
		vkCmdCopyMemoryToMicromapEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyMemoryToMicromapEXT"u8);
		vkCmdWriteMicromapsPropertiesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWriteMicromapsPropertiesEXT"u8);
		vkGetDeviceMicromapCompatibilityEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceMicromapCompatibilityEXT"u8);
		vkGetMicromapBuildSizesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMicromapBuildSizesEXT"u8);
		vkCmdDrawClusterHUAWEI_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawClusterHUAWEI"u8);
		vkCmdDrawClusterIndirectHUAWEI_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawClusterIndirectHUAWEI"u8);
		vkSetDeviceMemoryPriorityEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSetDeviceMemoryPriorityEXT"u8);
		vkGetDescriptorSetLayoutHostMappingInfoVALVE_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDescriptorSetLayoutHostMappingInfoVALVE"u8);
		vkGetDescriptorSetHostMappingVALVE_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDescriptorSetHostMappingVALVE"u8);
		vkCmdCopyMemoryIndirectNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyMemoryIndirectNV"u8);
		vkCmdCopyMemoryToImageIndirectNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyMemoryToImageIndirectNV"u8);
		vkCmdDecompressMemoryNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDecompressMemoryNV"u8);
		vkCmdDecompressMemoryIndirectCountNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDecompressMemoryIndirectCountNV"u8);
		vkGetPipelineIndirectMemoryRequirementsNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelineIndirectMemoryRequirementsNV"u8);
		vkCmdUpdatePipelineIndirectBufferNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdUpdatePipelineIndirectBufferNV"u8);
		vkGetPipelineIndirectDeviceAddressNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPipelineIndirectDeviceAddressNV"u8);
		vkCmdSetDepthClampEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthClampEnableEXT"u8);
		vkCmdSetPolygonModeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetPolygonModeEXT"u8);
		vkCmdSetRasterizationSamplesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRasterizationSamplesEXT"u8);
		vkCmdSetSampleMaskEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetSampleMaskEXT"u8);
		vkCmdSetAlphaToCoverageEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetAlphaToCoverageEnableEXT"u8);
		vkCmdSetAlphaToOneEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetAlphaToOneEnableEXT"u8);
		vkCmdSetLogicOpEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetLogicOpEnableEXT"u8);
		vkCmdSetColorBlendEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetColorBlendEnableEXT"u8);
		vkCmdSetColorBlendEquationEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetColorBlendEquationEXT"u8);
		vkCmdSetColorWriteMaskEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetColorWriteMaskEXT"u8);
		vkCmdSetTessellationDomainOriginEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetTessellationDomainOriginEXT"u8);
		vkCmdSetRasterizationStreamEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRasterizationStreamEXT"u8);
		vkCmdSetConservativeRasterizationModeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetConservativeRasterizationModeEXT"u8);
		vkCmdSetExtraPrimitiveOverestimationSizeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetExtraPrimitiveOverestimationSizeEXT"u8);
		vkCmdSetDepthClipEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthClipEnableEXT"u8);
		vkCmdSetSampleLocationsEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetSampleLocationsEnableEXT"u8);
		vkCmdSetColorBlendAdvancedEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetColorBlendAdvancedEXT"u8);
		vkCmdSetProvokingVertexModeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetProvokingVertexModeEXT"u8);
		vkCmdSetLineRasterizationModeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetLineRasterizationModeEXT"u8);
		vkCmdSetLineStippleEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetLineStippleEnableEXT"u8);
		vkCmdSetDepthClipNegativeOneToOneEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthClipNegativeOneToOneEXT"u8);
		vkCmdSetViewportWScalingEnableNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetViewportWScalingEnableNV"u8);
		vkCmdSetViewportSwizzleNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetViewportSwizzleNV"u8);
		vkCmdSetCoverageToColorEnableNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCoverageToColorEnableNV"u8);
		vkCmdSetCoverageToColorLocationNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCoverageToColorLocationNV"u8);
		vkCmdSetCoverageModulationModeNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCoverageModulationModeNV"u8);
		vkCmdSetCoverageModulationTableEnableNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCoverageModulationTableEnableNV"u8);
		vkCmdSetCoverageModulationTableNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCoverageModulationTableNV"u8);
		vkCmdSetShadingRateImageEnableNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetShadingRateImageEnableNV"u8);
		vkCmdSetRepresentativeFragmentTestEnableNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRepresentativeFragmentTestEnableNV"u8);
		vkCmdSetCoverageReductionModeNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetCoverageReductionModeNV"u8);
		vkCreateTensorARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateTensorARM"u8);
		vkDestroyTensorARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyTensorARM"u8);
		vkCreateTensorViewARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateTensorViewARM"u8);
		vkDestroyTensorViewARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyTensorViewARM"u8);
		vkGetTensorMemoryRequirementsARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetTensorMemoryRequirementsARM"u8);
		vkBindTensorMemoryARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindTensorMemoryARM"u8);
		vkGetDeviceTensorMemoryRequirementsARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceTensorMemoryRequirementsARM"u8);
		vkCmdCopyTensorARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyTensorARM"u8);
		vkGetTensorOpaqueCaptureDescriptorDataARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetTensorOpaqueCaptureDescriptorDataARM"u8);
		vkGetTensorViewOpaqueCaptureDescriptorDataARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetTensorViewOpaqueCaptureDescriptorDataARM"u8);
		vkGetShaderModuleIdentifierEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetShaderModuleIdentifierEXT"u8);
		vkGetShaderModuleCreateInfoIdentifierEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetShaderModuleCreateInfoIdentifierEXT"u8);
		vkCreateOpticalFlowSessionNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateOpticalFlowSessionNV"u8);
		vkDestroyOpticalFlowSessionNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyOpticalFlowSessionNV"u8);
		vkBindOpticalFlowSessionImageNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindOpticalFlowSessionImageNV"u8);
		vkCmdOpticalFlowExecuteNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdOpticalFlowExecuteNV"u8);
		vkAntiLagUpdateAMD_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAntiLagUpdateAMD"u8);
		vkCreateShadersEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateShadersEXT"u8);
		vkDestroyShaderEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyShaderEXT"u8);
		vkGetShaderBinaryDataEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetShaderBinaryDataEXT"u8);
		vkCmdBindShadersEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindShadersEXT"u8);
		vkCmdSetDepthClampRangeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetDepthClampRangeEXT"u8);
		vkGetFramebufferTilePropertiesQCOM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetFramebufferTilePropertiesQCOM"u8);
		vkGetDynamicRenderingTilePropertiesQCOM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDynamicRenderingTilePropertiesQCOM"u8);
		vkConvertCooperativeVectorMatrixNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkConvertCooperativeVectorMatrixNV"u8);
		vkCmdConvertCooperativeVectorMatrixNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdConvertCooperativeVectorMatrixNV"u8);
		vkSetLatencySleepModeNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSetLatencySleepModeNV"u8);
		vkLatencySleepNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkLatencySleepNV"u8);
		vkSetLatencyMarkerNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkSetLatencyMarkerNV"u8);
		vkGetLatencyTimingsNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetLatencyTimingsNV"u8);
		vkQueueNotifyOutOfBandNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkQueueNotifyOutOfBandNV"u8);
		vkCreateDataGraphPipelinesARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateDataGraphPipelinesARM"u8);
		vkCreateDataGraphPipelineSessionARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateDataGraphPipelineSessionARM"u8);
		vkGetDataGraphPipelineSessionBindPointRequirementsARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDataGraphPipelineSessionBindPointRequirementsARM"u8);
		vkGetDataGraphPipelineSessionMemoryRequirementsARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDataGraphPipelineSessionMemoryRequirementsARM"u8);
		vkBindDataGraphPipelineSessionMemoryARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBindDataGraphPipelineSessionMemoryARM"u8);
		vkDestroyDataGraphPipelineSessionARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyDataGraphPipelineSessionARM"u8);
		vkCmdDispatchDataGraphARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatchDataGraphARM"u8);
		vkGetDataGraphPipelineAvailablePropertiesARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDataGraphPipelineAvailablePropertiesARM"u8);
		vkGetDataGraphPipelinePropertiesARM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDataGraphPipelinePropertiesARM"u8);
		vkCmdSetAttachmentFeedbackLoopEnableEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetAttachmentFeedbackLoopEnableEXT"u8);
		vkCmdBindTileMemoryQCOM_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBindTileMemoryQCOM"u8);
		vkCreateExternalComputeQueueNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateExternalComputeQueueNV"u8);
		vkDestroyExternalComputeQueueNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyExternalComputeQueueNV"u8);
		vkGetExternalComputeQueueDataNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetExternalComputeQueueDataNV"u8);
		vkGetClusterAccelerationStructureBuildSizesNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetClusterAccelerationStructureBuildSizesNV"u8);
		vkCmdBuildClusterAccelerationStructureIndirectNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBuildClusterAccelerationStructureIndirectNV"u8);
		vkGetPartitionedAccelerationStructuresBuildSizesNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetPartitionedAccelerationStructuresBuildSizesNV"u8);
		vkCmdBuildPartitionedAccelerationStructuresNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBuildPartitionedAccelerationStructuresNV"u8);
		vkGetGeneratedCommandsMemoryRequirementsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetGeneratedCommandsMemoryRequirementsEXT"u8);
		vkCmdPreprocessGeneratedCommandsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdPreprocessGeneratedCommandsEXT"u8);
		vkCmdExecuteGeneratedCommandsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdExecuteGeneratedCommandsEXT"u8);
		vkCreateIndirectCommandsLayoutEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateIndirectCommandsLayoutEXT"u8);
		vkDestroyIndirectCommandsLayoutEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyIndirectCommandsLayoutEXT"u8);
		vkCreateIndirectExecutionSetEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateIndirectExecutionSetEXT"u8);
		vkDestroyIndirectExecutionSetEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyIndirectExecutionSetEXT"u8);
		vkUpdateIndirectExecutionSetPipelineEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUpdateIndirectExecutionSetPipelineEXT"u8);
		vkUpdateIndirectExecutionSetShaderEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkUpdateIndirectExecutionSetShaderEXT"u8);
		vkCmdEndRendering2EXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdEndRendering2EXT"u8);
		vkCreateAccelerationStructureKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateAccelerationStructureKHR"u8);
		vkDestroyAccelerationStructureKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyAccelerationStructureKHR"u8);
		vkCmdBuildAccelerationStructuresKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBuildAccelerationStructuresKHR"u8);
		vkCmdBuildAccelerationStructuresIndirectKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdBuildAccelerationStructuresIndirectKHR"u8);
		vkBuildAccelerationStructuresKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkBuildAccelerationStructuresKHR"u8);
		vkCopyAccelerationStructureKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyAccelerationStructureKHR"u8);
		vkCopyAccelerationStructureToMemoryKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyAccelerationStructureToMemoryKHR"u8);
		vkCopyMemoryToAccelerationStructureKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCopyMemoryToAccelerationStructureKHR"u8);
		vkWriteAccelerationStructuresPropertiesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkWriteAccelerationStructuresPropertiesKHR"u8);
		vkCmdCopyAccelerationStructureKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyAccelerationStructureKHR"u8);
		vkCmdCopyAccelerationStructureToMemoryKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyAccelerationStructureToMemoryKHR"u8);
		vkCmdCopyMemoryToAccelerationStructureKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCopyMemoryToAccelerationStructureKHR"u8);
		vkGetAccelerationStructureDeviceAddressKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetAccelerationStructureDeviceAddressKHR"u8);
		vkCmdWriteAccelerationStructuresPropertiesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdWriteAccelerationStructuresPropertiesKHR"u8);
		vkGetDeviceAccelerationStructureCompatibilityKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceAccelerationStructureCompatibilityKHR"u8);
		vkGetAccelerationStructureBuildSizesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetAccelerationStructureBuildSizesKHR"u8);
		vkCmdTraceRaysKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdTraceRaysKHR"u8);
		vkCreateRayTracingPipelinesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateRayTracingPipelinesKHR"u8);
		vkGetRayTracingCaptureReplayShaderGroupHandlesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"u8);
		vkCmdTraceRaysIndirectKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdTraceRaysIndirectKHR"u8);
		vkGetRayTracingShaderGroupStackSizeKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetRayTracingShaderGroupStackSizeKHR"u8);
		vkCmdSetRayTracingPipelineStackSizeKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdSetRayTracingPipelineStackSizeKHR"u8);
		vkCmdDrawMeshTasksEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawMeshTasksEXT"u8);
		vkCmdDrawMeshTasksIndirectEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawMeshTasksIndirectEXT"u8);
		vkCmdDrawMeshTasksIndirectCountEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDrawMeshTasksIndirectCountEXT"u8);
		vkGetAndroidHardwareBufferPropertiesANDROID_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetAndroidHardwareBufferPropertiesANDROID"u8);
		vkGetMemoryAndroidHardwareBufferANDROID_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryAndroidHardwareBufferANDROID"u8);
		vkExportMetalObjectsEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkExportMetalObjectsEXT"u8);
		vkGetMemoryMetalHandleEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryMetalHandleEXT"u8);
		vkGetMemoryMetalHandlePropertiesEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryMetalHandlePropertiesEXT"u8);
		vkGetMemoryWin32HandleKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryWin32HandleKHR"u8);
		vkGetMemoryWin32HandlePropertiesKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryWin32HandlePropertiesKHR"u8);
		vkImportSemaphoreWin32HandleKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkImportSemaphoreWin32HandleKHR"u8);
		vkGetSemaphoreWin32HandleKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetSemaphoreWin32HandleKHR"u8);
		vkImportFenceWin32HandleKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkImportFenceWin32HandleKHR"u8);
		vkGetFenceWin32HandleKHR_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetFenceWin32HandleKHR"u8);
		vkGetMemoryWin32HandleNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetMemoryWin32HandleNV"u8);
		vkAcquireFullScreenExclusiveModeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkAcquireFullScreenExclusiveModeEXT"u8);
		vkReleaseFullScreenExclusiveModeEXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkReleaseFullScreenExclusiveModeEXT"u8);
		vkGetDeviceGroupSurfacePresentModes2EXT_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetDeviceGroupSurfacePresentModes2EXT"u8);
		vkCreateExecutionGraphPipelinesAMDX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateExecutionGraphPipelinesAMDX"u8);
		vkGetExecutionGraphPipelineScratchSizeAMDX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetExecutionGraphPipelineScratchSizeAMDX"u8);
		vkGetExecutionGraphPipelineNodeIndexAMDX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetExecutionGraphPipelineNodeIndexAMDX"u8);
		vkCmdInitializeGraphScratchMemoryAMDX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdInitializeGraphScratchMemoryAMDX"u8);
		vkCmdDispatchGraphAMDX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatchGraphAMDX"u8);
		vkCmdDispatchGraphIndirectAMDX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatchGraphIndirectAMDX"u8);
		vkCmdDispatchGraphIndirectCountAMDX_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdDispatchGraphIndirectCountAMDX"u8);
		vkCreateCudaModuleNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateCudaModuleNV"u8);
		vkGetCudaModuleCacheNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkGetCudaModuleCacheNV"u8);
		vkCreateCudaFunctionNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCreateCudaFunctionNV"u8);
		vkDestroyCudaModuleNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyCudaModuleNV"u8);
		vkDestroyCudaFunctionNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkDestroyCudaFunctionNV"u8);
		vkCmdCudaLaunchKernelNV_ptr = api.vkGetDeviceProcAddr(device.Handle, "vkCmdCudaLaunchKernelNV"u8);
	}
	public void vkDestroyDevice(VkDevice device)
	{
		((delegate* unmanaged<VkDevice, VkAllocationCallbacks*, void>)vkDestroyDevice_ptr.Value)(device, default);
	}

	public void vkDestroyDevice(VkDevice device, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkAllocationCallbacks*, void>)vkDestroyDevice_ptr.Value)(device, allocator);
	}

	public void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue* queue)
	{
		((delegate* unmanaged<VkDevice, uint, uint, VkQueue*, void>)vkGetDeviceQueue_ptr.Value)(device, queueFamilyIndex, queueIndex, queue);
	}

	public void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, out VkQueue queue)
	{
		Unsafe.SkipInit(out queue);

		fixed (VkQueue* queuePtr = &queue)
		{
			((delegate* unmanaged<VkDevice, uint, uint, VkQueue*, void>)vkGetDeviceQueue_ptr.Value)(device, queueFamilyIndex, queueIndex, queuePtr);
		}
	}

	public VkResult vkQueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo* submits, VkFence fence)
	{
		return ((delegate* unmanaged<VkQueue, uint, VkSubmitInfo*, VkFence, VkResult>)vkQueueSubmit_ptr.Value)(queue, submitCount, submits, fence);
	}

	public VkResult vkQueueWaitIdle(VkQueue queue)
	{
		return ((delegate* unmanaged<VkQueue, VkResult>)vkQueueWaitIdle_ptr.Value)(queue);
	}

	public VkResult vkDeviceWaitIdle(VkDevice device)
	{
		return ((delegate* unmanaged<VkDevice, VkResult>)vkDeviceWaitIdle_ptr.Value)(device);
	}

	public VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, VkDeviceMemory* memory)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult>)vkAllocateMemory_ptr.Value)(device, allocateInfo, default, memory);
	}

	public VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, VkAllocationCallbacks* allocator, VkDeviceMemory* memory)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult>)vkAllocateMemory_ptr.Value)(device, allocateInfo, allocator, memory);
	}

	public VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, out VkDeviceMemory memory)
	{
		Unsafe.SkipInit(out memory);

		fixed (VkDeviceMemory* memoryPtr = &memory)
		{
			return ((delegate* unmanaged<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult>)vkAllocateMemory_ptr.Value)(device, allocateInfo, default, memoryPtr);
		}
	}

	public VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, VkAllocationCallbacks* allocator, out VkDeviceMemory memory)
	{
		Unsafe.SkipInit(out memory);

		fixed (VkDeviceMemory* memoryPtr = &memory)
		{
			return ((delegate* unmanaged<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult>)vkAllocateMemory_ptr.Value)(device, allocateInfo, allocator, memoryPtr);
		}
	}

	public void vkFreeMemory(VkDevice device, VkDeviceMemory memory)
	{
		((delegate* unmanaged<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void>)vkFreeMemory_ptr.Value)(device, memory, default);
	}

	public void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void>)vkFreeMemory_ptr.Value)(device, memory, allocator);
	}

	public VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, ulong offset, ulong size, VkMemoryMapFlags flags, void** data)
	{
		return ((delegate* unmanaged<VkDevice, VkDeviceMemory, ulong, ulong, VkMemoryMapFlags, void**, VkResult>)vkMapMemory_ptr.Value)(device, memory, offset, size, flags, data);
	}

	public void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)
	{
		((delegate* unmanaged<VkDevice, VkDeviceMemory, void>)vkUnmapMemory_ptr.Value)(device, memory);
	}

	public VkResult vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult>)vkFlushMappedMemoryRanges_ptr.Value)(device, memoryRangeCount, memoryRanges);
	}

	public VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult>)vkInvalidateMappedMemoryRanges_ptr.Value)(device, memoryRangeCount, memoryRanges);
	}

	public void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, ulong* committedMemoryInBytes)
	{
		((delegate* unmanaged<VkDevice, VkDeviceMemory, ulong*, void>)vkGetDeviceMemoryCommitment_ptr.Value)(device, memory, committedMemoryInBytes);
	}

	public void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out ulong committedMemoryInBytes)
	{
		Unsafe.SkipInit(out committedMemoryInBytes);

		fixed (ulong* committedMemoryInBytesPtr = &committedMemoryInBytes)
		{
			((delegate* unmanaged<VkDevice, VkDeviceMemory, ulong*, void>)vkGetDeviceMemoryCommitment_ptr.Value)(device, memory, committedMemoryInBytesPtr);
		}
	}

	public VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, ulong memoryOffset)
	{
		return ((delegate* unmanaged<VkDevice, VkBuffer, VkDeviceMemory, ulong, VkResult>)vkBindBufferMemory_ptr.Value)(device, buffer, memory, memoryOffset);
	}

	public VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, ulong memoryOffset)
	{
		return ((delegate* unmanaged<VkDevice, VkImage, VkDeviceMemory, ulong, VkResult>)vkBindImageMemory_ptr.Value)(device, image, memory, memoryOffset);
	}

	public void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkBuffer, VkMemoryRequirements*, void>)vkGetBufferMemoryRequirements_ptr.Value)(device, buffer, memoryRequirements);
	}

	public void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkMemoryRequirements memoryRequirements)
	{
		Unsafe.SkipInit(out memoryRequirements);

		fixed (VkMemoryRequirements* memoryRequirementsPtr = &memoryRequirements)
		{
			((delegate* unmanaged<VkDevice, VkBuffer, VkMemoryRequirements*, void>)vkGetBufferMemoryRequirements_ptr.Value)(device, buffer, memoryRequirementsPtr);
		}
	}

	public void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkImage, VkMemoryRequirements*, void>)vkGetImageMemoryRequirements_ptr.Value)(device, image, memoryRequirements);
	}

	public void vkGetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements memoryRequirements)
	{
		Unsafe.SkipInit(out memoryRequirements);

		fixed (VkMemoryRequirements* memoryRequirementsPtr = &memoryRequirements)
		{
			((delegate* unmanaged<VkDevice, VkImage, VkMemoryRequirements*, void>)vkGetImageMemoryRequirements_ptr.Value)(device, image, memoryRequirementsPtr);
		}
	}

	public void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements* sparseMemoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements*, void>)vkGetImageSparseMemoryRequirements_ptr.Value)(device, image, sparseMemoryRequirementCount, sparseMemoryRequirements);
	}

	public VkResult vkQueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* bindInfo, VkFence fence)
	{
		return ((delegate* unmanaged<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult>)vkQueueBindSparse_ptr.Value)(queue, bindInfoCount, bindInfo, fence);
	}

	public VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* createInfo, VkFence* fence)
	{
		return ((delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)vkCreateFence_ptr.Value)(device, createInfo, default, fence);
	}

	public VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkFence* fence)
	{
		return ((delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)vkCreateFence_ptr.Value)(device, createInfo, allocator, fence);
	}

	public VkResult vkCreateFence(VkDevice device, in VkFenceCreateInfo createInfo, VkFence* fence)
	{
		fixed (VkFenceCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)vkCreateFence_ptr.Value)(device, createInfoPtr, default, fence);
		}
	}

	public VkResult vkCreateFence(VkDevice device, in VkFenceCreateInfo createInfo, VkAllocationCallbacks* allocator, VkFence* fence)
	{
		fixed (VkFenceCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)vkCreateFence_ptr.Value)(device, createInfoPtr, allocator, fence);
		}
	}

	public VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* createInfo, out VkFence fence)
	{
		Unsafe.SkipInit(out fence);

		fixed (VkFence* fencePtr = &fence)
		{
			return ((delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)vkCreateFence_ptr.Value)(device, createInfo, default, fencePtr);
		}
	}

	public VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkFence fence)
	{
		Unsafe.SkipInit(out fence);

		fixed (VkFence* fencePtr = &fence)
		{
			return ((delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)vkCreateFence_ptr.Value)(device, createInfo, allocator, fencePtr);
		}
	}

	public VkResult vkCreateFence(VkDevice device, in VkFenceCreateInfo createInfo, out VkFence fence)
	{
		fixed (VkFenceCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out fence);

			fixed (VkFence* fencePtr = &fence)
			{
				return ((delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)vkCreateFence_ptr.Value)(device, createInfoPtr, default, fencePtr);
			}
		}
	}

	public VkResult vkCreateFence(VkDevice device, in VkFenceCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkFence fence)
	{
		fixed (VkFenceCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out fence);

			fixed (VkFence* fencePtr = &fence)
			{
				return ((delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)vkCreateFence_ptr.Value)(device, createInfoPtr, allocator, fencePtr);
			}
		}
	}

	public void vkDestroyFence(VkDevice device, VkFence fence)
	{
		((delegate* unmanaged<VkDevice, VkFence, VkAllocationCallbacks*, void>)vkDestroyFence_ptr.Value)(device, fence, default);
	}

	public void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkFence, VkAllocationCallbacks*, void>)vkDestroyFence_ptr.Value)(device, fence, allocator);
	}

	public VkResult vkResetFences(VkDevice device, uint fenceCount, VkFence* fences)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkFence*, VkResult>)vkResetFences_ptr.Value)(device, fenceCount, fences);
	}

	public VkResult vkGetFenceStatus(VkDevice device, VkFence fence)
	{
		return ((delegate* unmanaged<VkDevice, VkFence, VkResult>)vkGetFenceStatus_ptr.Value)(device, fence);
	}

	public VkResult vkWaitForFences(VkDevice device, uint fenceCount, VkFence* fences, VkBool32 waitAll, ulong timeout)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkFence*, VkBool32, ulong, VkResult>)vkWaitForFences_ptr.Value)(device, fenceCount, fences, waitAll, timeout);
	}

	public VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, VkSemaphore* semaphore)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)vkCreateSemaphore_ptr.Value)(device, createInfo, default, semaphore);
	}

	public VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSemaphore* semaphore)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)vkCreateSemaphore_ptr.Value)(device, createInfo, allocator, semaphore);
	}

	public VkResult vkCreateSemaphore(VkDevice device, in VkSemaphoreCreateInfo createInfo, VkSemaphore* semaphore)
	{
		fixed (VkSemaphoreCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)vkCreateSemaphore_ptr.Value)(device, createInfoPtr, default, semaphore);
		}
	}

	public VkResult vkCreateSemaphore(VkDevice device, in VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks* allocator, VkSemaphore* semaphore)
	{
		fixed (VkSemaphoreCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)vkCreateSemaphore_ptr.Value)(device, createInfoPtr, allocator, semaphore);
		}
	}

	public VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, out VkSemaphore semaphore)
	{
		Unsafe.SkipInit(out semaphore);

		fixed (VkSemaphore* semaphorePtr = &semaphore)
		{
			return ((delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)vkCreateSemaphore_ptr.Value)(device, createInfo, default, semaphorePtr);
		}
	}

	public VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSemaphore semaphore)
	{
		Unsafe.SkipInit(out semaphore);

		fixed (VkSemaphore* semaphorePtr = &semaphore)
		{
			return ((delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)vkCreateSemaphore_ptr.Value)(device, createInfo, allocator, semaphorePtr);
		}
	}

	public VkResult vkCreateSemaphore(VkDevice device, in VkSemaphoreCreateInfo createInfo, out VkSemaphore semaphore)
	{
		fixed (VkSemaphoreCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out semaphore);

			fixed (VkSemaphore* semaphorePtr = &semaphore)
			{
				return ((delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)vkCreateSemaphore_ptr.Value)(device, createInfoPtr, default, semaphorePtr);
			}
		}
	}

	public VkResult vkCreateSemaphore(VkDevice device, in VkSemaphoreCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSemaphore semaphore)
	{
		fixed (VkSemaphoreCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out semaphore);

			fixed (VkSemaphore* semaphorePtr = &semaphore)
			{
				return ((delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)vkCreateSemaphore_ptr.Value)(device, createInfoPtr, allocator, semaphorePtr);
			}
		}
	}

	public void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore)
	{
		((delegate* unmanaged<VkDevice, VkSemaphore, VkAllocationCallbacks*, void>)vkDestroySemaphore_ptr.Value)(device, semaphore, default);
	}

	public void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkSemaphore, VkAllocationCallbacks*, void>)vkDestroySemaphore_ptr.Value)(device, semaphore, allocator);
	}

	public VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* createInfo, VkEvent* @event)
	{
		return ((delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)vkCreateEvent_ptr.Value)(device, createInfo, default, @event);
	}

	public VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkEvent* @event)
	{
		return ((delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)vkCreateEvent_ptr.Value)(device, createInfo, allocator, @event);
	}

	public VkResult vkCreateEvent(VkDevice device, in VkEventCreateInfo createInfo, VkEvent* @event)
	{
		fixed (VkEventCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)vkCreateEvent_ptr.Value)(device, createInfoPtr, default, @event);
		}
	}

	public VkResult vkCreateEvent(VkDevice device, in VkEventCreateInfo createInfo, VkAllocationCallbacks* allocator, VkEvent* @event)
	{
		fixed (VkEventCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)vkCreateEvent_ptr.Value)(device, createInfoPtr, allocator, @event);
		}
	}

	public VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* createInfo, out VkEvent @event)
	{
		Unsafe.SkipInit(out @event);

		fixed (VkEvent* @eventPtr = &@event)
		{
			return ((delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)vkCreateEvent_ptr.Value)(device, createInfo, default, @eventPtr);
		}
	}

	public VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkEvent @event)
	{
		Unsafe.SkipInit(out @event);

		fixed (VkEvent* @eventPtr = &@event)
		{
			return ((delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)vkCreateEvent_ptr.Value)(device, createInfo, allocator, @eventPtr);
		}
	}

	public VkResult vkCreateEvent(VkDevice device, in VkEventCreateInfo createInfo, out VkEvent @event)
	{
		fixed (VkEventCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out @event);

			fixed (VkEvent* @eventPtr = &@event)
			{
				return ((delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)vkCreateEvent_ptr.Value)(device, createInfoPtr, default, @eventPtr);
			}
		}
	}

	public VkResult vkCreateEvent(VkDevice device, in VkEventCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkEvent @event)
	{
		fixed (VkEventCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out @event);

			fixed (VkEvent* @eventPtr = &@event)
			{
				return ((delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)vkCreateEvent_ptr.Value)(device, createInfoPtr, allocator, @eventPtr);
			}
		}
	}

	public void vkDestroyEvent(VkDevice device, VkEvent @event)
	{
		((delegate* unmanaged<VkDevice, VkEvent, VkAllocationCallbacks*, void>)vkDestroyEvent_ptr.Value)(device, @event, default);
	}

	public void vkDestroyEvent(VkDevice device, VkEvent @event, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkEvent, VkAllocationCallbacks*, void>)vkDestroyEvent_ptr.Value)(device, @event, allocator);
	}

	public VkResult vkGetEventStatus(VkDevice device, VkEvent @event)
	{
		return ((delegate* unmanaged<VkDevice, VkEvent, VkResult>)vkGetEventStatus_ptr.Value)(device, @event);
	}

	public VkResult vkSetEvent(VkDevice device, VkEvent @event)
	{
		return ((delegate* unmanaged<VkDevice, VkEvent, VkResult>)vkSetEvent_ptr.Value)(device, @event);
	}

	public VkResult vkResetEvent(VkDevice device, VkEvent @event)
	{
		return ((delegate* unmanaged<VkDevice, VkEvent, VkResult>)vkResetEvent_ptr.Value)(device, @event);
	}

	public VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, VkQueryPool* queryPool)
	{
		return ((delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)vkCreateQueryPool_ptr.Value)(device, createInfo, default, queryPool);
	}

	public VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkQueryPool* queryPool)
	{
		return ((delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)vkCreateQueryPool_ptr.Value)(device, createInfo, allocator, queryPool);
	}

	public VkResult vkCreateQueryPool(VkDevice device, in VkQueryPoolCreateInfo createInfo, VkQueryPool* queryPool)
	{
		fixed (VkQueryPoolCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)vkCreateQueryPool_ptr.Value)(device, createInfoPtr, default, queryPool);
		}
	}

	public VkResult vkCreateQueryPool(VkDevice device, in VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, VkQueryPool* queryPool)
	{
		fixed (VkQueryPoolCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)vkCreateQueryPool_ptr.Value)(device, createInfoPtr, allocator, queryPool);
		}
	}

	public VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, out VkQueryPool queryPool)
	{
		Unsafe.SkipInit(out queryPool);

		fixed (VkQueryPool* queryPoolPtr = &queryPool)
		{
			return ((delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)vkCreateQueryPool_ptr.Value)(device, createInfo, default, queryPoolPtr);
		}
	}

	public VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkQueryPool queryPool)
	{
		Unsafe.SkipInit(out queryPool);

		fixed (VkQueryPool* queryPoolPtr = &queryPool)
		{
			return ((delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)vkCreateQueryPool_ptr.Value)(device, createInfo, allocator, queryPoolPtr);
		}
	}

	public VkResult vkCreateQueryPool(VkDevice device, in VkQueryPoolCreateInfo createInfo, out VkQueryPool queryPool)
	{
		fixed (VkQueryPoolCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out queryPool);

			fixed (VkQueryPool* queryPoolPtr = &queryPool)
			{
				return ((delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)vkCreateQueryPool_ptr.Value)(device, createInfoPtr, default, queryPoolPtr);
			}
		}
	}

	public VkResult vkCreateQueryPool(VkDevice device, in VkQueryPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkQueryPool queryPool)
	{
		fixed (VkQueryPoolCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out queryPool);

			fixed (VkQueryPool* queryPoolPtr = &queryPool)
			{
				return ((delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)vkCreateQueryPool_ptr.Value)(device, createInfoPtr, allocator, queryPoolPtr);
			}
		}
	}

	public void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool)
	{
		((delegate* unmanaged<VkDevice, VkQueryPool, VkAllocationCallbacks*, void>)vkDestroyQueryPool_ptr.Value)(device, queryPool, default);
	}

	public void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkQueryPool, VkAllocationCallbacks*, void>)vkDestroyQueryPool_ptr.Value)(device, queryPool, allocator);
	}

	public VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* data, ulong stride, VkQueryResultFlags flags)
	{
		return ((delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, ulong, void*, ulong, VkQueryResultFlags, VkResult>)vkGetQueryPoolResults_ptr.Value)(device, queryPool, firstQuery, queryCount, dataSize, data, stride, flags);
	}

	public VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, VkBuffer* buffer)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)vkCreateBuffer_ptr.Value)(device, createInfo, default, buffer);
	}

	public VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkBuffer* buffer)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)vkCreateBuffer_ptr.Value)(device, createInfo, allocator, buffer);
	}

	public VkResult vkCreateBuffer(VkDevice device, in VkBufferCreateInfo createInfo, VkBuffer* buffer)
	{
		fixed (VkBufferCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)vkCreateBuffer_ptr.Value)(device, createInfoPtr, default, buffer);
		}
	}

	public VkResult vkCreateBuffer(VkDevice device, in VkBufferCreateInfo createInfo, VkAllocationCallbacks* allocator, VkBuffer* buffer)
	{
		fixed (VkBufferCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)vkCreateBuffer_ptr.Value)(device, createInfoPtr, allocator, buffer);
		}
	}

	public VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, out VkBuffer buffer)
	{
		Unsafe.SkipInit(out buffer);

		fixed (VkBuffer* bufferPtr = &buffer)
		{
			return ((delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)vkCreateBuffer_ptr.Value)(device, createInfo, default, bufferPtr);
		}
	}

	public VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkBuffer buffer)
	{
		Unsafe.SkipInit(out buffer);

		fixed (VkBuffer* bufferPtr = &buffer)
		{
			return ((delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)vkCreateBuffer_ptr.Value)(device, createInfo, allocator, bufferPtr);
		}
	}

	public VkResult vkCreateBuffer(VkDevice device, in VkBufferCreateInfo createInfo, out VkBuffer buffer)
	{
		fixed (VkBufferCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out buffer);

			fixed (VkBuffer* bufferPtr = &buffer)
			{
				return ((delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)vkCreateBuffer_ptr.Value)(device, createInfoPtr, default, bufferPtr);
			}
		}
	}

	public VkResult vkCreateBuffer(VkDevice device, in VkBufferCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkBuffer buffer)
	{
		fixed (VkBufferCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out buffer);

			fixed (VkBuffer* bufferPtr = &buffer)
			{
				return ((delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)vkCreateBuffer_ptr.Value)(device, createInfoPtr, allocator, bufferPtr);
			}
		}
	}

	public void vkDestroyBuffer(VkDevice device, VkBuffer buffer)
	{
		((delegate* unmanaged<VkDevice, VkBuffer, VkAllocationCallbacks*, void>)vkDestroyBuffer_ptr.Value)(device, buffer, default);
	}

	public void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkBuffer, VkAllocationCallbacks*, void>)vkDestroyBuffer_ptr.Value)(device, buffer, allocator);
	}

	public VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, VkBufferView* view)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)vkCreateBufferView_ptr.Value)(device, createInfo, default, view);
	}

	public VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkBufferView* view)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)vkCreateBufferView_ptr.Value)(device, createInfo, allocator, view);
	}

	public VkResult vkCreateBufferView(VkDevice device, in VkBufferViewCreateInfo createInfo, VkBufferView* view)
	{
		fixed (VkBufferViewCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)vkCreateBufferView_ptr.Value)(device, createInfoPtr, default, view);
		}
	}

	public VkResult vkCreateBufferView(VkDevice device, in VkBufferViewCreateInfo createInfo, VkAllocationCallbacks* allocator, VkBufferView* view)
	{
		fixed (VkBufferViewCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)vkCreateBufferView_ptr.Value)(device, createInfoPtr, allocator, view);
		}
	}

	public VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, out VkBufferView view)
	{
		Unsafe.SkipInit(out view);

		fixed (VkBufferView* viewPtr = &view)
		{
			return ((delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)vkCreateBufferView_ptr.Value)(device, createInfo, default, viewPtr);
		}
	}

	public VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkBufferView view)
	{
		Unsafe.SkipInit(out view);

		fixed (VkBufferView* viewPtr = &view)
		{
			return ((delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)vkCreateBufferView_ptr.Value)(device, createInfo, allocator, viewPtr);
		}
	}

	public VkResult vkCreateBufferView(VkDevice device, in VkBufferViewCreateInfo createInfo, out VkBufferView view)
	{
		fixed (VkBufferViewCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out view);

			fixed (VkBufferView* viewPtr = &view)
			{
				return ((delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)vkCreateBufferView_ptr.Value)(device, createInfoPtr, default, viewPtr);
			}
		}
	}

	public VkResult vkCreateBufferView(VkDevice device, in VkBufferViewCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkBufferView view)
	{
		fixed (VkBufferViewCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out view);

			fixed (VkBufferView* viewPtr = &view)
			{
				return ((delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)vkCreateBufferView_ptr.Value)(device, createInfoPtr, allocator, viewPtr);
			}
		}
	}

	public void vkDestroyBufferView(VkDevice device, VkBufferView bufferView)
	{
		((delegate* unmanaged<VkDevice, VkBufferView, VkAllocationCallbacks*, void>)vkDestroyBufferView_ptr.Value)(device, bufferView, default);
	}

	public void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkBufferView, VkAllocationCallbacks*, void>)vkDestroyBufferView_ptr.Value)(device, bufferView, allocator);
	}

	public VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* createInfo, VkImage* image)
	{
		return ((delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)vkCreateImage_ptr.Value)(device, createInfo, default, image);
	}

	public VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkImage* image)
	{
		return ((delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)vkCreateImage_ptr.Value)(device, createInfo, allocator, image);
	}

	public VkResult vkCreateImage(VkDevice device, in VkImageCreateInfo createInfo, VkImage* image)
	{
		fixed (VkImageCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)vkCreateImage_ptr.Value)(device, createInfoPtr, default, image);
		}
	}

	public VkResult vkCreateImage(VkDevice device, in VkImageCreateInfo createInfo, VkAllocationCallbacks* allocator, VkImage* image)
	{
		fixed (VkImageCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)vkCreateImage_ptr.Value)(device, createInfoPtr, allocator, image);
		}
	}

	public VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* createInfo, out VkImage image)
	{
		Unsafe.SkipInit(out image);

		fixed (VkImage* imagePtr = &image)
		{
			return ((delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)vkCreateImage_ptr.Value)(device, createInfo, default, imagePtr);
		}
	}

	public VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkImage image)
	{
		Unsafe.SkipInit(out image);

		fixed (VkImage* imagePtr = &image)
		{
			return ((delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)vkCreateImage_ptr.Value)(device, createInfo, allocator, imagePtr);
		}
	}

	public VkResult vkCreateImage(VkDevice device, in VkImageCreateInfo createInfo, out VkImage image)
	{
		fixed (VkImageCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out image);

			fixed (VkImage* imagePtr = &image)
			{
				return ((delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)vkCreateImage_ptr.Value)(device, createInfoPtr, default, imagePtr);
			}
		}
	}

	public VkResult vkCreateImage(VkDevice device, in VkImageCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkImage image)
	{
		fixed (VkImageCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out image);

			fixed (VkImage* imagePtr = &image)
			{
				return ((delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)vkCreateImage_ptr.Value)(device, createInfoPtr, allocator, imagePtr);
			}
		}
	}

	public void vkDestroyImage(VkDevice device, VkImage image)
	{
		((delegate* unmanaged<VkDevice, VkImage, VkAllocationCallbacks*, void>)vkDestroyImage_ptr.Value)(device, image, default);
	}

	public void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkImage, VkAllocationCallbacks*, void>)vkDestroyImage_ptr.Value)(device, image, allocator);
	}

	public void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* subresource, VkSubresourceLayout* layout)
	{
		((delegate* unmanaged<VkDevice, VkImage, VkImageSubresource*, VkSubresourceLayout*, void>)vkGetImageSubresourceLayout_ptr.Value)(device, image, subresource, layout);
	}

	public void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* subresource, out VkSubresourceLayout layout)
	{
		Unsafe.SkipInit(out layout);

		fixed (VkSubresourceLayout* layoutPtr = &layout)
		{
			((delegate* unmanaged<VkDevice, VkImage, VkImageSubresource*, VkSubresourceLayout*, void>)vkGetImageSubresourceLayout_ptr.Value)(device, image, subresource, layoutPtr);
		}
	}

	public VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, VkImageView* view)
	{
		return ((delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)vkCreateImageView_ptr.Value)(device, createInfo, default, view);
	}

	public VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkImageView* view)
	{
		return ((delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)vkCreateImageView_ptr.Value)(device, createInfo, allocator, view);
	}

	public VkResult vkCreateImageView(VkDevice device, in VkImageViewCreateInfo createInfo, VkImageView* view)
	{
		fixed (VkImageViewCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)vkCreateImageView_ptr.Value)(device, createInfoPtr, default, view);
		}
	}

	public VkResult vkCreateImageView(VkDevice device, in VkImageViewCreateInfo createInfo, VkAllocationCallbacks* allocator, VkImageView* view)
	{
		fixed (VkImageViewCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)vkCreateImageView_ptr.Value)(device, createInfoPtr, allocator, view);
		}
	}

	public VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, out VkImageView view)
	{
		Unsafe.SkipInit(out view);

		fixed (VkImageView* viewPtr = &view)
		{
			return ((delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)vkCreateImageView_ptr.Value)(device, createInfo, default, viewPtr);
		}
	}

	public VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkImageView view)
	{
		Unsafe.SkipInit(out view);

		fixed (VkImageView* viewPtr = &view)
		{
			return ((delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)vkCreateImageView_ptr.Value)(device, createInfo, allocator, viewPtr);
		}
	}

	public VkResult vkCreateImageView(VkDevice device, in VkImageViewCreateInfo createInfo, out VkImageView view)
	{
		fixed (VkImageViewCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out view);

			fixed (VkImageView* viewPtr = &view)
			{
				return ((delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)vkCreateImageView_ptr.Value)(device, createInfoPtr, default, viewPtr);
			}
		}
	}

	public VkResult vkCreateImageView(VkDevice device, in VkImageViewCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkImageView view)
	{
		fixed (VkImageViewCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out view);

			fixed (VkImageView* viewPtr = &view)
			{
				return ((delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)vkCreateImageView_ptr.Value)(device, createInfoPtr, allocator, viewPtr);
			}
		}
	}

	public void vkDestroyImageView(VkDevice device, VkImageView imageView)
	{
		((delegate* unmanaged<VkDevice, VkImageView, VkAllocationCallbacks*, void>)vkDestroyImageView_ptr.Value)(device, imageView, default);
	}

	public void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkImageView, VkAllocationCallbacks*, void>)vkDestroyImageView_ptr.Value)(device, imageView, allocator);
	}

	public VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkShaderModule* shaderModule)
	{
		return ((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)vkCreateShaderModule_ptr.Value)(device, createInfo, default, shaderModule);
	}

	public VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkShaderModule* shaderModule)
	{
		return ((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)vkCreateShaderModule_ptr.Value)(device, createInfo, allocator, shaderModule);
	}

	public VkResult vkCreateShaderModule(VkDevice device, in VkShaderModuleCreateInfo createInfo, VkShaderModule* shaderModule)
	{
		fixed (VkShaderModuleCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)vkCreateShaderModule_ptr.Value)(device, createInfoPtr, default, shaderModule);
		}
	}

	public VkResult vkCreateShaderModule(VkDevice device, in VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks* allocator, VkShaderModule* shaderModule)
	{
		fixed (VkShaderModuleCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)vkCreateShaderModule_ptr.Value)(device, createInfoPtr, allocator, shaderModule);
		}
	}

	public VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, out VkShaderModule shaderModule)
	{
		Unsafe.SkipInit(out shaderModule);

		fixed (VkShaderModule* shaderModulePtr = &shaderModule)
		{
			return ((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)vkCreateShaderModule_ptr.Value)(device, createInfo, default, shaderModulePtr);
		}
	}

	public VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkShaderModule shaderModule)
	{
		Unsafe.SkipInit(out shaderModule);

		fixed (VkShaderModule* shaderModulePtr = &shaderModule)
		{
			return ((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)vkCreateShaderModule_ptr.Value)(device, createInfo, allocator, shaderModulePtr);
		}
	}

	public VkResult vkCreateShaderModule(VkDevice device, in VkShaderModuleCreateInfo createInfo, out VkShaderModule shaderModule)
	{
		fixed (VkShaderModuleCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out shaderModule);

			fixed (VkShaderModule* shaderModulePtr = &shaderModule)
			{
				return ((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)vkCreateShaderModule_ptr.Value)(device, createInfoPtr, default, shaderModulePtr);
			}
		}
	}

	public VkResult vkCreateShaderModule(VkDevice device, in VkShaderModuleCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkShaderModule shaderModule)
	{
		fixed (VkShaderModuleCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out shaderModule);

			fixed (VkShaderModule* shaderModulePtr = &shaderModule)
			{
				return ((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)vkCreateShaderModule_ptr.Value)(device, createInfoPtr, allocator, shaderModulePtr);
			}
		}
	}

	public void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule)
	{
		((delegate* unmanaged<VkDevice, VkShaderModule, VkAllocationCallbacks*, void>)vkDestroyShaderModule_ptr.Value)(device, shaderModule, default);
	}

	public void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkShaderModule, VkAllocationCallbacks*, void>)vkDestroyShaderModule_ptr.Value)(device, shaderModule, allocator);
	}

	public VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, VkPipelineCache* pipelineCache)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)vkCreatePipelineCache_ptr.Value)(device, createInfo, default, pipelineCache);
	}

	public VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkPipelineCache* pipelineCache)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)vkCreatePipelineCache_ptr.Value)(device, createInfo, allocator, pipelineCache);
	}

	public VkResult vkCreatePipelineCache(VkDevice device, in VkPipelineCacheCreateInfo createInfo, VkPipelineCache* pipelineCache)
	{
		fixed (VkPipelineCacheCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)vkCreatePipelineCache_ptr.Value)(device, createInfoPtr, default, pipelineCache);
		}
	}

	public VkResult vkCreatePipelineCache(VkDevice device, in VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks* allocator, VkPipelineCache* pipelineCache)
	{
		fixed (VkPipelineCacheCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)vkCreatePipelineCache_ptr.Value)(device, createInfoPtr, allocator, pipelineCache);
		}
	}

	public VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, out VkPipelineCache pipelineCache)
	{
		Unsafe.SkipInit(out pipelineCache);

		fixed (VkPipelineCache* pipelineCachePtr = &pipelineCache)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)vkCreatePipelineCache_ptr.Value)(device, createInfo, default, pipelineCachePtr);
		}
	}

	public VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPipelineCache pipelineCache)
	{
		Unsafe.SkipInit(out pipelineCache);

		fixed (VkPipelineCache* pipelineCachePtr = &pipelineCache)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)vkCreatePipelineCache_ptr.Value)(device, createInfo, allocator, pipelineCachePtr);
		}
	}

	public VkResult vkCreatePipelineCache(VkDevice device, in VkPipelineCacheCreateInfo createInfo, out VkPipelineCache pipelineCache)
	{
		fixed (VkPipelineCacheCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out pipelineCache);

			fixed (VkPipelineCache* pipelineCachePtr = &pipelineCache)
			{
				return ((delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)vkCreatePipelineCache_ptr.Value)(device, createInfoPtr, default, pipelineCachePtr);
			}
		}
	}

	public VkResult vkCreatePipelineCache(VkDevice device, in VkPipelineCacheCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkPipelineCache pipelineCache)
	{
		fixed (VkPipelineCacheCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out pipelineCache);

			fixed (VkPipelineCache* pipelineCachePtr = &pipelineCache)
			{
				return ((delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)vkCreatePipelineCache_ptr.Value)(device, createInfoPtr, allocator, pipelineCachePtr);
			}
		}
	}

	public void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache)
	{
		((delegate* unmanaged<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void>)vkDestroyPipelineCache_ptr.Value)(device, pipelineCache, default);
	}

	public void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void>)vkDestroyPipelineCache_ptr.Value)(device, pipelineCache, allocator);
	}

	public VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, ulong* dataSize, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, ulong*, void*, VkResult>)vkGetPipelineCacheData_ptr.Value)(device, pipelineCache, dataSize, data);
	}

	public VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* srcCaches)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkPipelineCache*, VkResult>)vkMergePipelineCaches_ptr.Value)(device, dstCache, srcCacheCount, srcCaches);
	}

	public VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* createInfos, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateGraphicsPipelines_ptr.Value)(device, pipelineCache, createInfoCount, createInfos, default, pipelines);
	}

	public VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateGraphicsPipelines_ptr.Value)(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines);
	}

	public VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, in VkGraphicsPipelineCreateInfo createInfos, VkPipeline* pipelines)
	{
		fixed (VkGraphicsPipelineCreateInfo* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateGraphicsPipelines_ptr.Value)(device, pipelineCache, createInfoCount, createInfoPtr, default, pipelines);
		}
	}

	public VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, in VkGraphicsPipelineCreateInfo createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		fixed (VkGraphicsPipelineCreateInfo* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateGraphicsPipelines_ptr.Value)(device, pipelineCache, createInfoCount, createInfoPtr, allocator, pipelines);
		}
	}

	public VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* createInfos, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateComputePipelines_ptr.Value)(device, pipelineCache, createInfoCount, createInfos, default, pipelines);
	}

	public VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateComputePipelines_ptr.Value)(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines);
	}

	public VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, in VkComputePipelineCreateInfo createInfos, VkPipeline* pipelines)
	{
		fixed (VkComputePipelineCreateInfo* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateComputePipelines_ptr.Value)(device, pipelineCache, createInfoCount, createInfoPtr, default, pipelines);
		}
	}

	public VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, in VkComputePipelineCreateInfo createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		fixed (VkComputePipelineCreateInfo* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateComputePipelines_ptr.Value)(device, pipelineCache, createInfoCount, createInfoPtr, allocator, pipelines);
		}
	}

	public void vkDestroyPipeline(VkDevice device, VkPipeline pipeline)
	{
		((delegate* unmanaged<VkDevice, VkPipeline, VkAllocationCallbacks*, void>)vkDestroyPipeline_ptr.Value)(device, pipeline, default);
	}

	public void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkPipeline, VkAllocationCallbacks*, void>)vkDestroyPipeline_ptr.Value)(device, pipeline, allocator);
	}

	public VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, VkPipelineLayout* pipelineLayout)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)vkCreatePipelineLayout_ptr.Value)(device, createInfo, default, pipelineLayout);
	}

	public VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkPipelineLayout* pipelineLayout)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)vkCreatePipelineLayout_ptr.Value)(device, createInfo, allocator, pipelineLayout);
	}

	public VkResult vkCreatePipelineLayout(VkDevice device, in VkPipelineLayoutCreateInfo createInfo, VkPipelineLayout* pipelineLayout)
	{
		fixed (VkPipelineLayoutCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)vkCreatePipelineLayout_ptr.Value)(device, createInfoPtr, default, pipelineLayout);
		}
	}

	public VkResult vkCreatePipelineLayout(VkDevice device, in VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks* allocator, VkPipelineLayout* pipelineLayout)
	{
		fixed (VkPipelineLayoutCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)vkCreatePipelineLayout_ptr.Value)(device, createInfoPtr, allocator, pipelineLayout);
		}
	}

	public VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, out VkPipelineLayout pipelineLayout)
	{
		Unsafe.SkipInit(out pipelineLayout);

		fixed (VkPipelineLayout* pipelineLayoutPtr = &pipelineLayout)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)vkCreatePipelineLayout_ptr.Value)(device, createInfo, default, pipelineLayoutPtr);
		}
	}

	public VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPipelineLayout pipelineLayout)
	{
		Unsafe.SkipInit(out pipelineLayout);

		fixed (VkPipelineLayout* pipelineLayoutPtr = &pipelineLayout)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)vkCreatePipelineLayout_ptr.Value)(device, createInfo, allocator, pipelineLayoutPtr);
		}
	}

	public VkResult vkCreatePipelineLayout(VkDevice device, in VkPipelineLayoutCreateInfo createInfo, out VkPipelineLayout pipelineLayout)
	{
		fixed (VkPipelineLayoutCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out pipelineLayout);

			fixed (VkPipelineLayout* pipelineLayoutPtr = &pipelineLayout)
			{
				return ((delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)vkCreatePipelineLayout_ptr.Value)(device, createInfoPtr, default, pipelineLayoutPtr);
			}
		}
	}

	public VkResult vkCreatePipelineLayout(VkDevice device, in VkPipelineLayoutCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkPipelineLayout pipelineLayout)
	{
		fixed (VkPipelineLayoutCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out pipelineLayout);

			fixed (VkPipelineLayout* pipelineLayoutPtr = &pipelineLayout)
			{
				return ((delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)vkCreatePipelineLayout_ptr.Value)(device, createInfoPtr, allocator, pipelineLayoutPtr);
			}
		}
	}

	public void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout)
	{
		((delegate* unmanaged<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void>)vkDestroyPipelineLayout_ptr.Value)(device, pipelineLayout, default);
	}

	public void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void>)vkDestroyPipelineLayout_ptr.Value)(device, pipelineLayout, allocator);
	}

	public VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, VkSampler* sampler)
	{
		return ((delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)vkCreateSampler_ptr.Value)(device, createInfo, default, sampler);
	}

	public VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSampler* sampler)
	{
		return ((delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)vkCreateSampler_ptr.Value)(device, createInfo, allocator, sampler);
	}

	public VkResult vkCreateSampler(VkDevice device, in VkSamplerCreateInfo createInfo, VkSampler* sampler)
	{
		fixed (VkSamplerCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)vkCreateSampler_ptr.Value)(device, createInfoPtr, default, sampler);
		}
	}

	public VkResult vkCreateSampler(VkDevice device, in VkSamplerCreateInfo createInfo, VkAllocationCallbacks* allocator, VkSampler* sampler)
	{
		fixed (VkSamplerCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)vkCreateSampler_ptr.Value)(device, createInfoPtr, allocator, sampler);
		}
	}

	public VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, out VkSampler sampler)
	{
		Unsafe.SkipInit(out sampler);

		fixed (VkSampler* samplerPtr = &sampler)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)vkCreateSampler_ptr.Value)(device, createInfo, default, samplerPtr);
		}
	}

	public VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSampler sampler)
	{
		Unsafe.SkipInit(out sampler);

		fixed (VkSampler* samplerPtr = &sampler)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)vkCreateSampler_ptr.Value)(device, createInfo, allocator, samplerPtr);
		}
	}

	public VkResult vkCreateSampler(VkDevice device, in VkSamplerCreateInfo createInfo, out VkSampler sampler)
	{
		fixed (VkSamplerCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out sampler);

			fixed (VkSampler* samplerPtr = &sampler)
			{
				return ((delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)vkCreateSampler_ptr.Value)(device, createInfoPtr, default, samplerPtr);
			}
		}
	}

	public VkResult vkCreateSampler(VkDevice device, in VkSamplerCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSampler sampler)
	{
		fixed (VkSamplerCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out sampler);

			fixed (VkSampler* samplerPtr = &sampler)
			{
				return ((delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)vkCreateSampler_ptr.Value)(device, createInfoPtr, allocator, samplerPtr);
			}
		}
	}

	public void vkDestroySampler(VkDevice device, VkSampler sampler)
	{
		((delegate* unmanaged<VkDevice, VkSampler, VkAllocationCallbacks*, void>)vkDestroySampler_ptr.Value)(device, sampler, default);
	}

	public void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkSampler, VkAllocationCallbacks*, void>)vkDestroySampler_ptr.Value)(device, sampler, allocator);
	}

	public VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkDescriptorSetLayout* setLayout)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)vkCreateDescriptorSetLayout_ptr.Value)(device, createInfo, default, setLayout);
	}

	public VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorSetLayout* setLayout)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)vkCreateDescriptorSetLayout_ptr.Value)(device, createInfo, allocator, setLayout);
	}

	public VkResult vkCreateDescriptorSetLayout(VkDevice device, in VkDescriptorSetLayoutCreateInfo createInfo, VkDescriptorSetLayout* setLayout)
	{
		fixed (VkDescriptorSetLayoutCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)vkCreateDescriptorSetLayout_ptr.Value)(device, createInfoPtr, default, setLayout);
		}
	}

	public VkResult vkCreateDescriptorSetLayout(VkDevice device, in VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks* allocator, VkDescriptorSetLayout* setLayout)
	{
		fixed (VkDescriptorSetLayoutCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)vkCreateDescriptorSetLayout_ptr.Value)(device, createInfoPtr, allocator, setLayout);
		}
	}

	public VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, out VkDescriptorSetLayout setLayout)
	{
		Unsafe.SkipInit(out setLayout);

		fixed (VkDescriptorSetLayout* setLayoutPtr = &setLayout)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)vkCreateDescriptorSetLayout_ptr.Value)(device, createInfo, default, setLayoutPtr);
		}
	}

	public VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorSetLayout setLayout)
	{
		Unsafe.SkipInit(out setLayout);

		fixed (VkDescriptorSetLayout* setLayoutPtr = &setLayout)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)vkCreateDescriptorSetLayout_ptr.Value)(device, createInfo, allocator, setLayoutPtr);
		}
	}

	public VkResult vkCreateDescriptorSetLayout(VkDevice device, in VkDescriptorSetLayoutCreateInfo createInfo, out VkDescriptorSetLayout setLayout)
	{
		fixed (VkDescriptorSetLayoutCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out setLayout);

			fixed (VkDescriptorSetLayout* setLayoutPtr = &setLayout)
			{
				return ((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)vkCreateDescriptorSetLayout_ptr.Value)(device, createInfoPtr, default, setLayoutPtr);
			}
		}
	}

	public VkResult vkCreateDescriptorSetLayout(VkDevice device, in VkDescriptorSetLayoutCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorSetLayout setLayout)
	{
		fixed (VkDescriptorSetLayoutCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out setLayout);

			fixed (VkDescriptorSetLayout* setLayoutPtr = &setLayout)
			{
				return ((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)vkCreateDescriptorSetLayout_ptr.Value)(device, createInfoPtr, allocator, setLayoutPtr);
			}
		}
	}

	public void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void>)vkDestroyDescriptorSetLayout_ptr.Value)(device, descriptorSetLayout, default);
	}

	public void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void>)vkDestroyDescriptorSetLayout_ptr.Value)(device, descriptorSetLayout, allocator);
	}

	public VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, VkDescriptorPool* descriptorPool)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)vkCreateDescriptorPool_ptr.Value)(device, createInfo, default, descriptorPool);
	}

	public VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorPool* descriptorPool)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)vkCreateDescriptorPool_ptr.Value)(device, createInfo, allocator, descriptorPool);
	}

	public VkResult vkCreateDescriptorPool(VkDevice device, in VkDescriptorPoolCreateInfo createInfo, VkDescriptorPool* descriptorPool)
	{
		fixed (VkDescriptorPoolCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)vkCreateDescriptorPool_ptr.Value)(device, createInfoPtr, default, descriptorPool);
		}
	}

	public VkResult vkCreateDescriptorPool(VkDevice device, in VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, VkDescriptorPool* descriptorPool)
	{
		fixed (VkDescriptorPoolCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)vkCreateDescriptorPool_ptr.Value)(device, createInfoPtr, allocator, descriptorPool);
		}
	}

	public VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, out VkDescriptorPool descriptorPool)
	{
		Unsafe.SkipInit(out descriptorPool);

		fixed (VkDescriptorPool* descriptorPoolPtr = &descriptorPool)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)vkCreateDescriptorPool_ptr.Value)(device, createInfo, default, descriptorPoolPtr);
		}
	}

	public VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorPool descriptorPool)
	{
		Unsafe.SkipInit(out descriptorPool);

		fixed (VkDescriptorPool* descriptorPoolPtr = &descriptorPool)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)vkCreateDescriptorPool_ptr.Value)(device, createInfo, allocator, descriptorPoolPtr);
		}
	}

	public VkResult vkCreateDescriptorPool(VkDevice device, in VkDescriptorPoolCreateInfo createInfo, out VkDescriptorPool descriptorPool)
	{
		fixed (VkDescriptorPoolCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out descriptorPool);

			fixed (VkDescriptorPool* descriptorPoolPtr = &descriptorPool)
			{
				return ((delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)vkCreateDescriptorPool_ptr.Value)(device, createInfoPtr, default, descriptorPoolPtr);
			}
		}
	}

	public VkResult vkCreateDescriptorPool(VkDevice device, in VkDescriptorPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorPool descriptorPool)
	{
		fixed (VkDescriptorPoolCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out descriptorPool);

			fixed (VkDescriptorPool* descriptorPoolPtr = &descriptorPool)
			{
				return ((delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)vkCreateDescriptorPool_ptr.Value)(device, createInfoPtr, allocator, descriptorPoolPtr);
			}
		}
	}

	public void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void>)vkDestroyDescriptorPool_ptr.Value)(device, descriptorPool, default);
	}

	public void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void>)vkDestroyDescriptorPool_ptr.Value)(device, descriptorPool, allocator);
	}

	public VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags, VkResult>)vkResetDescriptorPool_ptr.Value)(device, descriptorPool, flags);
	}

	public VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* allocateInfo, VkDescriptorSet* descriptorSets)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet*, VkResult>)vkAllocateDescriptorSets_ptr.Value)(device, allocateInfo, descriptorSets);
	}

	public VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* descriptorSets)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorPool, uint, VkDescriptorSet*, VkResult>)vkFreeDescriptorSets_ptr.Value)(device, descriptorPool, descriptorSetCount, descriptorSets);
	}

	public void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* descriptorCopies)
	{
		((delegate* unmanaged<VkDevice, uint, VkWriteDescriptorSet*, uint, VkCopyDescriptorSet*, void>)vkUpdateDescriptorSets_ptr.Value)(device, descriptorWriteCount, descriptorWrites, descriptorCopyCount, descriptorCopies);
	}

	public VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, VkFramebuffer* framebuffer)
	{
		return ((delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)vkCreateFramebuffer_ptr.Value)(device, createInfo, default, framebuffer);
	}

	public VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkFramebuffer* framebuffer)
	{
		return ((delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)vkCreateFramebuffer_ptr.Value)(device, createInfo, allocator, framebuffer);
	}

	public VkResult vkCreateFramebuffer(VkDevice device, in VkFramebufferCreateInfo createInfo, VkFramebuffer* framebuffer)
	{
		fixed (VkFramebufferCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)vkCreateFramebuffer_ptr.Value)(device, createInfoPtr, default, framebuffer);
		}
	}

	public VkResult vkCreateFramebuffer(VkDevice device, in VkFramebufferCreateInfo createInfo, VkAllocationCallbacks* allocator, VkFramebuffer* framebuffer)
	{
		fixed (VkFramebufferCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)vkCreateFramebuffer_ptr.Value)(device, createInfoPtr, allocator, framebuffer);
		}
	}

	public VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, out VkFramebuffer framebuffer)
	{
		Unsafe.SkipInit(out framebuffer);

		fixed (VkFramebuffer* framebufferPtr = &framebuffer)
		{
			return ((delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)vkCreateFramebuffer_ptr.Value)(device, createInfo, default, framebufferPtr);
		}
	}

	public VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkFramebuffer framebuffer)
	{
		Unsafe.SkipInit(out framebuffer);

		fixed (VkFramebuffer* framebufferPtr = &framebuffer)
		{
			return ((delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)vkCreateFramebuffer_ptr.Value)(device, createInfo, allocator, framebufferPtr);
		}
	}

	public VkResult vkCreateFramebuffer(VkDevice device, in VkFramebufferCreateInfo createInfo, out VkFramebuffer framebuffer)
	{
		fixed (VkFramebufferCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out framebuffer);

			fixed (VkFramebuffer* framebufferPtr = &framebuffer)
			{
				return ((delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)vkCreateFramebuffer_ptr.Value)(device, createInfoPtr, default, framebufferPtr);
			}
		}
	}

	public VkResult vkCreateFramebuffer(VkDevice device, in VkFramebufferCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkFramebuffer framebuffer)
	{
		fixed (VkFramebufferCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out framebuffer);

			fixed (VkFramebuffer* framebufferPtr = &framebuffer)
			{
				return ((delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)vkCreateFramebuffer_ptr.Value)(device, createInfoPtr, allocator, framebufferPtr);
			}
		}
	}

	public void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer)
	{
		((delegate* unmanaged<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void>)vkDestroyFramebuffer_ptr.Value)(device, framebuffer, default);
	}

	public void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void>)vkDestroyFramebuffer_ptr.Value)(device, framebuffer, allocator);
	}

	public VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, VkRenderPass* renderPass)
	{
		return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass_ptr.Value)(device, createInfo, default, renderPass);
	}

	public VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass)
	{
		return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass_ptr.Value)(device, createInfo, allocator, renderPass);
	}

	public VkResult vkCreateRenderPass(VkDevice device, in VkRenderPassCreateInfo createInfo, VkRenderPass* renderPass)
	{
		fixed (VkRenderPassCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass_ptr.Value)(device, createInfoPtr, default, renderPass);
		}
	}

	public VkResult vkCreateRenderPass(VkDevice device, in VkRenderPassCreateInfo createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass)
	{
		fixed (VkRenderPassCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass_ptr.Value)(device, createInfoPtr, allocator, renderPass);
		}
	}

	public VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, out VkRenderPass renderPass)
	{
		Unsafe.SkipInit(out renderPass);

		fixed (VkRenderPass* renderPassPtr = &renderPass)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass_ptr.Value)(device, createInfo, default, renderPassPtr);
		}
	}

	public VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass)
	{
		Unsafe.SkipInit(out renderPass);

		fixed (VkRenderPass* renderPassPtr = &renderPass)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass_ptr.Value)(device, createInfo, allocator, renderPassPtr);
		}
	}

	public VkResult vkCreateRenderPass(VkDevice device, in VkRenderPassCreateInfo createInfo, out VkRenderPass renderPass)
	{
		fixed (VkRenderPassCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out renderPass);

			fixed (VkRenderPass* renderPassPtr = &renderPass)
			{
				return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass_ptr.Value)(device, createInfoPtr, default, renderPassPtr);
			}
		}
	}

	public VkResult vkCreateRenderPass(VkDevice device, in VkRenderPassCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass)
	{
		fixed (VkRenderPassCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out renderPass);

			fixed (VkRenderPass* renderPassPtr = &renderPass)
			{
				return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass_ptr.Value)(device, createInfoPtr, allocator, renderPassPtr);
			}
		}
	}

	public void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass)
	{
		((delegate* unmanaged<VkDevice, VkRenderPass, VkAllocationCallbacks*, void>)vkDestroyRenderPass_ptr.Value)(device, renderPass, default);
	}

	public void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkRenderPass, VkAllocationCallbacks*, void>)vkDestroyRenderPass_ptr.Value)(device, renderPass, allocator);
	}

	public void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* granularity)
	{
		((delegate* unmanaged<VkDevice, VkRenderPass, VkExtent2D*, void>)vkGetRenderAreaGranularity_ptr.Value)(device, renderPass, granularity);
	}

	public void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D granularity)
	{
		Unsafe.SkipInit(out granularity);

		fixed (VkExtent2D* granularityPtr = &granularity)
		{
			((delegate* unmanaged<VkDevice, VkRenderPass, VkExtent2D*, void>)vkGetRenderAreaGranularity_ptr.Value)(device, renderPass, granularityPtr);
		}
	}

	public VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, VkCommandPool* commandPool)
	{
		return ((delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)vkCreateCommandPool_ptr.Value)(device, createInfo, default, commandPool);
	}

	public VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkCommandPool* commandPool)
	{
		return ((delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)vkCreateCommandPool_ptr.Value)(device, createInfo, allocator, commandPool);
	}

	public VkResult vkCreateCommandPool(VkDevice device, in VkCommandPoolCreateInfo createInfo, VkCommandPool* commandPool)
	{
		fixed (VkCommandPoolCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)vkCreateCommandPool_ptr.Value)(device, createInfoPtr, default, commandPool);
		}
	}

	public VkResult vkCreateCommandPool(VkDevice device, in VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, VkCommandPool* commandPool)
	{
		fixed (VkCommandPoolCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)vkCreateCommandPool_ptr.Value)(device, createInfoPtr, allocator, commandPool);
		}
	}

	public VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, out VkCommandPool commandPool)
	{
		Unsafe.SkipInit(out commandPool);

		fixed (VkCommandPool* commandPoolPtr = &commandPool)
		{
			return ((delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)vkCreateCommandPool_ptr.Value)(device, createInfo, default, commandPoolPtr);
		}
	}

	public VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkCommandPool commandPool)
	{
		Unsafe.SkipInit(out commandPool);

		fixed (VkCommandPool* commandPoolPtr = &commandPool)
		{
			return ((delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)vkCreateCommandPool_ptr.Value)(device, createInfo, allocator, commandPoolPtr);
		}
	}

	public VkResult vkCreateCommandPool(VkDevice device, in VkCommandPoolCreateInfo createInfo, out VkCommandPool commandPool)
	{
		fixed (VkCommandPoolCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out commandPool);

			fixed (VkCommandPool* commandPoolPtr = &commandPool)
			{
				return ((delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)vkCreateCommandPool_ptr.Value)(device, createInfoPtr, default, commandPoolPtr);
			}
		}
	}

	public VkResult vkCreateCommandPool(VkDevice device, in VkCommandPoolCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkCommandPool commandPool)
	{
		fixed (VkCommandPoolCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out commandPool);

			fixed (VkCommandPool* commandPoolPtr = &commandPool)
			{
				return ((delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)vkCreateCommandPool_ptr.Value)(device, createInfoPtr, allocator, commandPoolPtr);
			}
		}
	}

	public void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool)
	{
		((delegate* unmanaged<VkDevice, VkCommandPool, VkAllocationCallbacks*, void>)vkDestroyCommandPool_ptr.Value)(device, commandPool, default);
	}

	public void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkCommandPool, VkAllocationCallbacks*, void>)vkDestroyCommandPool_ptr.Value)(device, commandPool, allocator);
	}

	public VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
	{
		return ((delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult>)vkResetCommandPool_ptr.Value)(device, commandPool, flags);
	}

	public VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* allocateInfo, VkCommandBuffer* commandBuffers)
	{
		return ((delegate* unmanaged<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer*, VkResult>)vkAllocateCommandBuffers_ptr.Value)(device, allocateInfo, commandBuffers);
	}

	public void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* commandBuffers)
	{
		((delegate* unmanaged<VkDevice, VkCommandPool, uint, VkCommandBuffer*, void>)vkFreeCommandBuffers_ptr.Value)(device, commandPool, commandBufferCount, commandBuffers);
	}

	public VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* beginInfo)
	{
		return ((delegate* unmanaged<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult>)vkBeginCommandBuffer_ptr.Value)(commandBuffer, beginInfo);
	}

	public VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)
	{
		return ((delegate* unmanaged<VkCommandBuffer, VkResult>)vkEndCommandBuffer_ptr.Value)(commandBuffer);
	}

	public VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
	{
		return ((delegate* unmanaged<VkCommandBuffer, VkCommandBufferResetFlags, VkResult>)vkResetCommandBuffer_ptr.Value)(commandBuffer, flags);
	}

	public void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void>)vkCmdBindPipeline_ptr.Value)(commandBuffer, pipelineBindPoint, pipeline);
	}

	public void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* viewports)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewport*, void>)vkCmdSetViewport_ptr.Value)(commandBuffer, firstViewport, viewportCount, viewports);
	}

	public void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* scissors)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)vkCmdSetScissor_ptr.Value)(commandBuffer, firstScissor, scissorCount, scissors);
	}

	public void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
	{
		((delegate* unmanaged<VkCommandBuffer, float, void>)vkCmdSetLineWidth_ptr.Value)(commandBuffer, lineWidth);
	}

	public void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
	{
		((delegate* unmanaged<VkCommandBuffer, float, float, float, void>)vkCmdSetDepthBias_ptr.Value)(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	}

	public void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float* blendConstants)
	{
		((delegate* unmanaged<VkCommandBuffer, float*, void>)vkCmdSetBlendConstants_ptr.Value)(commandBuffer, blendConstants);
	}

	public void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
	{
		((delegate* unmanaged<VkCommandBuffer, float, float, void>)vkCmdSetDepthBounds_ptr.Value)(commandBuffer, minDepthBounds, maxDepthBounds);
	}

	public void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask)
	{
		((delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)vkCmdSetStencilCompareMask_ptr.Value)(commandBuffer, faceMask, compareMask);
	}

	public void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask)
	{
		((delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)vkCmdSetStencilWriteMask_ptr.Value)(commandBuffer, faceMask, writeMask);
	}

	public void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference)
	{
		((delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)vkCmdSetStencilReference_ptr.Value)(commandBuffer, faceMask, reference);
	}

	public void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* descriptorSets, uint dynamicOffsetCount, uint* dynamicOffsets)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet*, uint, uint*, void>)vkCmdBindDescriptorSets_ptr.Value)(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, descriptorSets, dynamicOffsetCount, dynamicOffsets);
	}

	public void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkIndexType indexType)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkIndexType, void>)vkCmdBindIndexBuffer_ptr.Value)(commandBuffer, buffer, offset, indexType);
	}

	public void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ulong* offsets)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, void>)vkCmdBindVertexBuffers_ptr.Value)(commandBuffer, firstBinding, bindingCount, buffers, offsets);
	}

	public void vkCmdDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, void>)vkCmdDraw_ptr.Value)(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	}

	public void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, uint, int, uint, void>)vkCmdDrawIndexed_ptr.Value)(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	}

	public void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndirect_ptr.Value)(commandBuffer, buffer, offset, drawCount, stride);
	}

	public void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndexedIndirect_ptr.Value)(commandBuffer, buffer, offset, drawCount, stride);
	}

	public void vkCmdDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, uint, void>)vkCmdDispatch_ptr.Value)(commandBuffer, groupCountX, groupCountY, groupCountZ);
	}

	public void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, void>)vkCmdDispatchIndirect_ptr.Value)(commandBuffer, buffer, offset);
	}

	public void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* regions)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy*, void>)vkCmdCopyBuffer_ptr.Value)(commandBuffer, srcBuffer, dstBuffer, regionCount, regions);
	}

	public void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* regions)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy*, void>)vkCmdCopyImage_ptr.Value)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions);
	}

	public void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* regions, VkFilter filter)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit*, VkFilter, void>)vkCmdBlitImage_ptr.Value)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions, filter);
	}

	public void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* regions)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy*, void>)vkCmdCopyBufferToImage_ptr.Value)(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, regions);
	}

	public void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* regions)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy*, void>)vkCmdCopyImageToBuffer_ptr.Value)(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, regions);
	}

	public void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, ulong dstOffset, ulong dataSize, void* data)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, ulong, void*, void>)vkCmdUpdateBuffer_ptr.Value)(commandBuffer, dstBuffer, dstOffset, dataSize, data);
	}

	public void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, ulong dstOffset, ulong size, uint data)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, ulong, uint, void>)vkCmdFillBuffer_ptr.Value)(commandBuffer, dstBuffer, dstOffset, size, data);
	}

	public void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* color, uint rangeCount, VkImageSubresourceRange* ranges)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange*, void>)vkCmdClearColorImage_ptr.Value)(commandBuffer, image, imageLayout, color, rangeCount, ranges);
	}

	public void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* depthStencil, uint rangeCount, VkImageSubresourceRange* ranges)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange*, void>)vkCmdClearDepthStencilImage_ptr.Value)(commandBuffer, image, imageLayout, depthStencil, rangeCount, ranges);
	}

	public void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* attachments, uint rectCount, VkClearRect* rects)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkClearAttachment*, uint, VkClearRect*, void>)vkCmdClearAttachments_ptr.Value)(commandBuffer, attachmentCount, attachments, rectCount, rects);
	}

	public void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* regions)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve*, void>)vkCmdResolveImage_ptr.Value)(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, regions);
	}

	public void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask)
	{
		((delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)vkCmdSetEvent_ptr.Value)(commandBuffer, @event, stageMask);
	}

	public void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask)
	{
		((delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)vkCmdResetEvent_ptr.Value)(commandBuffer, @event, stageMask);
	}

	public void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* events, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)vkCmdWaitEvents_ptr.Value)(commandBuffer, eventCount, events, srcStageMask, dstStageMask, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
	}

	public void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)vkCmdPipelineBarrier_ptr.Value)(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, memoryBarriers, bufferMemoryBarrierCount, bufferMemoryBarriers, imageMemoryBarrierCount, imageMemoryBarriers);
	}

	public void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags)
	{
		((delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void>)vkCmdBeginQuery_ptr.Value)(commandBuffer, queryPool, query, flags);
	}

	public void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query)
	{
		((delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, void>)vkCmdEndQuery_ptr.Value)(commandBuffer, queryPool, query);
	}

	public void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount)
	{
		((delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, void>)vkCmdResetQueryPool_ptr.Value)(commandBuffer, queryPool, firstQuery, queryCount);
	}

	public void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags, VkQueryPool, uint, void>)vkCmdWriteTimestamp_ptr.Value)(commandBuffer, pipelineStage, queryPool, query);
	}

	public void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, ulong dstOffset, ulong stride, VkQueryResultFlags flags)
	{
		((delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, ulong, ulong, VkQueryResultFlags, void>)vkCmdCopyQueryPoolResults_ptr.Value)(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
	}

	public void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* values)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void>)vkCmdPushConstants_ptr.Value)(commandBuffer, layout, stageFlags, offset, size, values);
	}

	public void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassContents contents)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void>)vkCmdBeginRenderPass_ptr.Value)(commandBuffer, renderPassBegin, contents);
	}

	public void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSubpassContents, void>)vkCmdNextSubpass_ptr.Value)(commandBuffer, contents);
	}

	public void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)
	{
		((delegate* unmanaged<VkCommandBuffer, void>)vkCmdEndRenderPass_ptr.Value)(commandBuffer);
	}

	public void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* commandBuffers)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkCommandBuffer*, void>)vkCmdExecuteCommands_ptr.Value)(commandBuffer, commandBufferCount, commandBuffers);
	}

	public VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* bindInfos)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult>)vkBindBufferMemory2_ptr.Value)(device, bindInfoCount, bindInfos);
	}

	public VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* bindInfos)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkBindImageMemoryInfo*, VkResult>)vkBindImageMemory2_ptr.Value)(device, bindInfoCount, bindInfos);
	}

	public void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* peerMemoryFeatures)
	{
		((delegate* unmanaged<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)vkGetDeviceGroupPeerMemoryFeatures_ptr.Value)(device, heapIndex, localDeviceIndex, remoteDeviceIndex, peerMemoryFeatures);
	}

	public void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint deviceMask)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, void>)vkCmdSetDeviceMask_ptr.Value)(commandBuffer, deviceMask);
	}

	public void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)vkCmdDispatchBase_ptr.Value)(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	public void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)vkGetImageMemoryRequirements2_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)vkGetBufferMemoryRequirements2_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void>)vkGetImageSparseMemoryRequirements2_ptr.Value)(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	}

	public void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
	{
		((delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void>)vkTrimCommandPool_ptr.Value)(device, commandPool, flags);
	}

	public void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* queueInfo, VkQueue* queue)
	{
		((delegate* unmanaged<VkDevice, VkDeviceQueueInfo2*, VkQueue*, void>)vkGetDeviceQueue2_ptr.Value)(device, queueInfo, queue);
	}

	public void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* queueInfo, out VkQueue queue)
	{
		Unsafe.SkipInit(out queue);

		fixed (VkQueue* queuePtr = &queue)
		{
			((delegate* unmanaged<VkDevice, VkDeviceQueueInfo2*, VkQueue*, void>)vkGetDeviceQueue2_ptr.Value)(device, queueInfo, queuePtr);
		}
	}

	public VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkSamplerYcbcrConversion* ycbcrConversion)
	{
		return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversion_ptr.Value)(device, createInfo, default, ycbcrConversion);
	}

	public VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSamplerYcbcrConversion* ycbcrConversion)
	{
		return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversion_ptr.Value)(device, createInfo, allocator, ycbcrConversion);
	}

	public VkResult vkCreateSamplerYcbcrConversion(VkDevice device, in VkSamplerYcbcrConversionCreateInfo createInfo, VkSamplerYcbcrConversion* ycbcrConversion)
	{
		fixed (VkSamplerYcbcrConversionCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversion_ptr.Value)(device, createInfoPtr, default, ycbcrConversion);
		}
	}

	public VkResult vkCreateSamplerYcbcrConversion(VkDevice device, in VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks* allocator, VkSamplerYcbcrConversion* ycbcrConversion)
	{
		fixed (VkSamplerYcbcrConversionCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversion_ptr.Value)(device, createInfoPtr, allocator, ycbcrConversion);
		}
	}

	public VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, out VkSamplerYcbcrConversion ycbcrConversion)
	{
		Unsafe.SkipInit(out ycbcrConversion);

		fixed (VkSamplerYcbcrConversion* ycbcrConversionPtr = &ycbcrConversion)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversion_ptr.Value)(device, createInfo, default, ycbcrConversionPtr);
		}
	}

	public VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversion ycbcrConversion)
	{
		Unsafe.SkipInit(out ycbcrConversion);

		fixed (VkSamplerYcbcrConversion* ycbcrConversionPtr = &ycbcrConversion)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversion_ptr.Value)(device, createInfo, allocator, ycbcrConversionPtr);
		}
	}

	public VkResult vkCreateSamplerYcbcrConversion(VkDevice device, in VkSamplerYcbcrConversionCreateInfo createInfo, out VkSamplerYcbcrConversion ycbcrConversion)
	{
		fixed (VkSamplerYcbcrConversionCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out ycbcrConversion);

			fixed (VkSamplerYcbcrConversion* ycbcrConversionPtr = &ycbcrConversion)
			{
				return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversion_ptr.Value)(device, createInfoPtr, default, ycbcrConversionPtr);
			}
		}
	}

	public VkResult vkCreateSamplerYcbcrConversion(VkDevice device, in VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversion ycbcrConversion)
	{
		fixed (VkSamplerYcbcrConversionCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out ycbcrConversion);

			fixed (VkSamplerYcbcrConversion* ycbcrConversionPtr = &ycbcrConversion)
			{
				return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversion_ptr.Value)(device, createInfoPtr, allocator, ycbcrConversionPtr);
			}
		}
	}

	public void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion)
	{
		((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)vkDestroySamplerYcbcrConversion_ptr.Value)(device, ycbcrConversion, default);
	}

	public void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)vkDestroySamplerYcbcrConversion_ptr.Value)(device, ycbcrConversion, allocator);
	}

	public VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplate_ptr.Value)(device, createInfo, default, descriptorUpdateTemplate);
	}

	public VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplate_ptr.Value)(device, createInfo, allocator, descriptorUpdateTemplate);
	}

	public VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, in VkDescriptorUpdateTemplateCreateInfo createInfo, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
	{
		fixed (VkDescriptorUpdateTemplateCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplate_ptr.Value)(device, createInfoPtr, default, descriptorUpdateTemplate);
		}
	}

	public VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, in VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks* allocator, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
	{
		fixed (VkDescriptorUpdateTemplateCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplate_ptr.Value)(device, createInfoPtr, allocator, descriptorUpdateTemplate);
		}
	}

	public VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, out VkDescriptorUpdateTemplate descriptorUpdateTemplate)
	{
		Unsafe.SkipInit(out descriptorUpdateTemplate);

		fixed (VkDescriptorUpdateTemplate* descriptorUpdateTemplatePtr = &descriptorUpdateTemplate)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplate_ptr.Value)(device, createInfo, default, descriptorUpdateTemplatePtr);
		}
	}

	public VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate)
	{
		Unsafe.SkipInit(out descriptorUpdateTemplate);

		fixed (VkDescriptorUpdateTemplate* descriptorUpdateTemplatePtr = &descriptorUpdateTemplate)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplate_ptr.Value)(device, createInfo, allocator, descriptorUpdateTemplatePtr);
		}
	}

	public VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, in VkDescriptorUpdateTemplateCreateInfo createInfo, out VkDescriptorUpdateTemplate descriptorUpdateTemplate)
	{
		fixed (VkDescriptorUpdateTemplateCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out descriptorUpdateTemplate);

			fixed (VkDescriptorUpdateTemplate* descriptorUpdateTemplatePtr = &descriptorUpdateTemplate)
			{
				return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplate_ptr.Value)(device, createInfoPtr, default, descriptorUpdateTemplatePtr);
			}
		}
	}

	public VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, in VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate)
	{
		fixed (VkDescriptorUpdateTemplateCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out descriptorUpdateTemplate);

			fixed (VkDescriptorUpdateTemplate* descriptorUpdateTemplatePtr = &descriptorUpdateTemplate)
			{
				return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplate_ptr.Value)(device, createInfoPtr, allocator, descriptorUpdateTemplatePtr);
			}
		}
	}

	public void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)vkDestroyDescriptorUpdateTemplate_ptr.Value)(device, descriptorUpdateTemplate, default);
	}

	public void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)vkDestroyDescriptorUpdateTemplate_ptr.Value)(device, descriptorUpdateTemplate, allocator);
	}

	public void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void>)vkUpdateDescriptorSetWithTemplate_ptr.Value)(device, descriptorSet, descriptorUpdateTemplate, data);
	}

	public void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkDescriptorSetLayoutSupport* support)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void>)vkGetDescriptorSetLayoutSupport_ptr.Value)(device, createInfo, support);
	}

	public void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndirectCount_ptr.Value)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	public void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndexedIndirectCount_ptr.Value)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	public VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkRenderPass* renderPass)
	{
		return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2_ptr.Value)(device, createInfo, default, renderPass);
	}

	public VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass)
	{
		return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2_ptr.Value)(device, createInfo, allocator, renderPass);
	}

	public VkResult vkCreateRenderPass2(VkDevice device, in VkRenderPassCreateInfo2 createInfo, VkRenderPass* renderPass)
	{
		fixed (VkRenderPassCreateInfo2* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2_ptr.Value)(device, createInfoPtr, default, renderPass);
		}
	}

	public VkResult vkCreateRenderPass2(VkDevice device, in VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass)
	{
		fixed (VkRenderPassCreateInfo2* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2_ptr.Value)(device, createInfoPtr, allocator, renderPass);
		}
	}

	public VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, out VkRenderPass renderPass)
	{
		Unsafe.SkipInit(out renderPass);

		fixed (VkRenderPass* renderPassPtr = &renderPass)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2_ptr.Value)(device, createInfo, default, renderPassPtr);
		}
	}

	public VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass)
	{
		Unsafe.SkipInit(out renderPass);

		fixed (VkRenderPass* renderPassPtr = &renderPass)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2_ptr.Value)(device, createInfo, allocator, renderPassPtr);
		}
	}

	public VkResult vkCreateRenderPass2(VkDevice device, in VkRenderPassCreateInfo2 createInfo, out VkRenderPass renderPass)
	{
		fixed (VkRenderPassCreateInfo2* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out renderPass);

			fixed (VkRenderPass* renderPassPtr = &renderPass)
			{
				return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2_ptr.Value)(device, createInfoPtr, default, renderPassPtr);
			}
		}
	}

	public VkResult vkCreateRenderPass2(VkDevice device, in VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass)
	{
		fixed (VkRenderPassCreateInfo2* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out renderPass);

			fixed (VkRenderPass* renderPassPtr = &renderPass)
			{
				return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2_ptr.Value)(device, createInfoPtr, allocator, renderPassPtr);
			}
		}
	}

	public void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)vkCmdBeginRenderPass2_ptr.Value)(commandBuffer, renderPassBegin, subpassBeginInfo);
	}

	public void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)vkCmdNextSubpass2_ptr.Value)(commandBuffer, subpassBeginInfo, subpassEndInfo);
	}

	public void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* subpassEndInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSubpassEndInfo*, void>)vkCmdEndRenderPass2_ptr.Value)(commandBuffer, subpassEndInfo);
	}

	public void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount)
	{
		((delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, void>)vkResetQueryPool_ptr.Value)(device, queryPool, firstQuery, queryCount);
	}

	public VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ulong* value)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphore, ulong*, VkResult>)vkGetSemaphoreCounterValue_ptr.Value)(device, semaphore, value);
	}

	public VkResult vkWaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* waitInfo, ulong timeout)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult>)vkWaitSemaphores_ptr.Value)(device, waitInfo, timeout);
	}

	public VkResult vkSignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* signalInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphoreSignalInfo*, VkResult>)vkSignalSemaphore_ptr.Value)(device, signalInfo);
	}

	public ulong vkGetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* info)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong>)vkGetBufferDeviceAddress_ptr.Value)(device, info);
	}

	public ulong vkGetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* info)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong>)vkGetBufferOpaqueCaptureAddress_ptr.Value)(device, info);
	}

	public ulong vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* info)
	{
		return ((delegate* unmanaged<VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong>)vkGetDeviceMemoryOpaqueCaptureAddress_ptr.Value)(device, info);
	}

	public VkResult vkCreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* createInfo, VkPrivateDataSlot* privateDataSlot)
	{
		return ((delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)vkCreatePrivateDataSlot_ptr.Value)(device, createInfo, default, privateDataSlot);
	}

	public VkResult vkCreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkPrivateDataSlot* privateDataSlot)
	{
		return ((delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)vkCreatePrivateDataSlot_ptr.Value)(device, createInfo, allocator, privateDataSlot);
	}

	public VkResult vkCreatePrivateDataSlot(VkDevice device, in VkPrivateDataSlotCreateInfo createInfo, VkPrivateDataSlot* privateDataSlot)
	{
		fixed (VkPrivateDataSlotCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)vkCreatePrivateDataSlot_ptr.Value)(device, createInfoPtr, default, privateDataSlot);
		}
	}

	public VkResult vkCreatePrivateDataSlot(VkDevice device, in VkPrivateDataSlotCreateInfo createInfo, VkAllocationCallbacks* allocator, VkPrivateDataSlot* privateDataSlot)
	{
		fixed (VkPrivateDataSlotCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)vkCreatePrivateDataSlot_ptr.Value)(device, createInfoPtr, allocator, privateDataSlot);
		}
	}

	public void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot)
	{
		((delegate* unmanaged<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)vkDestroyPrivateDataSlot_ptr.Value)(device, privateDataSlot, default);
	}

	public void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)vkDestroyPrivateDataSlot_ptr.Value)(device, privateDataSlot, allocator);
	}

	public VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data)
	{
		return ((delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult>)vkSetPrivateData_ptr.Value)(device, objectType, objectHandle, privateDataSlot, data);
	}

	public void vkGetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong* data)
	{
		((delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong*, void>)vkGetPrivateData_ptr.Value)(device, objectType, objectHandle, privateDataSlot, data);
	}

	public void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent @event, VkDependencyInfo* dependencyInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkEvent, VkDependencyInfo*, void>)vkCmdSetEvent2_ptr.Value)(commandBuffer, @event, dependencyInfo);
	}

	public void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags2 stageMask)
	{
		((delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void>)vkCmdResetEvent2_ptr.Value)(commandBuffer, @event, stageMask);
	}

	public void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* events, VkDependencyInfo* dependencyInfos)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkDependencyInfo*, void>)vkCmdWaitEvents2_ptr.Value)(commandBuffer, eventCount, events, dependencyInfos);
	}

	public void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, VkDependencyInfo* dependencyInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDependencyInfo*, void>)vkCmdPipelineBarrier2_ptr.Value)(commandBuffer, dependencyInfo);
	}

	public void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint query)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void>)vkCmdWriteTimestamp2_ptr.Value)(commandBuffer, stage, queryPool, query);
	}

	public VkResult vkQueueSubmit2(VkQueue queue, uint submitCount, VkSubmitInfo2* submits, VkFence fence)
	{
		return ((delegate* unmanaged<VkQueue, uint, VkSubmitInfo2*, VkFence, VkResult>)vkQueueSubmit2_ptr.Value)(queue, submitCount, submits, fence);
	}

	public void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* copyBufferInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyBufferInfo2*, void>)vkCmdCopyBuffer2_ptr.Value)(commandBuffer, copyBufferInfo);
	}

	public void vkCmdCopyImage2(VkCommandBuffer commandBuffer, VkCopyImageInfo2* copyImageInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyImageInfo2*, void>)vkCmdCopyImage2_ptr.Value)(commandBuffer, copyImageInfo);
	}

	public void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* copyBufferToImageInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyBufferToImageInfo2*, void>)vkCmdCopyBufferToImage2_ptr.Value)(commandBuffer, copyBufferToImageInfo);
	}

	public void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* copyImageToBufferInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyImageToBufferInfo2*, void>)vkCmdCopyImageToBuffer2_ptr.Value)(commandBuffer, copyImageToBufferInfo);
	}

	public void vkCmdBlitImage2(VkCommandBuffer commandBuffer, VkBlitImageInfo2* blitImageInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBlitImageInfo2*, void>)vkCmdBlitImage2_ptr.Value)(commandBuffer, blitImageInfo);
	}

	public void vkCmdResolveImage2(VkCommandBuffer commandBuffer, VkResolveImageInfo2* resolveImageInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkResolveImageInfo2*, void>)vkCmdResolveImage2_ptr.Value)(commandBuffer, resolveImageInfo);
	}

	public void vkCmdBeginRendering(VkCommandBuffer commandBuffer, VkRenderingInfo* renderingInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderingInfo*, void>)vkCmdBeginRendering_ptr.Value)(commandBuffer, renderingInfo);
	}

	public void vkCmdEndRendering(VkCommandBuffer commandBuffer)
	{
		((delegate* unmanaged<VkCommandBuffer, void>)vkCmdEndRendering_ptr.Value)(commandBuffer);
	}

	public void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCullModeFlags, void>)vkCmdSetCullMode_ptr.Value)(commandBuffer, cullMode);
	}

	public void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
	{
		((delegate* unmanaged<VkCommandBuffer, VkFrontFace, void>)vkCmdSetFrontFace_ptr.Value)(commandBuffer, frontFace);
	}

	public void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPrimitiveTopology, void>)vkCmdSetPrimitiveTopology_ptr.Value)(commandBuffer, primitiveTopology);
	}

	public void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport* viewports)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkViewport*, void>)vkCmdSetViewportWithCount_ptr.Value)(commandBuffer, viewportCount, viewports);
	}

	public void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D* scissors)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkRect2D*, void>)vkCmdSetScissorWithCount_ptr.Value)(commandBuffer, scissorCount, scissors);
	}

	public void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ulong* offsets, ulong* sizes, ulong* strides)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, ulong*, ulong*, void>)vkCmdBindVertexBuffers2_ptr.Value)(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes, strides);
	}

	public void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthTestEnable_ptr.Value)(commandBuffer, depthTestEnable);
	}

	public void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthWriteEnable_ptr.Value)(commandBuffer, depthWriteEnable);
	}

	public void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCompareOp, void>)vkCmdSetDepthCompareOp_ptr.Value)(commandBuffer, depthCompareOp);
	}

	public void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthBoundsTestEnable_ptr.Value)(commandBuffer, depthBoundsTestEnable);
	}

	public void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetStencilTestEnable_ptr.Value)(commandBuffer, stencilTestEnable);
	}

	public void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
	{
		((delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)vkCmdSetStencilOp_ptr.Value)(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	}

	public void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetRasterizerDiscardEnable_ptr.Value)(commandBuffer, rasterizerDiscardEnable);
	}

	public void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthBiasEnable_ptr.Value)(commandBuffer, depthBiasEnable);
	}

	public void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetPrimitiveRestartEnable_ptr.Value)(commandBuffer, primitiveRestartEnable);
	}

	public void vkGetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*, void>)vkGetDeviceBufferMemoryRequirements_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkGetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*, void>)vkGetDeviceImageMemoryRequirements_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* info, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2*, void>)vkGetDeviceImageSparseMemoryRequirements_ptr.Value)(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	}

	public void vkCmdSetLineStipple(VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, ushort, void>)vkCmdSetLineStipple_ptr.Value)(commandBuffer, lineStippleFactor, lineStipplePattern);
	}

	public VkResult vkMapMemory2(VkDevice device, VkMemoryMapInfo* memoryMapInfo, void** data)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryMapInfo*, void**, VkResult>)vkMapMemory2_ptr.Value)(device, memoryMapInfo, data);
	}

	public VkResult vkUnmapMemory2(VkDevice device, VkMemoryUnmapInfo* memoryUnmapInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryUnmapInfo*, VkResult>)vkUnmapMemory2_ptr.Value)(device, memoryUnmapInfo);
	}

	public void vkCmdBindIndexBuffer2(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, ulong size, VkIndexType indexType)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, ulong, VkIndexType, void>)vkCmdBindIndexBuffer2_ptr.Value)(commandBuffer, buffer, offset, size, indexType);
	}

	public void vkGetRenderingAreaGranularity(VkDevice device, VkRenderingAreaInfo* renderingAreaInfo, VkExtent2D* granularity)
	{
		((delegate* unmanaged<VkDevice, VkRenderingAreaInfo*, VkExtent2D*, void>)vkGetRenderingAreaGranularity_ptr.Value)(device, renderingAreaInfo, granularity);
	}

	public void vkGetDeviceImageSubresourceLayout(VkDevice device, VkDeviceImageSubresourceInfo* info, VkSubresourceLayout2* layout)
	{
		((delegate* unmanaged<VkDevice, VkDeviceImageSubresourceInfo*, VkSubresourceLayout2*, void>)vkGetDeviceImageSubresourceLayout_ptr.Value)(device, info, layout);
	}

	public void vkGetImageSubresourceLayout2(VkDevice device, VkImage image, VkImageSubresource2* subresource, VkSubresourceLayout2* layout)
	{
		((delegate* unmanaged<VkDevice, VkImage, VkImageSubresource2*, VkSubresourceLayout2*, void>)vkGetImageSubresourceLayout2_ptr.Value)(device, image, subresource, layout);
	}

	public void vkCmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet*, void>)vkCmdPushDescriptorSet_ptr.Value)(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, descriptorWrites);
	}

	public void vkCmdPushDescriptorSetWithTemplate(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* data)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, void*, void>)vkCmdPushDescriptorSetWithTemplate_ptr.Value)(commandBuffer, descriptorUpdateTemplate, layout, set, data);
	}

	public void vkCmdSetRenderingAttachmentLocations(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* locationInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderingAttachmentLocationInfo*, void>)vkCmdSetRenderingAttachmentLocations_ptr.Value)(commandBuffer, locationInfo);
	}

	public void vkCmdSetRenderingInputAttachmentIndices(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* inputAttachmentIndexInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderingInputAttachmentIndexInfo*, void>)vkCmdSetRenderingInputAttachmentIndices_ptr.Value)(commandBuffer, inputAttachmentIndexInfo);
	}

	public void vkCmdBindDescriptorSets2(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* bindDescriptorSetsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBindDescriptorSetsInfo*, void>)vkCmdBindDescriptorSets2_ptr.Value)(commandBuffer, bindDescriptorSetsInfo);
	}

	public void vkCmdPushConstants2(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pushConstantsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPushConstantsInfo*, void>)vkCmdPushConstants2_ptr.Value)(commandBuffer, pushConstantsInfo);
	}

	public void vkCmdPushDescriptorSet2(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pushDescriptorSetInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPushDescriptorSetInfo*, void>)vkCmdPushDescriptorSet2_ptr.Value)(commandBuffer, pushDescriptorSetInfo);
	}

	public void vkCmdPushDescriptorSetWithTemplate2(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pushDescriptorSetWithTemplateInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPushDescriptorSetWithTemplateInfo*, void>)vkCmdPushDescriptorSetWithTemplate2_ptr.Value)(commandBuffer, pushDescriptorSetWithTemplateInfo);
	}

	public VkResult vkCopyMemoryToImage(VkDevice device, VkCopyMemoryToImageInfo* copyMemoryToImageInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkCopyMemoryToImageInfo*, VkResult>)vkCopyMemoryToImage_ptr.Value)(device, copyMemoryToImageInfo);
	}

	public VkResult vkCopyImageToMemory(VkDevice device, VkCopyImageToMemoryInfo* copyImageToMemoryInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkCopyImageToMemoryInfo*, VkResult>)vkCopyImageToMemory_ptr.Value)(device, copyImageToMemoryInfo);
	}

	public VkResult vkCopyImageToImage(VkDevice device, VkCopyImageToImageInfo* copyImageToImageInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkCopyImageToImageInfo*, VkResult>)vkCopyImageToImage_ptr.Value)(device, copyImageToImageInfo);
	}

	public VkResult vkTransitionImageLayout(VkDevice device, uint transitionCount, VkHostImageLayoutTransitionInfo* transitions)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkHostImageLayoutTransitionInfo*, VkResult>)vkTransitionImageLayout_ptr.Value)(device, transitionCount, transitions);
	}

	public VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, VkSwapchainKHR* swapchain)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSwapchainKHR_ptr.Value)(device, createInfo, default, swapchain);
	}

	public VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkSwapchainKHR* swapchain)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSwapchainKHR_ptr.Value)(device, createInfo, allocator, swapchain);
	}

	public VkResult vkCreateSwapchainKHR(VkDevice device, in VkSwapchainCreateInfoKHR createInfo, VkSwapchainKHR* swapchain)
	{
		fixed (VkSwapchainCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSwapchainKHR_ptr.Value)(device, createInfoPtr, default, swapchain);
		}
	}

	public VkResult vkCreateSwapchainKHR(VkDevice device, in VkSwapchainCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkSwapchainKHR* swapchain)
	{
		fixed (VkSwapchainCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSwapchainKHR_ptr.Value)(device, createInfoPtr, allocator, swapchain);
		}
	}

	public VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, out VkSwapchainKHR swapchain)
	{
		Unsafe.SkipInit(out swapchain);

		fixed (VkSwapchainKHR* swapchainPtr = &swapchain)
		{
			return ((delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSwapchainKHR_ptr.Value)(device, createInfo, default, swapchainPtr);
		}
	}

	public VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchain)
	{
		Unsafe.SkipInit(out swapchain);

		fixed (VkSwapchainKHR* swapchainPtr = &swapchain)
		{
			return ((delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSwapchainKHR_ptr.Value)(device, createInfo, allocator, swapchainPtr);
		}
	}

	public VkResult vkCreateSwapchainKHR(VkDevice device, in VkSwapchainCreateInfoKHR createInfo, out VkSwapchainKHR swapchain)
	{
		fixed (VkSwapchainCreateInfoKHR* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out swapchain);

			fixed (VkSwapchainKHR* swapchainPtr = &swapchain)
			{
				return ((delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSwapchainKHR_ptr.Value)(device, createInfoPtr, default, swapchainPtr);
			}
		}
	}

	public VkResult vkCreateSwapchainKHR(VkDevice device, in VkSwapchainCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchain)
	{
		fixed (VkSwapchainCreateInfoKHR* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out swapchain);

			fixed (VkSwapchainKHR* swapchainPtr = &swapchain)
			{
				return ((delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSwapchainKHR_ptr.Value)(device, createInfoPtr, allocator, swapchainPtr);
			}
		}
	}

	public void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain)
	{
		((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void>)vkDestroySwapchainKHR_ptr.Value)(device, swapchain, default);
	}

	public void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void>)vkDestroySwapchainKHR_ptr.Value)(device, swapchain, allocator);
	}

	public VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint* swapchainImageCount, VkImage* swapchainImages)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, uint*, VkImage*, VkResult>)vkGetSwapchainImagesKHR_ptr.Value)(device, swapchain, swapchainImageCount, swapchainImages);
	}

	public VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, uint* imageIndex)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, uint*, VkResult>)vkAcquireNextImageKHR_ptr.Value)(device, swapchain, timeout, semaphore, fence, imageIndex);
	}

	public VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, out uint imageIndex)
	{
		Unsafe.SkipInit(out imageIndex);

		fixed (uint* imageIndexPtr = &imageIndex)
		{
			return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, uint*, VkResult>)vkAcquireNextImageKHR_ptr.Value)(device, swapchain, timeout, semaphore, fence, imageIndexPtr);
		}
	}

	public VkResult vkQueuePresentKHR(VkQueue queue, VkPresentInfoKHR* presentInfo)
	{
		return ((delegate* unmanaged<VkQueue, VkPresentInfoKHR*, VkResult>)vkQueuePresentKHR_ptr.Value)(queue, presentInfo);
	}

	public VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* deviceGroupPresentCapabilities)
	{
		return ((delegate* unmanaged<VkDevice, VkDeviceGroupPresentCapabilitiesKHR*, VkResult>)vkGetDeviceGroupPresentCapabilitiesKHR_ptr.Value)(device, deviceGroupPresentCapabilities);
	}

	public VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* modes)
	{
		return ((delegate* unmanaged<VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR*, VkResult>)vkGetDeviceGroupSurfacePresentModesKHR_ptr.Value)(device, surface, modes);
	}

	public VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, out VkDeviceGroupPresentModeFlagsKHR modes)
	{
		Unsafe.SkipInit(out modes);

		fixed (VkDeviceGroupPresentModeFlagsKHR* modesPtr = &modes)
		{
			return ((delegate* unmanaged<VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR*, VkResult>)vkGetDeviceGroupSurfacePresentModesKHR_ptr.Value)(device, surface, modesPtr);
		}
	}

	public VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfoKHR* acquireInfo, uint* imageIndex)
	{
		return ((delegate* unmanaged<VkDevice, VkAcquireNextImageInfoKHR*, uint*, VkResult>)vkAcquireNextImage2KHR_ptr.Value)(device, acquireInfo, imageIndex);
	}

	public VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfoKHR* acquireInfo, out uint imageIndex)
	{
		Unsafe.SkipInit(out imageIndex);

		fixed (uint* imageIndexPtr = &imageIndex)
		{
			return ((delegate* unmanaged<VkDevice, VkAcquireNextImageInfoKHR*, uint*, VkResult>)vkAcquireNextImage2KHR_ptr.Value)(device, acquireInfo, imageIndexPtr);
		}
	}

	public VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR* createInfos, VkSwapchainKHR* swapchains)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSharedSwapchainsKHR_ptr.Value)(device, swapchainCount, createInfos, default, swapchains);
	}

	public VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR* createInfos, VkAllocationCallbacks* allocator, VkSwapchainKHR* swapchains)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSharedSwapchainsKHR_ptr.Value)(device, swapchainCount, createInfos, allocator, swapchains);
	}

	public VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, in VkSwapchainCreateInfoKHR createInfos, VkSwapchainKHR* swapchains)
	{
		fixed (VkSwapchainCreateInfoKHR* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSharedSwapchainsKHR_ptr.Value)(device, swapchainCount, createInfoPtr, default, swapchains);
		}
	}

	public VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, in VkSwapchainCreateInfoKHR createInfos, VkAllocationCallbacks* allocator, VkSwapchainKHR* swapchains)
	{
		fixed (VkSwapchainCreateInfoKHR* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSharedSwapchainsKHR_ptr.Value)(device, swapchainCount, createInfoPtr, allocator, swapchains);
		}
	}

	public VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR* createInfos, out VkSwapchainKHR swapchains)
	{
		Unsafe.SkipInit(out swapchains);

		fixed (VkSwapchainKHR* swapchainsPtr = &swapchains)
		{
			return ((delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSharedSwapchainsKHR_ptr.Value)(device, swapchainCount, createInfos, default, swapchainsPtr);
		}
	}

	public VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR* createInfos, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchains)
	{
		Unsafe.SkipInit(out swapchains);

		fixed (VkSwapchainKHR* swapchainsPtr = &swapchains)
		{
			return ((delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSharedSwapchainsKHR_ptr.Value)(device, swapchainCount, createInfos, allocator, swapchainsPtr);
		}
	}

	public VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, in VkSwapchainCreateInfoKHR createInfos, out VkSwapchainKHR swapchains)
	{
		fixed (VkSwapchainCreateInfoKHR* createInfoPtr = &createInfos)
		{
			Unsafe.SkipInit(out swapchains);

			fixed (VkSwapchainKHR* swapchainsPtr = &swapchains)
			{
				return ((delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSharedSwapchainsKHR_ptr.Value)(device, swapchainCount, createInfoPtr, default, swapchainsPtr);
			}
		}
	}

	public VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, in VkSwapchainCreateInfoKHR createInfos, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchains)
	{
		fixed (VkSwapchainCreateInfoKHR* createInfoPtr = &createInfos)
		{
			Unsafe.SkipInit(out swapchains);

			fixed (VkSwapchainKHR* swapchainsPtr = &swapchains)
			{
				return ((delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)vkCreateSharedSwapchainsKHR_ptr.Value)(device, swapchainCount, createInfoPtr, allocator, swapchainsPtr);
			}
		}
	}

	public VkResult vkCreateVideoSessionKHR(VkDevice device, VkVideoSessionCreateInfoKHR* createInfo, VkVideoSessionKHR* videoSession)
	{
		return ((delegate* unmanaged<VkDevice, VkVideoSessionCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionKHR*, VkResult>)vkCreateVideoSessionKHR_ptr.Value)(device, createInfo, default, videoSession);
	}

	public VkResult vkCreateVideoSessionKHR(VkDevice device, VkVideoSessionCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkVideoSessionKHR* videoSession)
	{
		return ((delegate* unmanaged<VkDevice, VkVideoSessionCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionKHR*, VkResult>)vkCreateVideoSessionKHR_ptr.Value)(device, createInfo, allocator, videoSession);
	}

	public VkResult vkCreateVideoSessionKHR(VkDevice device, in VkVideoSessionCreateInfoKHR createInfo, VkVideoSessionKHR* videoSession)
	{
		fixed (VkVideoSessionCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkVideoSessionCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionKHR*, VkResult>)vkCreateVideoSessionKHR_ptr.Value)(device, createInfoPtr, default, videoSession);
		}
	}

	public VkResult vkCreateVideoSessionKHR(VkDevice device, in VkVideoSessionCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkVideoSessionKHR* videoSession)
	{
		fixed (VkVideoSessionCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkVideoSessionCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionKHR*, VkResult>)vkCreateVideoSessionKHR_ptr.Value)(device, createInfoPtr, allocator, videoSession);
		}
	}

	public void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession)
	{
		((delegate* unmanaged<VkDevice, VkVideoSessionKHR, VkAllocationCallbacks*, void>)vkDestroyVideoSessionKHR_ptr.Value)(device, videoSession, default);
	}

	public void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkVideoSessionKHR, VkAllocationCallbacks*, void>)vkDestroyVideoSessionKHR_ptr.Value)(device, videoSession, allocator);
	}

	public VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint* memoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* memoryRequirements)
	{
		return ((delegate* unmanaged<VkDevice, VkVideoSessionKHR, uint*, VkVideoSessionMemoryRequirementsKHR*, VkResult>)vkGetVideoSessionMemoryRequirementsKHR_ptr.Value)(device, videoSession, memoryRequirementsCount, memoryRequirements);
	}

	public VkResult vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint bindSessionMemoryInfoCount, VkBindVideoSessionMemoryInfoKHR* bindSessionMemoryInfos)
	{
		return ((delegate* unmanaged<VkDevice, VkVideoSessionKHR, uint, VkBindVideoSessionMemoryInfoKHR*, VkResult>)vkBindVideoSessionMemoryKHR_ptr.Value)(device, videoSession, bindSessionMemoryInfoCount, bindSessionMemoryInfos);
	}

	public VkResult vkCreateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersCreateInfoKHR* createInfo, VkVideoSessionParametersKHR* videoSessionParameters)
	{
		return ((delegate* unmanaged<VkDevice, VkVideoSessionParametersCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionParametersKHR*, VkResult>)vkCreateVideoSessionParametersKHR_ptr.Value)(device, createInfo, default, videoSessionParameters);
	}

	public VkResult vkCreateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkVideoSessionParametersKHR* videoSessionParameters)
	{
		return ((delegate* unmanaged<VkDevice, VkVideoSessionParametersCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionParametersKHR*, VkResult>)vkCreateVideoSessionParametersKHR_ptr.Value)(device, createInfo, allocator, videoSessionParameters);
	}

	public VkResult vkCreateVideoSessionParametersKHR(VkDevice device, in VkVideoSessionParametersCreateInfoKHR createInfo, VkVideoSessionParametersKHR* videoSessionParameters)
	{
		fixed (VkVideoSessionParametersCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkVideoSessionParametersCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionParametersKHR*, VkResult>)vkCreateVideoSessionParametersKHR_ptr.Value)(device, createInfoPtr, default, videoSessionParameters);
		}
	}

	public VkResult vkCreateVideoSessionParametersKHR(VkDevice device, in VkVideoSessionParametersCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkVideoSessionParametersKHR* videoSessionParameters)
	{
		fixed (VkVideoSessionParametersCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkVideoSessionParametersCreateInfoKHR*, VkAllocationCallbacks*, VkVideoSessionParametersKHR*, VkResult>)vkCreateVideoSessionParametersKHR_ptr.Value)(device, createInfoPtr, allocator, videoSessionParameters);
		}
	}

	public VkResult vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkVideoSessionParametersUpdateInfoKHR* updateInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkVideoSessionParametersKHR, VkVideoSessionParametersUpdateInfoKHR*, VkResult>)vkUpdateVideoSessionParametersKHR_ptr.Value)(device, videoSessionParameters, updateInfo);
	}

	public void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters)
	{
		((delegate* unmanaged<VkDevice, VkVideoSessionParametersKHR, VkAllocationCallbacks*, void>)vkDestroyVideoSessionParametersKHR_ptr.Value)(device, videoSessionParameters, default);
	}

	public void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkVideoSessionParametersKHR, VkAllocationCallbacks*, void>)vkDestroyVideoSessionParametersKHR_ptr.Value)(device, videoSessionParameters, allocator);
	}

	public void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoBeginCodingInfoKHR* beginInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkVideoBeginCodingInfoKHR*, void>)vkCmdBeginVideoCodingKHR_ptr.Value)(commandBuffer, beginInfo);
	}

	public void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoEndCodingInfoKHR* endCodingInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkVideoEndCodingInfoKHR*, void>)vkCmdEndVideoCodingKHR_ptr.Value)(commandBuffer, endCodingInfo);
	}

	public void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, VkVideoCodingControlInfoKHR* codingControlInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkVideoCodingControlInfoKHR*, void>)vkCmdControlVideoCodingKHR_ptr.Value)(commandBuffer, codingControlInfo);
	}

	public void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, VkVideoDecodeInfoKHR* decodeInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkVideoDecodeInfoKHR*, void>)vkCmdDecodeVideoKHR_ptr.Value)(commandBuffer, decodeInfo);
	}

	public void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, VkRenderingInfo* renderingInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderingInfo*, void>)vkCmdBeginRenderingKHR_ptr.Value)(commandBuffer, renderingInfo);
	}

	public void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)
	{
		((delegate* unmanaged<VkCommandBuffer, void>)vkCmdEndRenderingKHR_ptr.Value)(commandBuffer);
	}

	public void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* peerMemoryFeatures)
	{
		((delegate* unmanaged<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)vkGetDeviceGroupPeerMemoryFeaturesKHR_ptr.Value)(device, heapIndex, localDeviceIndex, remoteDeviceIndex, peerMemoryFeatures);
	}

	public void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlags peerMemoryFeatures)
	{
		Unsafe.SkipInit(out peerMemoryFeatures);

		fixed (VkPeerMemoryFeatureFlags* peerMemoryFeaturesPtr = &peerMemoryFeatures)
		{
			((delegate* unmanaged<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)vkGetDeviceGroupPeerMemoryFeaturesKHR_ptr.Value)(device, heapIndex, localDeviceIndex, remoteDeviceIndex, peerMemoryFeaturesPtr);
		}
	}

	public void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint deviceMask)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, void>)vkCmdSetDeviceMaskKHR_ptr.Value)(commandBuffer, deviceMask);
	}

	public void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)vkCmdDispatchBaseKHR_ptr.Value)(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}

	public void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
	{
		((delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void>)vkTrimCommandPoolKHR_ptr.Value)(device, commandPool, flags);
	}

	public VkResult vkGetMemoryFdKHR(VkDevice device, VkMemoryGetFdInfoKHR* getFdInfo, int* fd)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryGetFdInfoKHR*, int*, VkResult>)vkGetMemoryFdKHR_ptr.Value)(device, getFdInfo, fd);
	}

	public VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, VkMemoryFdPropertiesKHR* memoryFdProperties)
	{
		return ((delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlags, int, VkMemoryFdPropertiesKHR*, VkResult>)vkGetMemoryFdPropertiesKHR_ptr.Value)(device, handleType, fd, memoryFdProperties);
	}

	public VkResult vkImportSemaphoreFdKHR(VkDevice device, VkImportSemaphoreFdInfoKHR* importSemaphoreFdInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkImportSemaphoreFdInfoKHR*, VkResult>)vkImportSemaphoreFdKHR_ptr.Value)(device, importSemaphoreFdInfo);
	}

	public VkResult vkGetSemaphoreFdKHR(VkDevice device, VkSemaphoreGetFdInfoKHR* getFdInfo, int* fd)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphoreGetFdInfoKHR*, int*, VkResult>)vkGetSemaphoreFdKHR_ptr.Value)(device, getFdInfo, fd);
	}

	public void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet*, void>)vkCmdPushDescriptorSetKHR_ptr.Value)(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, descriptorWrites);
	}

	public void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* data)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, void*, void>)vkCmdPushDescriptorSetWithTemplateKHR_ptr.Value)(commandBuffer, descriptorUpdateTemplate, layout, set, data);
	}

	public VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplateKHR_ptr.Value)(device, createInfo, default, descriptorUpdateTemplate);
	}

	public VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
	{
		return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplateKHR_ptr.Value)(device, createInfo, allocator, descriptorUpdateTemplate);
	}

	public VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, in VkDescriptorUpdateTemplateCreateInfo createInfo, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
	{
		fixed (VkDescriptorUpdateTemplateCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplateKHR_ptr.Value)(device, createInfoPtr, default, descriptorUpdateTemplate);
		}
	}

	public VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, in VkDescriptorUpdateTemplateCreateInfo createInfo, VkAllocationCallbacks* allocator, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
	{
		fixed (VkDescriptorUpdateTemplateCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)vkCreateDescriptorUpdateTemplateKHR_ptr.Value)(device, createInfoPtr, allocator, descriptorUpdateTemplate);
		}
	}

	public void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)vkDestroyDescriptorUpdateTemplateKHR_ptr.Value)(device, descriptorUpdateTemplate, default);
	}

	public void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)vkDestroyDescriptorUpdateTemplateKHR_ptr.Value)(device, descriptorUpdateTemplate, allocator);
	}

	public void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void>)vkUpdateDescriptorSetWithTemplateKHR_ptr.Value)(device, descriptorSet, descriptorUpdateTemplate, data);
	}

	public VkResult vkCreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkRenderPass* renderPass)
	{
		return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2KHR_ptr.Value)(device, createInfo, default, renderPass);
	}

	public VkResult vkCreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass)
	{
		return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2KHR_ptr.Value)(device, createInfo, allocator, renderPass);
	}

	public VkResult vkCreateRenderPass2KHR(VkDevice device, in VkRenderPassCreateInfo2 createInfo, VkRenderPass* renderPass)
	{
		fixed (VkRenderPassCreateInfo2* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2KHR_ptr.Value)(device, createInfoPtr, default, renderPass);
		}
	}

	public VkResult vkCreateRenderPass2KHR(VkDevice device, in VkRenderPassCreateInfo2 createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass)
	{
		fixed (VkRenderPassCreateInfo2* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)vkCreateRenderPass2KHR_ptr.Value)(device, createInfoPtr, allocator, renderPass);
		}
	}

	public void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)vkCmdBeginRenderPass2KHR_ptr.Value)(commandBuffer, renderPassBegin, subpassBeginInfo);
	}

	public void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)vkCmdNextSubpass2KHR_ptr.Value)(commandBuffer, subpassBeginInfo, subpassEndInfo);
	}

	public void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, VkSubpassEndInfo* subpassEndInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSubpassEndInfo*, void>)vkCmdEndRenderPass2KHR_ptr.Value)(commandBuffer, subpassEndInfo);
	}

	public VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkResult>)vkGetSwapchainStatusKHR_ptr.Value)(device, swapchain);
	}

	public VkResult vkImportFenceFdKHR(VkDevice device, VkImportFenceFdInfoKHR* importFenceFdInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkImportFenceFdInfoKHR*, VkResult>)vkImportFenceFdKHR_ptr.Value)(device, importFenceFdInfo);
	}

	public VkResult vkGetFenceFdKHR(VkDevice device, VkFenceGetFdInfoKHR* getFdInfo, int* fd)
	{
		return ((delegate* unmanaged<VkDevice, VkFenceGetFdInfoKHR*, int*, VkResult>)vkGetFenceFdKHR_ptr.Value)(device, getFdInfo, fd);
	}

	public VkResult vkAcquireProfilingLockKHR(VkDevice device, VkAcquireProfilingLockInfoKHR* info)
	{
		return ((delegate* unmanaged<VkDevice, VkAcquireProfilingLockInfoKHR*, VkResult>)vkAcquireProfilingLockKHR_ptr.Value)(device, info);
	}

	public void vkReleaseProfilingLockKHR(VkDevice device)
	{
		((delegate* unmanaged<VkDevice, void>)vkReleaseProfilingLockKHR_ptr.Value)(device);
	}

	public void vkGetImageMemoryRequirements2KHR(VkDevice device, VkImageMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)vkGetImageMemoryRequirements2KHR_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkGetBufferMemoryRequirements2KHR(VkDevice device, VkBufferMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)vkGetBufferMemoryRequirements2KHR_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void>)vkGetImageSparseMemoryRequirements2KHR_ptr.Value)(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	}

	public VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkSamplerYcbcrConversion* ycbcrConversion)
	{
		return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversionKHR_ptr.Value)(device, createInfo, default, ycbcrConversion);
	}

	public VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSamplerYcbcrConversion* ycbcrConversion)
	{
		return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversionKHR_ptr.Value)(device, createInfo, allocator, ycbcrConversion);
	}

	public VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, in VkSamplerYcbcrConversionCreateInfo createInfo, VkSamplerYcbcrConversion* ycbcrConversion)
	{
		fixed (VkSamplerYcbcrConversionCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversionKHR_ptr.Value)(device, createInfoPtr, default, ycbcrConversion);
		}
	}

	public VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, in VkSamplerYcbcrConversionCreateInfo createInfo, VkAllocationCallbacks* allocator, VkSamplerYcbcrConversion* ycbcrConversion)
	{
		fixed (VkSamplerYcbcrConversionCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)vkCreateSamplerYcbcrConversionKHR_ptr.Value)(device, createInfoPtr, allocator, ycbcrConversion);
		}
	}

	public void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion)
	{
		((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)vkDestroySamplerYcbcrConversionKHR_ptr.Value)(device, ycbcrConversion, default);
	}

	public void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)vkDestroySamplerYcbcrConversionKHR_ptr.Value)(device, ycbcrConversion, allocator);
	}

	public VkResult vkBindBufferMemory2KHR(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* bindInfos)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult>)vkBindBufferMemory2KHR_ptr.Value)(device, bindInfoCount, bindInfos);
	}

	public VkResult vkBindImageMemory2KHR(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* bindInfos)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkBindImageMemoryInfo*, VkResult>)vkBindImageMemory2KHR_ptr.Value)(device, bindInfoCount, bindInfos);
	}

	public void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkDescriptorSetLayoutSupport* support)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void>)vkGetDescriptorSetLayoutSupportKHR_ptr.Value)(device, createInfo, support);
	}

	public void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndirectCountKHR_ptr.Value)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	public void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndexedIndirectCountKHR_ptr.Value)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	public VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, ulong* value)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphore, ulong*, VkResult>)vkGetSemaphoreCounterValueKHR_ptr.Value)(device, semaphore, value);
	}

	public VkResult vkWaitSemaphoresKHR(VkDevice device, VkSemaphoreWaitInfo* waitInfo, ulong timeout)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult>)vkWaitSemaphoresKHR_ptr.Value)(device, waitInfo, timeout);
	}

	public VkResult vkSignalSemaphoreKHR(VkDevice device, VkSemaphoreSignalInfo* signalInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphoreSignalInfo*, VkResult>)vkSignalSemaphoreKHR_ptr.Value)(device, signalInfo);
	}

	public void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, VkExtent2D* fragmentSize, VkFragmentShadingRateCombinerOpKHR* combinerOps)
	{
		((delegate* unmanaged<VkCommandBuffer, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR*, void>)vkCmdSetFragmentShadingRateKHR_ptr.Value)(commandBuffer, fragmentSize, combinerOps);
	}

	public void vkCmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* locationInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderingAttachmentLocationInfo*, void>)vkCmdSetRenderingAttachmentLocationsKHR_ptr.Value)(commandBuffer, locationInfo);
	}

	public void vkCmdSetRenderingInputAttachmentIndicesKHR(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* inputAttachmentIndexInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderingInputAttachmentIndexInfo*, void>)vkCmdSetRenderingInputAttachmentIndicesKHR_ptr.Value)(commandBuffer, inputAttachmentIndexInfo);
	}

	public VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, ulong presentId, ulong timeout)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, ulong, ulong, VkResult>)vkWaitForPresentKHR_ptr.Value)(device, swapchain, presentId, timeout);
	}

	public ulong vkGetBufferDeviceAddressKHR(VkDevice device, VkBufferDeviceAddressInfo* info)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong>)vkGetBufferDeviceAddressKHR_ptr.Value)(device, info);
	}

	public ulong vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, VkBufferDeviceAddressInfo* info)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong>)vkGetBufferOpaqueCaptureAddressKHR_ptr.Value)(device, info);
	}

	public ulong vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* info)
	{
		return ((delegate* unmanaged<VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong>)vkGetDeviceMemoryOpaqueCaptureAddressKHR_ptr.Value)(device, info);
	}

	public VkResult vkCreateDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR* deferredOperation)
	{
		return ((delegate* unmanaged<VkDevice, VkAllocationCallbacks*, VkDeferredOperationKHR*, VkResult>)vkCreateDeferredOperationKHR_ptr.Value)(device, default, deferredOperation);
	}

	public VkResult vkCreateDeferredOperationKHR(VkDevice device, VkAllocationCallbacks* allocator, VkDeferredOperationKHR* deferredOperation)
	{
		return ((delegate* unmanaged<VkDevice, VkAllocationCallbacks*, VkDeferredOperationKHR*, VkResult>)vkCreateDeferredOperationKHR_ptr.Value)(device, allocator, deferredOperation);
	}

	public void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation)
	{
		((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkAllocationCallbacks*, void>)vkDestroyDeferredOperationKHR_ptr.Value)(device, operation, default);
	}

	public void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkAllocationCallbacks*, void>)vkDestroyDeferredOperationKHR_ptr.Value)(device, operation, allocator);
	}

	public uint vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint>)vkGetDeferredOperationMaxConcurrencyKHR_ptr.Value)(device, operation);
	}

	public VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkResult>)vkGetDeferredOperationResultKHR_ptr.Value)(device, operation);
	}

	public VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkResult>)vkDeferredOperationJoinKHR_ptr.Value)(device, operation);
	}

	public VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfoKHR* pipelineInfo, uint* executableCount, VkPipelineExecutablePropertiesKHR* properties)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR*, VkResult>)vkGetPipelineExecutablePropertiesKHR_ptr.Value)(device, pipelineInfo, executableCount, properties);
	}

	public VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfoKHR* executableInfo, uint* statisticCount, VkPipelineExecutableStatisticKHR* statistics)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR*, VkResult>)vkGetPipelineExecutableStatisticsKHR_ptr.Value)(device, executableInfo, statisticCount, statistics);
	}

	public VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfoKHR* executableInfo, uint* internalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* internalRepresentations)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR*, VkResult>)vkGetPipelineExecutableInternalRepresentationsKHR_ptr.Value)(device, executableInfo, internalRepresentationCount, internalRepresentations);
	}

	public VkResult vkMapMemory2KHR(VkDevice device, VkMemoryMapInfo* memoryMapInfo, void** data)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryMapInfo*, void**, VkResult>)vkMapMemory2KHR_ptr.Value)(device, memoryMapInfo, data);
	}

	public VkResult vkUnmapMemory2KHR(VkDevice device, VkMemoryUnmapInfo* memoryUnmapInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryUnmapInfo*, VkResult>)vkUnmapMemory2KHR_ptr.Value)(device, memoryUnmapInfo);
	}

	public VkResult vkGetEncodedVideoSessionParametersKHR(VkDevice device, VkVideoEncodeSessionParametersGetInfoKHR* videoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR* feedbackInfo, ulong* dataSize, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkVideoEncodeSessionParametersGetInfoKHR*, VkVideoEncodeSessionParametersFeedbackInfoKHR*, ulong*, void*, VkResult>)vkGetEncodedVideoSessionParametersKHR_ptr.Value)(device, videoSessionParametersInfo, feedbackInfo, dataSize, data);
	}

	public void vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, VkVideoEncodeInfoKHR* encodeInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkVideoEncodeInfoKHR*, void>)vkCmdEncodeVideoKHR_ptr.Value)(commandBuffer, encodeInfo);
	}

	public void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent @event, VkDependencyInfo* dependencyInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkEvent, VkDependencyInfo*, void>)vkCmdSetEvent2KHR_ptr.Value)(commandBuffer, @event, dependencyInfo);
	}

	public void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags2 stageMask)
	{
		((delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void>)vkCmdResetEvent2KHR_ptr.Value)(commandBuffer, @event, stageMask);
	}

	public void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* events, VkDependencyInfo* dependencyInfos)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkDependencyInfo*, void>)vkCmdWaitEvents2KHR_ptr.Value)(commandBuffer, eventCount, events, dependencyInfos);
	}

	public void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, VkDependencyInfo* dependencyInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDependencyInfo*, void>)vkCmdPipelineBarrier2KHR_ptr.Value)(commandBuffer, dependencyInfo);
	}

	public void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint query)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void>)vkCmdWriteTimestamp2KHR_ptr.Value)(commandBuffer, stage, queryPool, query);
	}

	public VkResult vkQueueSubmit2KHR(VkQueue queue, uint submitCount, VkSubmitInfo2* submits, VkFence fence)
	{
		return ((delegate* unmanaged<VkQueue, uint, VkSubmitInfo2*, VkFence, VkResult>)vkQueueSubmit2KHR_ptr.Value)(queue, submitCount, submits, fence);
	}

	public void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* copyBufferInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyBufferInfo2*, void>)vkCmdCopyBuffer2KHR_ptr.Value)(commandBuffer, copyBufferInfo);
	}

	public void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, VkCopyImageInfo2* copyImageInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyImageInfo2*, void>)vkCmdCopyImage2KHR_ptr.Value)(commandBuffer, copyImageInfo);
	}

	public void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* copyBufferToImageInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyBufferToImageInfo2*, void>)vkCmdCopyBufferToImage2KHR_ptr.Value)(commandBuffer, copyBufferToImageInfo);
	}

	public void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* copyImageToBufferInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyImageToBufferInfo2*, void>)vkCmdCopyImageToBuffer2KHR_ptr.Value)(commandBuffer, copyImageToBufferInfo);
	}

	public void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, VkBlitImageInfo2* blitImageInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBlitImageInfo2*, void>)vkCmdBlitImage2KHR_ptr.Value)(commandBuffer, blitImageInfo);
	}

	public void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, VkResolveImageInfo2* resolveImageInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkResolveImageInfo2*, void>)vkCmdResolveImage2KHR_ptr.Value)(commandBuffer, resolveImageInfo);
	}

	public void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, ulong indirectDeviceAddress)
	{
		((delegate* unmanaged<VkCommandBuffer, ulong, void>)vkCmdTraceRaysIndirect2KHR_ptr.Value)(commandBuffer, indirectDeviceAddress);
	}

	public void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, VkDeviceBufferMemoryRequirements* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*, void>)vkGetDeviceBufferMemoryRequirementsKHR_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*, void>)vkGetDeviceImageMemoryRequirementsKHR_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* info, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2*, void>)vkGetDeviceImageSparseMemoryRequirementsKHR_ptr.Value)(device, info, sparseMemoryRequirementCount, sparseMemoryRequirements);
	}

	public void vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, ulong size, VkIndexType indexType)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, ulong, VkIndexType, void>)vkCmdBindIndexBuffer2KHR_ptr.Value)(commandBuffer, buffer, offset, size, indexType);
	}

	public void vkGetRenderingAreaGranularityKHR(VkDevice device, VkRenderingAreaInfo* renderingAreaInfo, VkExtent2D* granularity)
	{
		((delegate* unmanaged<VkDevice, VkRenderingAreaInfo*, VkExtent2D*, void>)vkGetRenderingAreaGranularityKHR_ptr.Value)(device, renderingAreaInfo, granularity);
	}

	public void vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, VkDeviceImageSubresourceInfo* info, VkSubresourceLayout2* layout)
	{
		((delegate* unmanaged<VkDevice, VkDeviceImageSubresourceInfo*, VkSubresourceLayout2*, void>)vkGetDeviceImageSubresourceLayoutKHR_ptr.Value)(device, info, layout);
	}

	public void vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, VkImageSubresource2* subresource, VkSubresourceLayout2* layout)
	{
		((delegate* unmanaged<VkDevice, VkImage, VkImageSubresource2*, VkSubresourceLayout2*, void>)vkGetImageSubresourceLayout2KHR_ptr.Value)(device, image, subresource, layout);
	}

	public VkResult vkWaitForPresent2KHR(VkDevice device, VkSwapchainKHR swapchain, VkPresentWait2InfoKHR* presentWait2Info)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkPresentWait2InfoKHR*, VkResult>)vkWaitForPresent2KHR_ptr.Value)(device, swapchain, presentWait2Info);
	}

	public VkResult vkCreatePipelineBinariesKHR(VkDevice device, VkPipelineBinaryCreateInfoKHR* createInfo, VkPipelineBinaryHandlesInfoKHR* binaries)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineBinaryCreateInfoKHR*, VkAllocationCallbacks*, VkPipelineBinaryHandlesInfoKHR*, VkResult>)vkCreatePipelineBinariesKHR_ptr.Value)(device, createInfo, default, binaries);
	}

	public VkResult vkCreatePipelineBinariesKHR(VkDevice device, VkPipelineBinaryCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkPipelineBinaryHandlesInfoKHR* binaries)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineBinaryCreateInfoKHR*, VkAllocationCallbacks*, VkPipelineBinaryHandlesInfoKHR*, VkResult>)vkCreatePipelineBinariesKHR_ptr.Value)(device, createInfo, allocator, binaries);
	}

	public VkResult vkCreatePipelineBinariesKHR(VkDevice device, in VkPipelineBinaryCreateInfoKHR createInfo, VkPipelineBinaryHandlesInfoKHR* binaries)
	{
		fixed (VkPipelineBinaryCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineBinaryCreateInfoKHR*, VkAllocationCallbacks*, VkPipelineBinaryHandlesInfoKHR*, VkResult>)vkCreatePipelineBinariesKHR_ptr.Value)(device, createInfoPtr, default, binaries);
		}
	}

	public VkResult vkCreatePipelineBinariesKHR(VkDevice device, in VkPipelineBinaryCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkPipelineBinaryHandlesInfoKHR* binaries)
	{
		fixed (VkPipelineBinaryCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineBinaryCreateInfoKHR*, VkAllocationCallbacks*, VkPipelineBinaryHandlesInfoKHR*, VkResult>)vkCreatePipelineBinariesKHR_ptr.Value)(device, createInfoPtr, allocator, binaries);
		}
	}

	public void vkDestroyPipelineBinaryKHR(VkDevice device, VkPipelineBinaryKHR pipelineBinary)
	{
		((delegate* unmanaged<VkDevice, VkPipelineBinaryKHR, VkAllocationCallbacks*, void>)vkDestroyPipelineBinaryKHR_ptr.Value)(device, pipelineBinary, default);
	}

	public void vkDestroyPipelineBinaryKHR(VkDevice device, VkPipelineBinaryKHR pipelineBinary, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkPipelineBinaryKHR, VkAllocationCallbacks*, void>)vkDestroyPipelineBinaryKHR_ptr.Value)(device, pipelineBinary, allocator);
	}

	public VkResult vkGetPipelineKeyKHR(VkDevice device, VkPipelineCreateInfoKHR* pipelineCreateInfo, VkPipelineBinaryKeyKHR* pipelineKey)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCreateInfoKHR*, VkPipelineBinaryKeyKHR*, VkResult>)vkGetPipelineKeyKHR_ptr.Value)(device, pipelineCreateInfo, pipelineKey);
	}

	public VkResult vkGetPipelineBinaryDataKHR(VkDevice device, VkPipelineBinaryDataInfoKHR* info, VkPipelineBinaryKeyKHR* pipelineBinaryKey, ulong* pipelineBinaryDataSize, void* pipelineBinaryData)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineBinaryDataInfoKHR*, VkPipelineBinaryKeyKHR*, ulong*, void*, VkResult>)vkGetPipelineBinaryDataKHR_ptr.Value)(device, info, pipelineBinaryKey, pipelineBinaryDataSize, pipelineBinaryData);
	}

	public VkResult vkReleaseCapturedPipelineDataKHR(VkDevice device, VkReleaseCapturedPipelineDataInfoKHR* info)
	{
		return ((delegate* unmanaged<VkDevice, VkReleaseCapturedPipelineDataInfoKHR*, VkAllocationCallbacks*, VkResult>)vkReleaseCapturedPipelineDataKHR_ptr.Value)(device, info, default);
	}

	public VkResult vkReleaseCapturedPipelineDataKHR(VkDevice device, VkReleaseCapturedPipelineDataInfoKHR* info, VkAllocationCallbacks* allocator)
	{
		return ((delegate* unmanaged<VkDevice, VkReleaseCapturedPipelineDataInfoKHR*, VkAllocationCallbacks*, VkResult>)vkReleaseCapturedPipelineDataKHR_ptr.Value)(device, info, allocator);
	}

	public VkResult vkReleaseSwapchainImagesKHR(VkDevice device, VkReleaseSwapchainImagesInfoKHR* releaseInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkReleaseSwapchainImagesInfoKHR*, VkResult>)vkReleaseSwapchainImagesKHR_ptr.Value)(device, releaseInfo);
	}

	public void vkCmdSetLineStippleKHR(VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, ushort, void>)vkCmdSetLineStippleKHR_ptr.Value)(commandBuffer, lineStippleFactor, lineStipplePattern);
	}

	public VkResult vkGetCalibratedTimestampsKHR(VkDevice device, uint timestampCount, VkCalibratedTimestampInfoKHR* timestampInfos, ulong* timestamps, ulong* maxDeviation)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkCalibratedTimestampInfoKHR*, ulong*, ulong*, VkResult>)vkGetCalibratedTimestampsKHR_ptr.Value)(device, timestampCount, timestampInfos, timestamps, maxDeviation);
	}

	public void vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* bindDescriptorSetsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBindDescriptorSetsInfo*, void>)vkCmdBindDescriptorSets2KHR_ptr.Value)(commandBuffer, bindDescriptorSetsInfo);
	}

	public void vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pushConstantsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPushConstantsInfo*, void>)vkCmdPushConstants2KHR_ptr.Value)(commandBuffer, pushConstantsInfo);
	}

	public void vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pushDescriptorSetInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPushDescriptorSetInfo*, void>)vkCmdPushDescriptorSet2KHR_ptr.Value)(commandBuffer, pushDescriptorSetInfo);
	}

	public void vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pushDescriptorSetWithTemplateInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPushDescriptorSetWithTemplateInfo*, void>)vkCmdPushDescriptorSetWithTemplate2KHR_ptr.Value)(commandBuffer, pushDescriptorSetWithTemplateInfo);
	}

	public void vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, VkSetDescriptorBufferOffsetsInfoEXT* setDescriptorBufferOffsetsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSetDescriptorBufferOffsetsInfoEXT*, void>)vkCmdSetDescriptorBufferOffsets2EXT_ptr.Value)(commandBuffer, setDescriptorBufferOffsetsInfo);
	}

	public void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, VkBindDescriptorBufferEmbeddedSamplersInfoEXT* bindDescriptorBufferEmbeddedSamplersInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBindDescriptorBufferEmbeddedSamplersInfoEXT*, void>)vkCmdBindDescriptorBufferEmbeddedSamplers2EXT_ptr.Value)(commandBuffer, bindDescriptorBufferEmbeddedSamplersInfo);
	}

	public VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfoEXT* tagInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkDebugMarkerObjectTagInfoEXT*, VkResult>)vkDebugMarkerSetObjectTagEXT_ptr.Value)(device, tagInfo);
	}

	public VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT* nameInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkDebugMarkerObjectNameInfoEXT*, VkResult>)vkDebugMarkerSetObjectNameEXT_ptr.Value)(device, nameInfo);
	}

	public void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* markerInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)vkCmdDebugMarkerBeginEXT_ptr.Value)(commandBuffer, markerInfo);
	}

	public void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
	{
		((delegate* unmanaged<VkCommandBuffer, void>)vkCmdDebugMarkerEndEXT_ptr.Value)(commandBuffer);
	}

	public void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* markerInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)vkCmdDebugMarkerInsertEXT_ptr.Value)(commandBuffer, markerInfo);
	}

	public void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ulong* offsets, ulong* sizes)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, ulong*, void>)vkCmdBindTransformFeedbackBuffersEXT_ptr.Value)(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes);
	}

	public void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer* counterBuffers, ulong* counterBufferOffsets)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, void>)vkCmdBeginTransformFeedbackEXT_ptr.Value)(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, counterBufferOffsets);
	}

	public void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer* counterBuffers, ulong* counterBufferOffsets)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, void>)vkCmdEndTransformFeedbackEXT_ptr.Value)(commandBuffer, firstCounterBuffer, counterBufferCount, counterBuffers, counterBufferOffsets);
	}

	public void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags, uint index)
	{
		((delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, uint, void>)vkCmdBeginQueryIndexedEXT_ptr.Value)(commandBuffer, queryPool, query, flags, index);
	}

	public void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, uint index)
	{
		((delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, void>)vkCmdEndQueryIndexedEXT_ptr.Value)(commandBuffer, queryPool, query, index);
	}

	public void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint instanceCount, uint firstInstance, VkBuffer counterBuffer, ulong counterBufferOffset, uint counterOffset, uint vertexStride)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndirectByteCountEXT_ptr.Value)(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	}

	public VkResult vkCreateCuModuleNVX(VkDevice device, VkCuModuleCreateInfoNVX* createInfo, VkCuModuleNVX* module)
	{
		return ((delegate* unmanaged<VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, VkCuModuleNVX*, VkResult>)vkCreateCuModuleNVX_ptr.Value)(device, createInfo, default, module);
	}

	public VkResult vkCreateCuModuleNVX(VkDevice device, VkCuModuleCreateInfoNVX* createInfo, VkAllocationCallbacks* allocator, VkCuModuleNVX* module)
	{
		return ((delegate* unmanaged<VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, VkCuModuleNVX*, VkResult>)vkCreateCuModuleNVX_ptr.Value)(device, createInfo, allocator, module);
	}

	public VkResult vkCreateCuModuleNVX(VkDevice device, in VkCuModuleCreateInfoNVX createInfo, VkCuModuleNVX* module)
	{
		fixed (VkCuModuleCreateInfoNVX* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, VkCuModuleNVX*, VkResult>)vkCreateCuModuleNVX_ptr.Value)(device, createInfoPtr, default, module);
		}
	}

	public VkResult vkCreateCuModuleNVX(VkDevice device, in VkCuModuleCreateInfoNVX createInfo, VkAllocationCallbacks* allocator, VkCuModuleNVX* module)
	{
		fixed (VkCuModuleCreateInfoNVX* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, VkCuModuleNVX*, VkResult>)vkCreateCuModuleNVX_ptr.Value)(device, createInfoPtr, allocator, module);
		}
	}

	public VkResult vkCreateCuFunctionNVX(VkDevice device, VkCuFunctionCreateInfoNVX* createInfo, VkCuFunctionNVX* function)
	{
		return ((delegate* unmanaged<VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, VkCuFunctionNVX*, VkResult>)vkCreateCuFunctionNVX_ptr.Value)(device, createInfo, default, function);
	}

	public VkResult vkCreateCuFunctionNVX(VkDevice device, VkCuFunctionCreateInfoNVX* createInfo, VkAllocationCallbacks* allocator, VkCuFunctionNVX* function)
	{
		return ((delegate* unmanaged<VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, VkCuFunctionNVX*, VkResult>)vkCreateCuFunctionNVX_ptr.Value)(device, createInfo, allocator, function);
	}

	public VkResult vkCreateCuFunctionNVX(VkDevice device, in VkCuFunctionCreateInfoNVX createInfo, VkCuFunctionNVX* function)
	{
		fixed (VkCuFunctionCreateInfoNVX* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, VkCuFunctionNVX*, VkResult>)vkCreateCuFunctionNVX_ptr.Value)(device, createInfoPtr, default, function);
		}
	}

	public VkResult vkCreateCuFunctionNVX(VkDevice device, in VkCuFunctionCreateInfoNVX createInfo, VkAllocationCallbacks* allocator, VkCuFunctionNVX* function)
	{
		fixed (VkCuFunctionCreateInfoNVX* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, VkCuFunctionNVX*, VkResult>)vkCreateCuFunctionNVX_ptr.Value)(device, createInfoPtr, allocator, function);
		}
	}

	public void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module)
	{
		((delegate* unmanaged<VkDevice, VkCuModuleNVX, VkAllocationCallbacks*, void>)vkDestroyCuModuleNVX_ptr.Value)(device, module, default);
	}

	public void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkCuModuleNVX, VkAllocationCallbacks*, void>)vkDestroyCuModuleNVX_ptr.Value)(device, module, allocator);
	}

	public void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function)
	{
		((delegate* unmanaged<VkDevice, VkCuFunctionNVX, VkAllocationCallbacks*, void>)vkDestroyCuFunctionNVX_ptr.Value)(device, function, default);
	}

	public void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkCuFunctionNVX, VkAllocationCallbacks*, void>)vkDestroyCuFunctionNVX_ptr.Value)(device, function, allocator);
	}

	public void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, VkCuLaunchInfoNVX* launchInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCuLaunchInfoNVX*, void>)vkCmdCuLaunchKernelNVX_ptr.Value)(commandBuffer, launchInfo);
	}

	public uint vkGetImageViewHandleNVX(VkDevice device, VkImageViewHandleInfoNVX* info)
	{
		return ((delegate* unmanaged<VkDevice, VkImageViewHandleInfoNVX*, uint>)vkGetImageViewHandleNVX_ptr.Value)(device, info);
	}

	public ulong vkGetImageViewHandle64NVX(VkDevice device, VkImageViewHandleInfoNVX* info)
	{
		return ((delegate* unmanaged<VkDevice, VkImageViewHandleInfoNVX*, ulong>)vkGetImageViewHandle64NVX_ptr.Value)(device, info);
	}

	public VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* properties)
	{
		return ((delegate* unmanaged<VkDevice, VkImageView, VkImageViewAddressPropertiesNVX*, VkResult>)vkGetImageViewAddressNVX_ptr.Value)(device, imageView, properties);
	}

	public void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndirectCountAMD_ptr.Value)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	public void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)vkCmdDrawIndexedIndirectCountAMD_ptr.Value)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	public VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, ulong* infoSize, void* info)
	{
		return ((delegate* unmanaged<VkDevice, VkPipeline, VkShaderStageFlags, VkShaderInfoTypeAMD, ulong*, void*, VkResult>)vkGetShaderInfoAMD_ptr.Value)(device, pipeline, shaderStage, infoType, infoSize, info);
	}

	public void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* conditionalRenderingBegin)
	{
		((delegate* unmanaged<VkCommandBuffer, VkConditionalRenderingBeginInfoEXT*, void>)vkCmdBeginConditionalRenderingEXT_ptr.Value)(commandBuffer, conditionalRenderingBegin);
	}

	public void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
	{
		((delegate* unmanaged<VkCommandBuffer, void>)vkCmdEndConditionalRenderingEXT_ptr.Value)(commandBuffer);
	}

	public void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScalingNV* viewportWScalings)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewportWScalingNV*, void>)vkCmdSetViewportWScalingNV_ptr.Value)(commandBuffer, firstViewport, viewportCount, viewportWScalings);
	}

	public VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* displayPowerInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*, VkResult>)vkDisplayPowerControlEXT_ptr.Value)(device, display, displayPowerInfo);
	}

	public VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, VkFence* fence)
	{
		return ((delegate* unmanaged<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)vkRegisterDeviceEventEXT_ptr.Value)(device, deviceEventInfo, default, fence);
	}

	public VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, VkAllocationCallbacks* allocator, VkFence* fence)
	{
		return ((delegate* unmanaged<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)vkRegisterDeviceEventEXT_ptr.Value)(device, deviceEventInfo, allocator, fence);
	}

	public VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, VkFence* fence)
	{
		return ((delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)vkRegisterDisplayEventEXT_ptr.Value)(device, display, displayEventInfo, default, fence);
	}

	public VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, VkAllocationCallbacks* allocator, VkFence* fence)
	{
		return ((delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)vkRegisterDisplayEventEXT_ptr.Value)(device, display, displayEventInfo, allocator, fence);
	}

	public VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagsEXT counter, ulong* counterValue)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagsEXT, ulong*, VkResult>)vkGetSwapchainCounterEXT_ptr.Value)(device, swapchain, counter, counterValue);
	}

	public VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* displayTimingProperties)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkRefreshCycleDurationGOOGLE*, VkResult>)vkGetRefreshCycleDurationGOOGLE_ptr.Value)(device, swapchain, displayTimingProperties);
	}

	public VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint* presentationTimingCount, VkPastPresentationTimingGOOGLE* presentationTimings)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, uint*, VkPastPresentationTimingGOOGLE*, VkResult>)vkGetPastPresentationTimingGOOGLE_ptr.Value)(device, swapchain, presentationTimingCount, presentationTimings);
	}

	public void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D* discardRectangles)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)vkCmdSetDiscardRectangleEXT_ptr.Value)(commandBuffer, firstDiscardRectangle, discardRectangleCount, discardRectangles);
	}

	public void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDiscardRectangleEnableEXT_ptr.Value)(commandBuffer, discardRectangleEnable);
	}

	public void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDiscardRectangleModeEXT, void>)vkCmdSetDiscardRectangleModeEXT_ptr.Value)(commandBuffer, discardRectangleMode);
	}

	public void vkSetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchainKHR* swapchains, VkHdrMetadataEXT* metadata)
	{
		((delegate* unmanaged<VkDevice, uint, VkSwapchainKHR*, VkHdrMetadataEXT*, void>)vkSetHdrMetadataEXT_ptr.Value)(device, swapchainCount, swapchains, metadata);
	}

	public void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* sampleLocationsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSampleLocationsInfoEXT*, void>)vkCmdSetSampleLocationsEXT_ptr.Value)(commandBuffer, sampleLocationsInfo);
	}

	public VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* properties)
	{
		return ((delegate* unmanaged<VkDevice, VkImage, VkImageDrmFormatModifierPropertiesEXT*, VkResult>)vkGetImageDrmFormatModifierPropertiesEXT_ptr.Value)(device, image, properties);
	}

	public VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* createInfo, VkValidationCacheEXT* validationCache)
	{
		return ((delegate* unmanaged<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VkValidationCacheEXT*, VkResult>)vkCreateValidationCacheEXT_ptr.Value)(device, createInfo, default, validationCache);
	}

	public VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkValidationCacheEXT* validationCache)
	{
		return ((delegate* unmanaged<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VkValidationCacheEXT*, VkResult>)vkCreateValidationCacheEXT_ptr.Value)(device, createInfo, allocator, validationCache);
	}

	public VkResult vkCreateValidationCacheEXT(VkDevice device, in VkValidationCacheCreateInfoEXT createInfo, VkValidationCacheEXT* validationCache)
	{
		fixed (VkValidationCacheCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VkValidationCacheEXT*, VkResult>)vkCreateValidationCacheEXT_ptr.Value)(device, createInfoPtr, default, validationCache);
		}
	}

	public VkResult vkCreateValidationCacheEXT(VkDevice device, in VkValidationCacheCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, VkValidationCacheEXT* validationCache)
	{
		fixed (VkValidationCacheCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VkValidationCacheEXT*, VkResult>)vkCreateValidationCacheEXT_ptr.Value)(device, createInfoPtr, allocator, validationCache);
		}
	}

	public void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache)
	{
		((delegate* unmanaged<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void>)vkDestroyValidationCacheEXT_ptr.Value)(device, validationCache, default);
	}

	public void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void>)vkDestroyValidationCacheEXT_ptr.Value)(device, validationCache, allocator);
	}

	public VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint srcCacheCount, VkValidationCacheEXT* srcCaches)
	{
		return ((delegate* unmanaged<VkDevice, VkValidationCacheEXT, uint, VkValidationCacheEXT*, VkResult>)vkMergeValidationCachesEXT_ptr.Value)(device, dstCache, srcCacheCount, srcCaches);
	}

	public VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, ulong* dataSize, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkValidationCacheEXT, ulong*, void*, VkResult>)vkGetValidationCacheDataEXT_ptr.Value)(device, validationCache, dataSize, data);
	}

	public void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImageView, VkImageLayout, void>)vkCmdBindShadingRateImageNV_ptr.Value)(commandBuffer, imageView, imageLayout);
	}

	public void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePaletteNV* shadingRatePalettes)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkShadingRatePaletteNV*, void>)vkCmdSetViewportShadingRatePaletteNV_ptr.Value)(commandBuffer, firstViewport, viewportCount, shadingRatePalettes);
	}

	public void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustomNV* customSampleOrders)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV*, void>)vkCmdSetCoarseSampleOrderNV_ptr.Value)(commandBuffer, sampleOrderType, customSampleOrderCount, customSampleOrders);
	}

	public VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV* createInfo, VkAccelerationStructureKHR* accelerationStructure)
	{
		return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)vkCreateAccelerationStructureNV_ptr.Value)(device, createInfo, default, accelerationStructure);
	}

	public VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, VkAccelerationStructureKHR* accelerationStructure)
	{
		return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)vkCreateAccelerationStructureNV_ptr.Value)(device, createInfo, allocator, accelerationStructure);
	}

	public VkResult vkCreateAccelerationStructureNV(VkDevice device, in VkAccelerationStructureCreateInfoNV createInfo, VkAccelerationStructureKHR* accelerationStructure)
	{
		fixed (VkAccelerationStructureCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)vkCreateAccelerationStructureNV_ptr.Value)(device, createInfoPtr, default, accelerationStructure);
		}
	}

	public VkResult vkCreateAccelerationStructureNV(VkDevice device, in VkAccelerationStructureCreateInfoNV createInfo, VkAllocationCallbacks* allocator, VkAccelerationStructureKHR* accelerationStructure)
	{
		fixed (VkAccelerationStructureCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)vkCreateAccelerationStructureNV_ptr.Value)(device, createInfoPtr, allocator, accelerationStructure);
		}
	}

	public void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureKHR accelerationStructure)
	{
		((delegate* unmanaged<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void>)vkDestroyAccelerationStructureNV_ptr.Value)(device, accelerationStructure, default);
	}

	public void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void>)vkDestroyAccelerationStructureNV_ptr.Value)(device, accelerationStructure, allocator);
	}

	public void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkAccelerationStructureMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void>)vkGetAccelerationStructureMemoryRequirementsNV_ptr.Value)(device, info, memoryRequirements);
	}

	public VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* bindInfos)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkBindAccelerationStructureMemoryInfoNV*, VkResult>)vkBindAccelerationStructureMemoryNV_ptr.Value)(device, bindInfoCount, bindInfos);
	}

	public void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* info, VkBuffer instanceData, ulong instanceOffset, VkBool32 update, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src, VkBuffer scratch, ulong scratchOffset)
	{
		((delegate* unmanaged<VkCommandBuffer, VkAccelerationStructureInfoNV*, VkBuffer, ulong, VkBool32, VkAccelerationStructureKHR, VkAccelerationStructureKHR, VkBuffer, ulong, void>)vkCmdBuildAccelerationStructureNV_ptr.Value)(commandBuffer, info, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	}

	public void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src, VkCopyAccelerationStructureModeKHR mode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkAccelerationStructureKHR, VkAccelerationStructureKHR, VkCopyAccelerationStructureModeKHR, void>)vkCmdCopyAccelerationStructureNV_ptr.Value)(commandBuffer, dst, src, mode);
	}

	public void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, ulong raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, ulong missShaderBindingOffset, ulong missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, ulong hitShaderBindingOffset, ulong hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, ulong callableShaderBindingOffset, ulong callableShaderBindingStride, uint width, uint height, uint depth)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, ulong, VkBuffer, ulong, ulong, VkBuffer, ulong, ulong, uint, uint, uint, void>)vkCmdTraceRaysNV_ptr.Value)(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	}

	public VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoNV* createInfos, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateRayTracingPipelinesNV_ptr.Value)(device, pipelineCache, createInfoCount, createInfos, default, pipelines);
	}

	public VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoNV* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateRayTracingPipelinesNV_ptr.Value)(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines);
	}

	public VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, in VkRayTracingPipelineCreateInfoNV createInfos, VkPipeline* pipelines)
	{
		fixed (VkRayTracingPipelineCreateInfoNV* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateRayTracingPipelinesNV_ptr.Value)(device, pipelineCache, createInfoCount, createInfoPtr, default, pipelines);
		}
	}

	public VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, in VkRayTracingPipelineCreateInfoNV createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		fixed (VkRayTracingPipelineCreateInfoNV* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateRayTracingPipelinesNV_ptr.Value)(device, pipelineCache, createInfoCount, createInfoPtr, allocator, pipelines);
		}
	}

	public VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkPipeline, uint, uint, ulong, void*, VkResult>)vkGetRayTracingShaderGroupHandlesKHR_ptr.Value)(device, pipeline, firstGroup, groupCount, dataSize, data);
	}

	public VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkPipeline, uint, uint, ulong, void*, VkResult>)vkGetRayTracingShaderGroupHandlesNV_ptr.Value)(device, pipeline, firstGroup, groupCount, dataSize, data);
	}

	public VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureKHR accelerationStructure, ulong dataSize, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkAccelerationStructureKHR, ulong, void*, VkResult>)vkGetAccelerationStructureHandleNV_ptr.Value)(device, accelerationStructure, dataSize, data);
	}

	public void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructureKHR* accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureKHR*, VkQueryType, VkQueryPool, uint, void>)vkCmdWriteAccelerationStructuresPropertiesNV_ptr.Value)(commandBuffer, accelerationStructureCount, accelerationStructures, queryType, queryPool, firstQuery);
	}

	public VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint shader)
	{
		return ((delegate* unmanaged<VkDevice, VkPipeline, uint, VkResult>)vkCompileDeferredNV_ptr.Value)(device, pipeline, shader);
	}

	public VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, void* hostPointer, VkMemoryHostPointerPropertiesEXT* memoryHostPointerProperties)
	{
		return ((delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlags, void*, VkMemoryHostPointerPropertiesEXT*, VkResult>)vkGetMemoryHostPointerPropertiesEXT_ptr.Value)(device, handleType, hostPointer, memoryHostPointerProperties);
	}

	public void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkBuffer dstBuffer, ulong dstOffset, uint marker)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags, VkBuffer, ulong, uint, void>)vkCmdWriteBufferMarkerAMD_ptr.Value)(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
	}

	public void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, ulong dstOffset, uint marker)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, ulong, uint, void>)vkCmdWriteBufferMarker2AMD_ptr.Value)(commandBuffer, stage, dstBuffer, dstOffset, marker);
	}

	public VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfoKHR* timestampInfos, ulong* timestamps, ulong* maxDeviation)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkCalibratedTimestampInfoKHR*, ulong*, ulong*, VkResult>)vkGetCalibratedTimestampsEXT_ptr.Value)(device, timestampCount, timestampInfos, timestamps, maxDeviation);
	}

	public void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint taskCount, uint firstTask)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, void>)vkCmdDrawMeshTasksNV_ptr.Value)(commandBuffer, taskCount, firstTask);
	}

	public void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, uint, uint, void>)vkCmdDrawMeshTasksIndirectNV_ptr.Value)(commandBuffer, buffer, offset, drawCount, stride);
	}

	public void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)vkCmdDrawMeshTasksIndirectCountNV_ptr.Value)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	public void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkBool32* exclusiveScissorEnables)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBool32*, void>)vkCmdSetExclusiveScissorEnableNV_ptr.Value)(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, exclusiveScissorEnables);
	}

	public void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D* exclusiveScissors)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)vkCmdSetExclusiveScissorNV_ptr.Value)(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, exclusiveScissors);
	}

	public void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, void* checkpointMarker)
	{
		((delegate* unmanaged<VkCommandBuffer, void*, void>)vkCmdSetCheckpointNV_ptr.Value)(commandBuffer, checkpointMarker);
	}

	public void vkGetQueueCheckpointDataNV(VkQueue queue, uint* checkpointDataCount, VkCheckpointDataNV* checkpointData)
	{
		((delegate* unmanaged<VkQueue, uint*, VkCheckpointDataNV*, void>)vkGetQueueCheckpointDataNV_ptr.Value)(queue, checkpointDataCount, checkpointData);
	}

	public void vkGetQueueCheckpointData2NV(VkQueue queue, uint* checkpointDataCount, VkCheckpointData2NV* checkpointData)
	{
		((delegate* unmanaged<VkQueue, uint*, VkCheckpointData2NV*, void>)vkGetQueueCheckpointData2NV_ptr.Value)(queue, checkpointDataCount, checkpointData);
	}

	public VkResult vkInitializePerformanceApiINTEL(VkDevice device, VkInitializePerformanceApiInfoINTEL* initializeInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkInitializePerformanceApiInfoINTEL*, VkResult>)vkInitializePerformanceApiINTEL_ptr.Value)(device, initializeInfo);
	}

	public void vkUninitializePerformanceApiINTEL(VkDevice device)
	{
		((delegate* unmanaged<VkDevice, void>)vkUninitializePerformanceApiINTEL_ptr.Value)(device);
	}

	public VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* markerInfo)
	{
		return ((delegate* unmanaged<VkCommandBuffer, VkPerformanceMarkerInfoINTEL*, VkResult>)vkCmdSetPerformanceMarkerINTEL_ptr.Value)(commandBuffer, markerInfo);
	}

	public VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* markerInfo)
	{
		return ((delegate* unmanaged<VkCommandBuffer, VkPerformanceStreamMarkerInfoINTEL*, VkResult>)vkCmdSetPerformanceStreamMarkerINTEL_ptr.Value)(commandBuffer, markerInfo);
	}

	public VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* overrideInfo)
	{
		return ((delegate* unmanaged<VkCommandBuffer, VkPerformanceOverrideInfoINTEL*, VkResult>)vkCmdSetPerformanceOverrideINTEL_ptr.Value)(commandBuffer, overrideInfo);
	}

	public VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* acquireInfo, VkPerformanceConfigurationINTEL* configuration)
	{
		return ((delegate* unmanaged<VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, VkPerformanceConfigurationINTEL*, VkResult>)vkAcquirePerformanceConfigurationINTEL_ptr.Value)(device, acquireInfo, configuration);
	}

	public VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)
	{
		return ((delegate* unmanaged<VkDevice, VkPerformanceConfigurationINTEL, VkResult>)vkReleasePerformanceConfigurationINTEL_ptr.Value)(device, configuration);
	}

	public VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)
	{
		return ((delegate* unmanaged<VkQueue, VkPerformanceConfigurationINTEL, VkResult>)vkQueueSetPerformanceConfigurationINTEL_ptr.Value)(queue, configuration);
	}

	public VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* value)
	{
		return ((delegate* unmanaged<VkDevice, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL*, VkResult>)vkGetPerformanceParameterINTEL_ptr.Value)(device, parameter, value);
	}

	public void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)
	{
		((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkBool32, void>)vkSetLocalDimmingAMD_ptr.Value)(device, swapChain, localDimmingEnable);
	}

	public ulong vkGetBufferDeviceAddressEXT(VkDevice device, VkBufferDeviceAddressInfo* info)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong>)vkGetBufferDeviceAddressEXT_ptr.Value)(device, info);
	}

	public void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, ushort, void>)vkCmdSetLineStippleEXT_ptr.Value)(commandBuffer, lineStippleFactor, lineStipplePattern);
	}

	public void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount)
	{
		((delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, void>)vkResetQueryPoolEXT_ptr.Value)(device, queryPool, firstQuery, queryCount);
	}

	public void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCullModeFlags, void>)vkCmdSetCullModeEXT_ptr.Value)(commandBuffer, cullMode);
	}

	public void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
	{
		((delegate* unmanaged<VkCommandBuffer, VkFrontFace, void>)vkCmdSetFrontFaceEXT_ptr.Value)(commandBuffer, frontFace);
	}

	public void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPrimitiveTopology, void>)vkCmdSetPrimitiveTopologyEXT_ptr.Value)(commandBuffer, primitiveTopology);
	}

	public void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport* viewports)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkViewport*, void>)vkCmdSetViewportWithCountEXT_ptr.Value)(commandBuffer, viewportCount, viewports);
	}

	public void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D* scissors)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkRect2D*, void>)vkCmdSetScissorWithCountEXT_ptr.Value)(commandBuffer, scissorCount, scissors);
	}

	public void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ulong* offsets, ulong* sizes, ulong* strides)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, ulong*, ulong*, ulong*, void>)vkCmdBindVertexBuffers2EXT_ptr.Value)(commandBuffer, firstBinding, bindingCount, buffers, offsets, sizes, strides);
	}

	public void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthTestEnableEXT_ptr.Value)(commandBuffer, depthTestEnable);
	}

	public void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthWriteEnableEXT_ptr.Value)(commandBuffer, depthWriteEnable);
	}

	public void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCompareOp, void>)vkCmdSetDepthCompareOpEXT_ptr.Value)(commandBuffer, depthCompareOp);
	}

	public void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthBoundsTestEnableEXT_ptr.Value)(commandBuffer, depthBoundsTestEnable);
	}

	public void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetStencilTestEnableEXT_ptr.Value)(commandBuffer, stencilTestEnable);
	}

	public void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
	{
		((delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)vkCmdSetStencilOpEXT_ptr.Value)(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	}

	public VkResult vkCopyMemoryToImageEXT(VkDevice device, VkCopyMemoryToImageInfo* copyMemoryToImageInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkCopyMemoryToImageInfo*, VkResult>)vkCopyMemoryToImageEXT_ptr.Value)(device, copyMemoryToImageInfo);
	}

	public VkResult vkCopyImageToMemoryEXT(VkDevice device, VkCopyImageToMemoryInfo* copyImageToMemoryInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkCopyImageToMemoryInfo*, VkResult>)vkCopyImageToMemoryEXT_ptr.Value)(device, copyImageToMemoryInfo);
	}

	public VkResult vkCopyImageToImageEXT(VkDevice device, VkCopyImageToImageInfo* copyImageToImageInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkCopyImageToImageInfo*, VkResult>)vkCopyImageToImageEXT_ptr.Value)(device, copyImageToImageInfo);
	}

	public VkResult vkTransitionImageLayoutEXT(VkDevice device, uint transitionCount, VkHostImageLayoutTransitionInfo* transitions)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkHostImageLayoutTransitionInfo*, VkResult>)vkTransitionImageLayoutEXT_ptr.Value)(device, transitionCount, transitions);
	}

	public void vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, VkImageSubresource2* subresource, VkSubresourceLayout2* layout)
	{
		((delegate* unmanaged<VkDevice, VkImage, VkImageSubresource2*, VkSubresourceLayout2*, void>)vkGetImageSubresourceLayout2EXT_ptr.Value)(device, image, subresource, layout);
	}

	public VkResult vkReleaseSwapchainImagesEXT(VkDevice device, VkReleaseSwapchainImagesInfoKHR* releaseInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkReleaseSwapchainImagesInfoKHR*, VkResult>)vkReleaseSwapchainImagesEXT_ptr.Value)(device, releaseInfo);
	}

	public void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoNV* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkGeneratedCommandsMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void>)vkGetGeneratedCommandsMemoryRequirementsNV_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoNV* generatedCommandsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkGeneratedCommandsInfoNV*, void>)vkCmdPreprocessGeneratedCommandsNV_ptr.Value)(commandBuffer, generatedCommandsInfo);
	}

	public void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* generatedCommandsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoNV*, void>)vkCmdExecuteGeneratedCommandsNV_ptr.Value)(commandBuffer, isPreprocessed, generatedCommandsInfo);
	}

	public void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint groupIndex)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint, void>)vkCmdBindPipelineShaderGroupNV_ptr.Value)(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
	}

	public VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* createInfo, VkIndirectCommandsLayoutNV* indirectCommandsLayout)
	{
		return ((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VkIndirectCommandsLayoutNV*, VkResult>)vkCreateIndirectCommandsLayoutNV_ptr.Value)(device, createInfo, default, indirectCommandsLayout);
	}

	public VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, VkIndirectCommandsLayoutNV* indirectCommandsLayout)
	{
		return ((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VkIndirectCommandsLayoutNV*, VkResult>)vkCreateIndirectCommandsLayoutNV_ptr.Value)(device, createInfo, allocator, indirectCommandsLayout);
	}

	public VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, in VkIndirectCommandsLayoutCreateInfoNV createInfo, VkIndirectCommandsLayoutNV* indirectCommandsLayout)
	{
		fixed (VkIndirectCommandsLayoutCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VkIndirectCommandsLayoutNV*, VkResult>)vkCreateIndirectCommandsLayoutNV_ptr.Value)(device, createInfoPtr, default, indirectCommandsLayout);
		}
	}

	public VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, in VkIndirectCommandsLayoutCreateInfoNV createInfo, VkAllocationCallbacks* allocator, VkIndirectCommandsLayoutNV* indirectCommandsLayout)
	{
		fixed (VkIndirectCommandsLayoutCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VkIndirectCommandsLayoutNV*, VkResult>)vkCreateIndirectCommandsLayoutNV_ptr.Value)(device, createInfoPtr, allocator, indirectCommandsLayout);
		}
	}

	public void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout)
	{
		((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutNV, VkAllocationCallbacks*, void>)vkDestroyIndirectCommandsLayoutNV_ptr.Value)(device, indirectCommandsLayout, default);
	}

	public void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutNV, VkAllocationCallbacks*, void>)vkDestroyIndirectCommandsLayoutNV_ptr.Value)(device, indirectCommandsLayout, allocator);
	}

	public void vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, VkDepthBiasInfoEXT* depthBiasInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDepthBiasInfoEXT*, void>)vkCmdSetDepthBias2EXT_ptr.Value)(commandBuffer, depthBiasInfo);
	}

	public VkResult vkCreatePrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotCreateInfo* createInfo, VkPrivateDataSlot* privateDataSlot)
	{
		return ((delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)vkCreatePrivateDataSlotEXT_ptr.Value)(device, createInfo, default, privateDataSlot);
	}

	public VkResult vkCreatePrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkPrivateDataSlot* privateDataSlot)
	{
		return ((delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)vkCreatePrivateDataSlotEXT_ptr.Value)(device, createInfo, allocator, privateDataSlot);
	}

	public VkResult vkCreatePrivateDataSlotEXT(VkDevice device, in VkPrivateDataSlotCreateInfo createInfo, VkPrivateDataSlot* privateDataSlot)
	{
		fixed (VkPrivateDataSlotCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)vkCreatePrivateDataSlotEXT_ptr.Value)(device, createInfoPtr, default, privateDataSlot);
		}
	}

	public VkResult vkCreatePrivateDataSlotEXT(VkDevice device, in VkPrivateDataSlotCreateInfo createInfo, VkAllocationCallbacks* allocator, VkPrivateDataSlot* privateDataSlot)
	{
		fixed (VkPrivateDataSlotCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)vkCreatePrivateDataSlotEXT_ptr.Value)(device, createInfoPtr, allocator, privateDataSlot);
		}
	}

	public void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot)
	{
		((delegate* unmanaged<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)vkDestroyPrivateDataSlotEXT_ptr.Value)(device, privateDataSlot, default);
	}

	public void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)vkDestroyPrivateDataSlotEXT_ptr.Value)(device, privateDataSlot, allocator);
	}

	public VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data)
	{
		return ((delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult>)vkSetPrivateDataEXT_ptr.Value)(device, objectType, objectHandle, privateDataSlot, data);
	}

	public void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong* data)
	{
		((delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong*, void>)vkGetPrivateDataEXT_ptr.Value)(device, objectType, objectHandle, privateDataSlot, data);
	}

	public void vkCmdDispatchTileQCOM(VkCommandBuffer commandBuffer, VkDispatchTileInfoQCOM* dispatchTileInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDispatchTileInfoQCOM*, void>)vkCmdDispatchTileQCOM_ptr.Value)(commandBuffer, dispatchTileInfo);
	}

	public void vkCmdBeginPerTileExecutionQCOM(VkCommandBuffer commandBuffer, VkPerTileBeginInfoQCOM* perTileBeginInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPerTileBeginInfoQCOM*, void>)vkCmdBeginPerTileExecutionQCOM_ptr.Value)(commandBuffer, perTileBeginInfo);
	}

	public void vkCmdEndPerTileExecutionQCOM(VkCommandBuffer commandBuffer, VkPerTileEndInfoQCOM* perTileEndInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPerTileEndInfoQCOM*, void>)vkCmdEndPerTileExecutionQCOM_ptr.Value)(commandBuffer, perTileEndInfo);
	}

	public void vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, ulong* layoutSizeInBytes)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSetLayout, ulong*, void>)vkGetDescriptorSetLayoutSizeEXT_ptr.Value)(device, layout, layoutSizeInBytes);
	}

	public void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint binding, ulong* offset)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSetLayout, uint, ulong*, void>)vkGetDescriptorSetLayoutBindingOffsetEXT_ptr.Value)(device, layout, binding, offset);
	}

	public void vkGetDescriptorEXT(VkDevice device, VkDescriptorGetInfoEXT* descriptorInfo, ulong dataSize, void* descriptor)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorGetInfoEXT*, ulong, void*, void>)vkGetDescriptorEXT_ptr.Value)(device, descriptorInfo, dataSize, descriptor);
	}

	public void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint bufferCount, VkDescriptorBufferBindingInfoEXT* bindingInfos)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkDescriptorBufferBindingInfoEXT*, void>)vkCmdBindDescriptorBuffersEXT_ptr.Value)(commandBuffer, bufferCount, bindingInfos);
	}

	public void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint setCount, uint* bufferIndices, ulong* offsets)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, uint*, ulong*, void>)vkCmdSetDescriptorBufferOffsetsEXT_ptr.Value)(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, bufferIndices, offsets);
	}

	public void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, void>)vkCmdBindDescriptorBufferEmbeddedSamplersEXT_ptr.Value)(commandBuffer, pipelineBindPoint, layout, set);
	}

	public VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, VkBufferCaptureDescriptorDataInfoEXT* info, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkBufferCaptureDescriptorDataInfoEXT*, void*, VkResult>)vkGetBufferOpaqueCaptureDescriptorDataEXT_ptr.Value)(device, info, data);
	}

	public VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, VkImageCaptureDescriptorDataInfoEXT* info, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkImageCaptureDescriptorDataInfoEXT*, void*, VkResult>)vkGetImageOpaqueCaptureDescriptorDataEXT_ptr.Value)(device, info, data);
	}

	public VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, VkImageViewCaptureDescriptorDataInfoEXT* info, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkImageViewCaptureDescriptorDataInfoEXT*, void*, VkResult>)vkGetImageViewOpaqueCaptureDescriptorDataEXT_ptr.Value)(device, info, data);
	}

	public VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, VkSamplerCaptureDescriptorDataInfoEXT* info, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkSamplerCaptureDescriptorDataInfoEXT*, void*, VkResult>)vkGetSamplerOpaqueCaptureDescriptorDataEXT_ptr.Value)(device, info, data);
	}

	public VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, VkAccelerationStructureCaptureDescriptorDataInfoEXT* info, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCaptureDescriptorDataInfoEXT*, void*, VkResult>)vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT_ptr.Value)(device, info, data);
	}

	public void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, VkFragmentShadingRateCombinerOpKHR* combinerOps)
	{
		((delegate* unmanaged<VkCommandBuffer, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR*, void>)vkCmdSetFragmentShadingRateEnumNV_ptr.Value)(commandBuffer, shadingRate, combinerOps);
	}

	public VkResult vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT* faultCounts, VkDeviceFaultInfoEXT* faultInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkDeviceFaultCountsEXT*, VkDeviceFaultInfoEXT*, VkResult>)vkGetDeviceFaultInfoEXT_ptr.Value)(device, faultCounts, faultInfo);
	}

	public void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT* vertexBindingDescriptions, uint vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT* vertexAttributeDescriptions)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkVertexInputBindingDescription2EXT*, uint, VkVertexInputAttributeDescription2EXT*, void>)vkCmdSetVertexInputEXT_ptr.Value)(commandBuffer, vertexBindingDescriptionCount, vertexBindingDescriptions, vertexAttributeDescriptionCount, vertexAttributeDescriptions);
	}

	public VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D* maxWorkgroupSize)
	{
		return ((delegate* unmanaged<VkDevice, VkRenderPass, VkExtent2D*, VkResult>)vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI_ptr.Value)(device, renderpass, maxWorkgroupSize);
	}

	public void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer)
	{
		((delegate* unmanaged<VkCommandBuffer, void>)vkCmdSubpassShadingHUAWEI_ptr.Value)(commandBuffer);
	}

	public void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImageView, VkImageLayout, void>)vkCmdBindInvocationMaskHUAWEI_ptr.Value)(commandBuffer, imageView, imageLayout);
	}

	public VkResult vkGetMemoryRemoteAddressNV(VkDevice device, VkMemoryGetRemoteAddressInfoNV* memoryGetRemoteAddressInfo, VkRemoteAddressNV* address)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryGetRemoteAddressInfoNV*, VkRemoteAddressNV*, VkResult>)vkGetMemoryRemoteAddressNV_ptr.Value)(device, memoryGetRemoteAddressInfo, address);
	}

	public VkResult vkGetPipelinePropertiesEXT(VkDevice device, VkPipelineInfoKHR* pipelineInfo, VkBaseOutStructure* pipelineProperties)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineInfoKHR*, VkBaseOutStructure*, VkResult>)vkGetPipelinePropertiesEXT_ptr.Value)(device, pipelineInfo, pipelineProperties);
	}

	public void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint patchControlPoints)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, void>)vkCmdSetPatchControlPointsEXT_ptr.Value)(commandBuffer, patchControlPoints);
	}

	public void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetRasterizerDiscardEnableEXT_ptr.Value)(commandBuffer, rasterizerDiscardEnable);
	}

	public void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthBiasEnableEXT_ptr.Value)(commandBuffer, depthBiasEnable);
	}

	public void vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
	{
		((delegate* unmanaged<VkCommandBuffer, VkLogicOp, void>)vkCmdSetLogicOpEXT_ptr.Value)(commandBuffer, logicOp);
	}

	public void vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetPrimitiveRestartEnableEXT_ptr.Value)(commandBuffer, primitiveRestartEnable);
	}

	public void vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint attachmentCount, VkBool32* colorWriteEnables)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkBool32*, void>)vkCmdSetColorWriteEnableEXT_ptr.Value)(commandBuffer, attachmentCount, colorWriteEnables);
	}

	public void vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint drawCount, VkMultiDrawInfoEXT* vertexInfo, uint instanceCount, uint firstInstance, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkMultiDrawInfoEXT*, uint, uint, uint, void>)vkCmdDrawMultiEXT_ptr.Value)(commandBuffer, drawCount, vertexInfo, instanceCount, firstInstance, stride);
	}

	public void vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint drawCount, VkMultiDrawIndexedInfoEXT* indexInfo, uint instanceCount, uint firstInstance, uint stride, int* vertexOffset)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void>)vkCmdDrawMultiIndexedEXT_ptr.Value)(commandBuffer, drawCount, indexInfo, instanceCount, firstInstance, stride, vertexOffset);
	}

	public VkResult vkCreateMicromapEXT(VkDevice device, VkMicromapCreateInfoEXT* createInfo, VkMicromapEXT* micromap)
	{
		return ((delegate* unmanaged<VkDevice, VkMicromapCreateInfoEXT*, VkAllocationCallbacks*, VkMicromapEXT*, VkResult>)vkCreateMicromapEXT_ptr.Value)(device, createInfo, default, micromap);
	}

	public VkResult vkCreateMicromapEXT(VkDevice device, VkMicromapCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkMicromapEXT* micromap)
	{
		return ((delegate* unmanaged<VkDevice, VkMicromapCreateInfoEXT*, VkAllocationCallbacks*, VkMicromapEXT*, VkResult>)vkCreateMicromapEXT_ptr.Value)(device, createInfo, allocator, micromap);
	}

	public VkResult vkCreateMicromapEXT(VkDevice device, in VkMicromapCreateInfoEXT createInfo, VkMicromapEXT* micromap)
	{
		fixed (VkMicromapCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkMicromapCreateInfoEXT*, VkAllocationCallbacks*, VkMicromapEXT*, VkResult>)vkCreateMicromapEXT_ptr.Value)(device, createInfoPtr, default, micromap);
		}
	}

	public VkResult vkCreateMicromapEXT(VkDevice device, in VkMicromapCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, VkMicromapEXT* micromap)
	{
		fixed (VkMicromapCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkMicromapCreateInfoEXT*, VkAllocationCallbacks*, VkMicromapEXT*, VkResult>)vkCreateMicromapEXT_ptr.Value)(device, createInfoPtr, allocator, micromap);
		}
	}

	public void vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap)
	{
		((delegate* unmanaged<VkDevice, VkMicromapEXT, VkAllocationCallbacks*, void>)vkDestroyMicromapEXT_ptr.Value)(device, micromap, default);
	}

	public void vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkMicromapEXT, VkAllocationCallbacks*, void>)vkDestroyMicromapEXT_ptr.Value)(device, micromap, allocator);
	}

	public void vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint infoCount, VkMicromapBuildInfoEXT* infos)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkMicromapBuildInfoEXT*, void>)vkCmdBuildMicromapsEXT_ptr.Value)(commandBuffer, infoCount, infos);
	}

	public VkResult vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint infoCount, VkMicromapBuildInfoEXT* infos)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint, VkMicromapBuildInfoEXT*, VkResult>)vkBuildMicromapsEXT_ptr.Value)(device, deferredOperation, infoCount, infos);
	}

	public VkResult vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapInfoEXT* info)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyMicromapInfoEXT*, VkResult>)vkCopyMicromapEXT_ptr.Value)(device, deferredOperation, info);
	}

	public VkResult vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMicromapToMemoryInfoEXT* info)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyMicromapToMemoryInfoEXT*, VkResult>)vkCopyMicromapToMemoryEXT_ptr.Value)(device, deferredOperation, info);
	}

	public VkResult vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToMicromapInfoEXT* info)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToMicromapInfoEXT*, VkResult>)vkCopyMemoryToMicromapEXT_ptr.Value)(device, deferredOperation, info);
	}

	public VkResult vkWriteMicromapsPropertiesEXT(VkDevice device, uint micromapCount, VkMicromapEXT* micromaps, VkQueryType queryType, ulong dataSize, void* data, ulong stride)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkMicromapEXT*, VkQueryType, ulong, void*, ulong, VkResult>)vkWriteMicromapsPropertiesEXT_ptr.Value)(device, micromapCount, micromaps, queryType, dataSize, data, stride);
	}

	public void vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, VkCopyMicromapInfoEXT* info)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyMicromapInfoEXT*, void>)vkCmdCopyMicromapEXT_ptr.Value)(commandBuffer, info);
	}

	public void vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, VkCopyMicromapToMemoryInfoEXT* info)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyMicromapToMemoryInfoEXT*, void>)vkCmdCopyMicromapToMemoryEXT_ptr.Value)(commandBuffer, info);
	}

	public void vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, VkCopyMemoryToMicromapInfoEXT* info)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyMemoryToMicromapInfoEXT*, void>)vkCmdCopyMemoryToMicromapEXT_ptr.Value)(commandBuffer, info);
	}

	public void vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint micromapCount, VkMicromapEXT* micromaps, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkMicromapEXT*, VkQueryType, VkQueryPool, uint, void>)vkCmdWriteMicromapsPropertiesEXT_ptr.Value)(commandBuffer, micromapCount, micromaps, queryType, queryPool, firstQuery);
	}

	public void vkGetDeviceMicromapCompatibilityEXT(VkDevice device, VkMicromapVersionInfoEXT* versionInfo, VkAccelerationStructureCompatibilityKHR* compatibility)
	{
		((delegate* unmanaged<VkDevice, VkMicromapVersionInfoEXT*, VkAccelerationStructureCompatibilityKHR*, void>)vkGetDeviceMicromapCompatibilityEXT_ptr.Value)(device, versionInfo, compatibility);
	}

	public void vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkMicromapBuildInfoEXT* buildInfo, VkMicromapBuildSizesInfoEXT* sizeInfo)
	{
		((delegate* unmanaged<VkDevice, VkAccelerationStructureBuildTypeKHR, VkMicromapBuildInfoEXT*, VkMicromapBuildSizesInfoEXT*, void>)vkGetMicromapBuildSizesEXT_ptr.Value)(device, buildType, buildInfo, sizeInfo);
	}

	public void vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, uint, void>)vkCmdDrawClusterHUAWEI_ptr.Value)(commandBuffer, groupCountX, groupCountY, groupCountZ);
	}

	public void vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, void>)vkCmdDrawClusterIndirectHUAWEI_ptr.Value)(commandBuffer, buffer, offset);
	}

	public void vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority)
	{
		((delegate* unmanaged<VkDevice, VkDeviceMemory, float, void>)vkSetDeviceMemoryPriorityEXT_ptr.Value)(device, memory, priority);
	}

	public void vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, VkDescriptorSetBindingReferenceVALVE* bindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* hostMapping)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSetBindingReferenceVALVE*, VkDescriptorSetLayoutHostMappingInfoVALVE*, void>)vkGetDescriptorSetLayoutHostMappingInfoVALVE_ptr.Value)(device, bindingReference, hostMapping);
	}

	public void vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void** data)
	{
		((delegate* unmanaged<VkDevice, VkDescriptorSet, void**, void>)vkGetDescriptorSetHostMappingVALVE_ptr.Value)(device, descriptorSet, data);
	}

	public void vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, ulong copyBufferAddress, uint copyCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, ulong, uint, uint, void>)vkCmdCopyMemoryIndirectNV_ptr.Value)(commandBuffer, copyBufferAddress, copyCount, stride);
	}

	public void vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, ulong copyBufferAddress, uint copyCount, uint stride, VkImage dstImage, VkImageLayout dstImageLayout, VkImageSubresourceLayers* imageSubresources)
	{
		((delegate* unmanaged<VkCommandBuffer, ulong, uint, uint, VkImage, VkImageLayout, VkImageSubresourceLayers*, void>)vkCmdCopyMemoryToImageIndirectNV_ptr.Value)(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, imageSubresources);
	}

	public void vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint decompressRegionCount, VkDecompressMemoryRegionNV* decompressMemoryRegions)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkDecompressMemoryRegionNV*, void>)vkCmdDecompressMemoryNV_ptr.Value)(commandBuffer, decompressRegionCount, decompressMemoryRegions);
	}

	public void vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, ulong indirectCommandsAddress, ulong indirectCommandsCountAddress, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, ulong, ulong, uint, void>)vkCmdDecompressMemoryIndirectCountNV_ptr.Value)(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
	}

	public void vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device, VkComputePipelineCreateInfo* createInfo, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkComputePipelineCreateInfo*, VkMemoryRequirements2*, void>)vkGetPipelineIndirectMemoryRequirementsNV_ptr.Value)(device, createInfo, memoryRequirements);
	}

	public void vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void>)vkCmdUpdatePipelineIndirectBufferNV_ptr.Value)(commandBuffer, pipelineBindPoint, pipeline);
	}

	public ulong vkGetPipelineIndirectDeviceAddressNV(VkDevice device, VkPipelineIndirectDeviceAddressInfoNV* info)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineIndirectDeviceAddressInfoNV*, ulong>)vkGetPipelineIndirectDeviceAddressNV_ptr.Value)(device, info);
	}

	public void vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthClampEnableEXT_ptr.Value)(commandBuffer, depthClampEnable);
	}

	public void vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPolygonMode, void>)vkCmdSetPolygonModeEXT_ptr.Value)(commandBuffer, polygonMode);
	}

	public void vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlags rasterizationSamples)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSampleCountFlags, void>)vkCmdSetRasterizationSamplesEXT_ptr.Value)(commandBuffer, rasterizationSamples);
	}

	public void vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlags samples, uint* sampleMask)
	{
		((delegate* unmanaged<VkCommandBuffer, VkSampleCountFlags, uint*, void>)vkCmdSetSampleMaskEXT_ptr.Value)(commandBuffer, samples, sampleMask);
	}

	public void vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetAlphaToCoverageEnableEXT_ptr.Value)(commandBuffer, alphaToCoverageEnable);
	}

	public void vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetAlphaToOneEnableEXT_ptr.Value)(commandBuffer, alphaToOneEnable);
	}

	public void vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetLogicOpEnableEXT_ptr.Value)(commandBuffer, logicOpEnable);
	}

	public void vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, VkBool32* colorBlendEnables)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkBool32*, void>)vkCmdSetColorBlendEnableEXT_ptr.Value)(commandBuffer, firstAttachment, attachmentCount, colorBlendEnables);
	}

	public void vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, VkColorBlendEquationEXT* colorBlendEquations)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkColorBlendEquationEXT*, void>)vkCmdSetColorBlendEquationEXT_ptr.Value)(commandBuffer, firstAttachment, attachmentCount, colorBlendEquations);
	}

	public void vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, VkColorComponentFlags* colorWriteMasks)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkColorComponentFlags*, void>)vkCmdSetColorWriteMaskEXT_ptr.Value)(commandBuffer, firstAttachment, attachmentCount, colorWriteMasks);
	}

	public void vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin)
	{
		((delegate* unmanaged<VkCommandBuffer, VkTessellationDomainOrigin, void>)vkCmdSetTessellationDomainOriginEXT_ptr.Value)(commandBuffer, domainOrigin);
	}

	public void vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint rasterizationStream)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, void>)vkCmdSetRasterizationStreamEXT_ptr.Value)(commandBuffer, rasterizationStream);
	}

	public void vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkConservativeRasterizationModeEXT, void>)vkCmdSetConservativeRasterizationModeEXT_ptr.Value)(commandBuffer, conservativeRasterizationMode);
	}

	public void vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize)
	{
		((delegate* unmanaged<VkCommandBuffer, float, void>)vkCmdSetExtraPrimitiveOverestimationSizeEXT_ptr.Value)(commandBuffer, extraPrimitiveOverestimationSize);
	}

	public void vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthClipEnableEXT_ptr.Value)(commandBuffer, depthClipEnable);
	}

	public void vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetSampleLocationsEnableEXT_ptr.Value)(commandBuffer, sampleLocationsEnable);
	}

	public void vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint firstAttachment, uint attachmentCount, VkColorBlendAdvancedEXT* colorBlendAdvanced)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkColorBlendAdvancedEXT*, void>)vkCmdSetColorBlendAdvancedEXT_ptr.Value)(commandBuffer, firstAttachment, attachmentCount, colorBlendAdvanced);
	}

	public void vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkProvokingVertexModeEXT, void>)vkCmdSetProvokingVertexModeEXT_ptr.Value)(commandBuffer, provokingVertexMode);
	}

	public void vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationMode lineRasterizationMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkLineRasterizationMode, void>)vkCmdSetLineRasterizationModeEXT_ptr.Value)(commandBuffer, lineRasterizationMode);
	}

	public void vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetLineStippleEnableEXT_ptr.Value)(commandBuffer, stippledLineEnable);
	}

	public void vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetDepthClipNegativeOneToOneEXT_ptr.Value)(commandBuffer, negativeOneToOne);
	}

	public void vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetViewportWScalingEnableNV_ptr.Value)(commandBuffer, viewportWScalingEnable);
	}

	public void vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportSwizzleNV* viewportSwizzles)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewportSwizzleNV*, void>)vkCmdSetViewportSwizzleNV_ptr.Value)(commandBuffer, firstViewport, viewportCount, viewportSwizzles);
	}

	public void vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetCoverageToColorEnableNV_ptr.Value)(commandBuffer, coverageToColorEnable);
	}

	public void vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint coverageToColorLocation)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, void>)vkCmdSetCoverageToColorLocationNV_ptr.Value)(commandBuffer, coverageToColorLocation);
	}

	public void vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCoverageModulationModeNV, void>)vkCmdSetCoverageModulationModeNV_ptr.Value)(commandBuffer, coverageModulationMode);
	}

	public void vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetCoverageModulationTableEnableNV_ptr.Value)(commandBuffer, coverageModulationTableEnable);
	}

	public void vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint coverageModulationTableCount, float* coverageModulationTable)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, float*, void>)vkCmdSetCoverageModulationTableNV_ptr.Value)(commandBuffer, coverageModulationTableCount, coverageModulationTable);
	}

	public void vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetShadingRateImageEnableNV_ptr.Value)(commandBuffer, shadingRateImageEnable);
	}

	public void vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, void>)vkCmdSetRepresentativeFragmentTestEnableNV_ptr.Value)(commandBuffer, representativeFragmentTestEnable);
	}

	public void vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCoverageReductionModeNV, void>)vkCmdSetCoverageReductionModeNV_ptr.Value)(commandBuffer, coverageReductionMode);
	}

	public VkResult vkCreateTensorARM(VkDevice device, VkTensorCreateInfoARM* createInfo, VkTensorARM* tensor)
	{
		return ((delegate* unmanaged<VkDevice, VkTensorCreateInfoARM*, VkAllocationCallbacks*, VkTensorARM*, VkResult>)vkCreateTensorARM_ptr.Value)(device, createInfo, default, tensor);
	}

	public VkResult vkCreateTensorARM(VkDevice device, VkTensorCreateInfoARM* createInfo, VkAllocationCallbacks* allocator, VkTensorARM* tensor)
	{
		return ((delegate* unmanaged<VkDevice, VkTensorCreateInfoARM*, VkAllocationCallbacks*, VkTensorARM*, VkResult>)vkCreateTensorARM_ptr.Value)(device, createInfo, allocator, tensor);
	}

	public VkResult vkCreateTensorARM(VkDevice device, in VkTensorCreateInfoARM createInfo, VkTensorARM* tensor)
	{
		fixed (VkTensorCreateInfoARM* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkTensorCreateInfoARM*, VkAllocationCallbacks*, VkTensorARM*, VkResult>)vkCreateTensorARM_ptr.Value)(device, createInfoPtr, default, tensor);
		}
	}

	public VkResult vkCreateTensorARM(VkDevice device, in VkTensorCreateInfoARM createInfo, VkAllocationCallbacks* allocator, VkTensorARM* tensor)
	{
		fixed (VkTensorCreateInfoARM* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkTensorCreateInfoARM*, VkAllocationCallbacks*, VkTensorARM*, VkResult>)vkCreateTensorARM_ptr.Value)(device, createInfoPtr, allocator, tensor);
		}
	}

	public void vkDestroyTensorARM(VkDevice device, VkTensorARM tensor)
	{
		((delegate* unmanaged<VkDevice, VkTensorARM, VkAllocationCallbacks*, void>)vkDestroyTensorARM_ptr.Value)(device, tensor, default);
	}

	public void vkDestroyTensorARM(VkDevice device, VkTensorARM tensor, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkTensorARM, VkAllocationCallbacks*, void>)vkDestroyTensorARM_ptr.Value)(device, tensor, allocator);
	}

	public VkResult vkCreateTensorViewARM(VkDevice device, VkTensorViewCreateInfoARM* createInfo, VkTensorViewARM* view)
	{
		return ((delegate* unmanaged<VkDevice, VkTensorViewCreateInfoARM*, VkAllocationCallbacks*, VkTensorViewARM*, VkResult>)vkCreateTensorViewARM_ptr.Value)(device, createInfo, default, view);
	}

	public VkResult vkCreateTensorViewARM(VkDevice device, VkTensorViewCreateInfoARM* createInfo, VkAllocationCallbacks* allocator, VkTensorViewARM* view)
	{
		return ((delegate* unmanaged<VkDevice, VkTensorViewCreateInfoARM*, VkAllocationCallbacks*, VkTensorViewARM*, VkResult>)vkCreateTensorViewARM_ptr.Value)(device, createInfo, allocator, view);
	}

	public VkResult vkCreateTensorViewARM(VkDevice device, in VkTensorViewCreateInfoARM createInfo, VkTensorViewARM* view)
	{
		fixed (VkTensorViewCreateInfoARM* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkTensorViewCreateInfoARM*, VkAllocationCallbacks*, VkTensorViewARM*, VkResult>)vkCreateTensorViewARM_ptr.Value)(device, createInfoPtr, default, view);
		}
	}

	public VkResult vkCreateTensorViewARM(VkDevice device, in VkTensorViewCreateInfoARM createInfo, VkAllocationCallbacks* allocator, VkTensorViewARM* view)
	{
		fixed (VkTensorViewCreateInfoARM* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkTensorViewCreateInfoARM*, VkAllocationCallbacks*, VkTensorViewARM*, VkResult>)vkCreateTensorViewARM_ptr.Value)(device, createInfoPtr, allocator, view);
		}
	}

	public void vkDestroyTensorViewARM(VkDevice device, VkTensorViewARM tensorView)
	{
		((delegate* unmanaged<VkDevice, VkTensorViewARM, VkAllocationCallbacks*, void>)vkDestroyTensorViewARM_ptr.Value)(device, tensorView, default);
	}

	public void vkDestroyTensorViewARM(VkDevice device, VkTensorViewARM tensorView, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkTensorViewARM, VkAllocationCallbacks*, void>)vkDestroyTensorViewARM_ptr.Value)(device, tensorView, allocator);
	}

	public void vkGetTensorMemoryRequirementsARM(VkDevice device, VkTensorMemoryRequirementsInfoARM* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkTensorMemoryRequirementsInfoARM*, VkMemoryRequirements2*, void>)vkGetTensorMemoryRequirementsARM_ptr.Value)(device, info, memoryRequirements);
	}

	public VkResult vkBindTensorMemoryARM(VkDevice device, uint bindInfoCount, VkBindTensorMemoryInfoARM* bindInfos)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkBindTensorMemoryInfoARM*, VkResult>)vkBindTensorMemoryARM_ptr.Value)(device, bindInfoCount, bindInfos);
	}

	public void vkGetDeviceTensorMemoryRequirementsARM(VkDevice device, VkDeviceTensorMemoryRequirementsARM* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkDeviceTensorMemoryRequirementsARM*, VkMemoryRequirements2*, void>)vkGetDeviceTensorMemoryRequirementsARM_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkCmdCopyTensorARM(VkCommandBuffer commandBuffer, VkCopyTensorInfoARM* copyTensorInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyTensorInfoARM*, void>)vkCmdCopyTensorARM_ptr.Value)(commandBuffer, copyTensorInfo);
	}

	public VkResult vkGetTensorOpaqueCaptureDescriptorDataARM(VkDevice device, VkTensorCaptureDescriptorDataInfoARM* info, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkTensorCaptureDescriptorDataInfoARM*, void*, VkResult>)vkGetTensorOpaqueCaptureDescriptorDataARM_ptr.Value)(device, info, data);
	}

	public VkResult vkGetTensorViewOpaqueCaptureDescriptorDataARM(VkDevice device, VkTensorViewCaptureDescriptorDataInfoARM* info, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkTensorViewCaptureDescriptorDataInfoARM*, void*, VkResult>)vkGetTensorViewOpaqueCaptureDescriptorDataARM_ptr.Value)(device, info, data);
	}

	public void vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* identifier)
	{
		((delegate* unmanaged<VkDevice, VkShaderModule, VkShaderModuleIdentifierEXT*, void>)vkGetShaderModuleIdentifierEXT_ptr.Value)(device, shaderModule, identifier);
	}

	public void vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkShaderModuleIdentifierEXT* identifier)
	{
		((delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkShaderModuleIdentifierEXT*, void>)vkGetShaderModuleCreateInfoIdentifierEXT_ptr.Value)(device, createInfo, identifier);
	}

	public VkResult vkCreateOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionCreateInfoNV* createInfo, VkOpticalFlowSessionNV* session)
	{
		return ((delegate* unmanaged<VkDevice, VkOpticalFlowSessionCreateInfoNV*, VkAllocationCallbacks*, VkOpticalFlowSessionNV*, VkResult>)vkCreateOpticalFlowSessionNV_ptr.Value)(device, createInfo, default, session);
	}

	public VkResult vkCreateOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, VkOpticalFlowSessionNV* session)
	{
		return ((delegate* unmanaged<VkDevice, VkOpticalFlowSessionCreateInfoNV*, VkAllocationCallbacks*, VkOpticalFlowSessionNV*, VkResult>)vkCreateOpticalFlowSessionNV_ptr.Value)(device, createInfo, allocator, session);
	}

	public VkResult vkCreateOpticalFlowSessionNV(VkDevice device, in VkOpticalFlowSessionCreateInfoNV createInfo, VkOpticalFlowSessionNV* session)
	{
		fixed (VkOpticalFlowSessionCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkOpticalFlowSessionCreateInfoNV*, VkAllocationCallbacks*, VkOpticalFlowSessionNV*, VkResult>)vkCreateOpticalFlowSessionNV_ptr.Value)(device, createInfoPtr, default, session);
		}
	}

	public VkResult vkCreateOpticalFlowSessionNV(VkDevice device, in VkOpticalFlowSessionCreateInfoNV createInfo, VkAllocationCallbacks* allocator, VkOpticalFlowSessionNV* session)
	{
		fixed (VkOpticalFlowSessionCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkOpticalFlowSessionCreateInfoNV*, VkAllocationCallbacks*, VkOpticalFlowSessionNV*, VkResult>)vkCreateOpticalFlowSessionNV_ptr.Value)(device, createInfoPtr, allocator, session);
		}
	}

	public void vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session)
	{
		((delegate* unmanaged<VkDevice, VkOpticalFlowSessionNV, VkAllocationCallbacks*, void>)vkDestroyOpticalFlowSessionNV_ptr.Value)(device, session, default);
	}

	public void vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkOpticalFlowSessionNV, VkAllocationCallbacks*, void>)vkDestroyOpticalFlowSessionNV_ptr.Value)(device, session, allocator);
	}

	public VkResult vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout)
	{
		return ((delegate* unmanaged<VkDevice, VkOpticalFlowSessionNV, VkOpticalFlowSessionBindingPointNV, VkImageView, VkImageLayout, VkResult>)vkBindOpticalFlowSessionImageNV_ptr.Value)(device, session, bindingPoint, view, layout);
	}

	public void vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, VkOpticalFlowExecuteInfoNV* executeInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkOpticalFlowSessionNV, VkOpticalFlowExecuteInfoNV*, void>)vkCmdOpticalFlowExecuteNV_ptr.Value)(commandBuffer, session, executeInfo);
	}

	public void vkAntiLagUpdateAMD(VkDevice device, VkAntiLagDataAMD* data)
	{
		((delegate* unmanaged<VkDevice, VkAntiLagDataAMD*, void>)vkAntiLagUpdateAMD_ptr.Value)(device, data);
	}

	public VkResult vkCreateShadersEXT(VkDevice device, uint createInfoCount, VkShaderCreateInfoEXT* createInfos, VkShaderEXT* shaders)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkShaderCreateInfoEXT*, VkAllocationCallbacks*, VkShaderEXT*, VkResult>)vkCreateShadersEXT_ptr.Value)(device, createInfoCount, createInfos, default, shaders);
	}

	public VkResult vkCreateShadersEXT(VkDevice device, uint createInfoCount, VkShaderCreateInfoEXT* createInfos, VkAllocationCallbacks* allocator, VkShaderEXT* shaders)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkShaderCreateInfoEXT*, VkAllocationCallbacks*, VkShaderEXT*, VkResult>)vkCreateShadersEXT_ptr.Value)(device, createInfoCount, createInfos, allocator, shaders);
	}

	public VkResult vkCreateShadersEXT(VkDevice device, uint createInfoCount, in VkShaderCreateInfoEXT createInfos, VkShaderEXT* shaders)
	{
		fixed (VkShaderCreateInfoEXT* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, uint, VkShaderCreateInfoEXT*, VkAllocationCallbacks*, VkShaderEXT*, VkResult>)vkCreateShadersEXT_ptr.Value)(device, createInfoCount, createInfoPtr, default, shaders);
		}
	}

	public VkResult vkCreateShadersEXT(VkDevice device, uint createInfoCount, in VkShaderCreateInfoEXT createInfos, VkAllocationCallbacks* allocator, VkShaderEXT* shaders)
	{
		fixed (VkShaderCreateInfoEXT* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, uint, VkShaderCreateInfoEXT*, VkAllocationCallbacks*, VkShaderEXT*, VkResult>)vkCreateShadersEXT_ptr.Value)(device, createInfoCount, createInfoPtr, allocator, shaders);
		}
	}

	public void vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader)
	{
		((delegate* unmanaged<VkDevice, VkShaderEXT, VkAllocationCallbacks*, void>)vkDestroyShaderEXT_ptr.Value)(device, shader, default);
	}

	public void vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkShaderEXT, VkAllocationCallbacks*, void>)vkDestroyShaderEXT_ptr.Value)(device, shader, allocator);
	}

	public VkResult vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, ulong* dataSize, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkShaderEXT, ulong*, void*, VkResult>)vkGetShaderBinaryDataEXT_ptr.Value)(device, shader, dataSize, data);
	}

	public void vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint stageCount, VkShaderStageFlags* stages, VkShaderEXT* shaders)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkShaderStageFlags*, VkShaderEXT*, void>)vkCmdBindShadersEXT_ptr.Value)(commandBuffer, stageCount, stages, shaders);
	}

	public void vkCmdSetDepthClampRangeEXT(VkCommandBuffer commandBuffer, VkDepthClampModeEXT depthClampMode, VkDepthClampRangeEXT* depthClampRange)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDepthClampModeEXT, VkDepthClampRangeEXT*, void>)vkCmdSetDepthClampRangeEXT_ptr.Value)(commandBuffer, depthClampMode, depthClampRange);
	}

	public VkResult vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint* propertiesCount, VkTilePropertiesQCOM* properties)
	{
		return ((delegate* unmanaged<VkDevice, VkFramebuffer, uint*, VkTilePropertiesQCOM*, VkResult>)vkGetFramebufferTilePropertiesQCOM_ptr.Value)(device, framebuffer, propertiesCount, properties);
	}

	public VkResult vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, VkRenderingInfo* renderingInfo, VkTilePropertiesQCOM* properties)
	{
		return ((delegate* unmanaged<VkDevice, VkRenderingInfo*, VkTilePropertiesQCOM*, VkResult>)vkGetDynamicRenderingTilePropertiesQCOM_ptr.Value)(device, renderingInfo, properties);
	}

	public VkResult vkConvertCooperativeVectorMatrixNV(VkDevice device, VkConvertCooperativeVectorMatrixInfoNV* info)
	{
		return ((delegate* unmanaged<VkDevice, VkConvertCooperativeVectorMatrixInfoNV*, VkResult>)vkConvertCooperativeVectorMatrixNV_ptr.Value)(device, info);
	}

	public void vkCmdConvertCooperativeVectorMatrixNV(VkCommandBuffer commandBuffer, uint infoCount, VkConvertCooperativeVectorMatrixInfoNV* infos)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkConvertCooperativeVectorMatrixInfoNV*, void>)vkCmdConvertCooperativeVectorMatrixNV_ptr.Value)(commandBuffer, infoCount, infos);
	}

	public VkResult vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepModeInfoNV* sleepModeInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkLatencySleepModeInfoNV*, VkResult>)vkSetLatencySleepModeNV_ptr.Value)(device, swapchain, sleepModeInfo);
	}

	public VkResult vkLatencySleepNV(VkDevice device, VkSwapchainKHR swapchain, VkLatencySleepInfoNV* sleepInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkLatencySleepInfoNV*, VkResult>)vkLatencySleepNV_ptr.Value)(device, swapchain, sleepInfo);
	}

	public void vkSetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain, VkSetLatencyMarkerInfoNV* latencyMarkerInfo)
	{
		((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkSetLatencyMarkerInfoNV*, void>)vkSetLatencyMarkerNV_ptr.Value)(device, swapchain, latencyMarkerInfo);
	}

	public void vkGetLatencyTimingsNV(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV* latencyMarkerInfo)
	{
		((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkGetLatencyMarkerInfoNV*, void>)vkGetLatencyTimingsNV_ptr.Value)(device, swapchain, latencyMarkerInfo);
	}

	public void vkQueueNotifyOutOfBandNV(VkQueue queue, VkOutOfBandQueueTypeInfoNV* queueTypeInfo)
	{
		((delegate* unmanaged<VkQueue, VkOutOfBandQueueTypeInfoNV*, void>)vkQueueNotifyOutOfBandNV_ptr.Value)(queue, queueTypeInfo);
	}

	public VkResult vkCreateDataGraphPipelinesARM(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, VkDataGraphPipelineCreateInfoARM* createInfos, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkDataGraphPipelineCreateInfoARM*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateDataGraphPipelinesARM_ptr.Value)(device, deferredOperation, pipelineCache, createInfoCount, createInfos, default, pipelines);
	}

	public VkResult vkCreateDataGraphPipelinesARM(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, VkDataGraphPipelineCreateInfoARM* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkDataGraphPipelineCreateInfoARM*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateDataGraphPipelinesARM_ptr.Value)(device, deferredOperation, pipelineCache, createInfoCount, createInfos, allocator, pipelines);
	}

	public VkResult vkCreateDataGraphPipelinesARM(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, in VkDataGraphPipelineCreateInfoARM createInfos, VkPipeline* pipelines)
	{
		fixed (VkDataGraphPipelineCreateInfoARM* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkDataGraphPipelineCreateInfoARM*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateDataGraphPipelinesARM_ptr.Value)(device, deferredOperation, pipelineCache, createInfoCount, createInfoPtr, default, pipelines);
		}
	}

	public VkResult vkCreateDataGraphPipelinesARM(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, in VkDataGraphPipelineCreateInfoARM createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		fixed (VkDataGraphPipelineCreateInfoARM* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkDataGraphPipelineCreateInfoARM*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateDataGraphPipelinesARM_ptr.Value)(device, deferredOperation, pipelineCache, createInfoCount, createInfoPtr, allocator, pipelines);
		}
	}

	public VkResult vkCreateDataGraphPipelineSessionARM(VkDevice device, VkDataGraphPipelineSessionCreateInfoARM* createInfo, VkDataGraphPipelineSessionARM* session)
	{
		return ((delegate* unmanaged<VkDevice, VkDataGraphPipelineSessionCreateInfoARM*, VkAllocationCallbacks*, VkDataGraphPipelineSessionARM*, VkResult>)vkCreateDataGraphPipelineSessionARM_ptr.Value)(device, createInfo, default, session);
	}

	public VkResult vkCreateDataGraphPipelineSessionARM(VkDevice device, VkDataGraphPipelineSessionCreateInfoARM* createInfo, VkAllocationCallbacks* allocator, VkDataGraphPipelineSessionARM* session)
	{
		return ((delegate* unmanaged<VkDevice, VkDataGraphPipelineSessionCreateInfoARM*, VkAllocationCallbacks*, VkDataGraphPipelineSessionARM*, VkResult>)vkCreateDataGraphPipelineSessionARM_ptr.Value)(device, createInfo, allocator, session);
	}

	public VkResult vkCreateDataGraphPipelineSessionARM(VkDevice device, in VkDataGraphPipelineSessionCreateInfoARM createInfo, VkDataGraphPipelineSessionARM* session)
	{
		fixed (VkDataGraphPipelineSessionCreateInfoARM* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDataGraphPipelineSessionCreateInfoARM*, VkAllocationCallbacks*, VkDataGraphPipelineSessionARM*, VkResult>)vkCreateDataGraphPipelineSessionARM_ptr.Value)(device, createInfoPtr, default, session);
		}
	}

	public VkResult vkCreateDataGraphPipelineSessionARM(VkDevice device, in VkDataGraphPipelineSessionCreateInfoARM createInfo, VkAllocationCallbacks* allocator, VkDataGraphPipelineSessionARM* session)
	{
		fixed (VkDataGraphPipelineSessionCreateInfoARM* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkDataGraphPipelineSessionCreateInfoARM*, VkAllocationCallbacks*, VkDataGraphPipelineSessionARM*, VkResult>)vkCreateDataGraphPipelineSessionARM_ptr.Value)(device, createInfoPtr, allocator, session);
		}
	}

	public VkResult vkGetDataGraphPipelineSessionBindPointRequirementsARM(VkDevice device, VkDataGraphPipelineSessionBindPointRequirementsInfoARM* info, uint* bindPointRequirementCount, VkDataGraphPipelineSessionBindPointRequirementARM* bindPointRequirements)
	{
		return ((delegate* unmanaged<VkDevice, VkDataGraphPipelineSessionBindPointRequirementsInfoARM*, uint*, VkDataGraphPipelineSessionBindPointRequirementARM*, VkResult>)vkGetDataGraphPipelineSessionBindPointRequirementsARM_ptr.Value)(device, info, bindPointRequirementCount, bindPointRequirements);
	}

	public void vkGetDataGraphPipelineSessionMemoryRequirementsARM(VkDevice device, VkDataGraphPipelineSessionMemoryRequirementsInfoARM* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkDataGraphPipelineSessionMemoryRequirementsInfoARM*, VkMemoryRequirements2*, void>)vkGetDataGraphPipelineSessionMemoryRequirementsARM_ptr.Value)(device, info, memoryRequirements);
	}

	public VkResult vkBindDataGraphPipelineSessionMemoryARM(VkDevice device, uint bindInfoCount, VkBindDataGraphPipelineSessionMemoryInfoARM* bindInfos)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkBindDataGraphPipelineSessionMemoryInfoARM*, VkResult>)vkBindDataGraphPipelineSessionMemoryARM_ptr.Value)(device, bindInfoCount, bindInfos);
	}

	public void vkDestroyDataGraphPipelineSessionARM(VkDevice device, VkDataGraphPipelineSessionARM session)
	{
		((delegate* unmanaged<VkDevice, VkDataGraphPipelineSessionARM, VkAllocationCallbacks*, void>)vkDestroyDataGraphPipelineSessionARM_ptr.Value)(device, session, default);
	}

	public void vkDestroyDataGraphPipelineSessionARM(VkDevice device, VkDataGraphPipelineSessionARM session, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkDataGraphPipelineSessionARM, VkAllocationCallbacks*, void>)vkDestroyDataGraphPipelineSessionARM_ptr.Value)(device, session, allocator);
	}

	public void vkCmdDispatchDataGraphARM(VkCommandBuffer commandBuffer, VkDataGraphPipelineSessionARM session, VkDataGraphPipelineDispatchInfoARM* info)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDataGraphPipelineSessionARM, VkDataGraphPipelineDispatchInfoARM*, void>)vkCmdDispatchDataGraphARM_ptr.Value)(commandBuffer, session, info);
	}

	public VkResult vkGetDataGraphPipelineAvailablePropertiesARM(VkDevice device, VkDataGraphPipelineInfoARM* pipelineInfo, uint* propertiesCount, VkDataGraphPipelinePropertyARM* properties)
	{
		return ((delegate* unmanaged<VkDevice, VkDataGraphPipelineInfoARM*, uint*, VkDataGraphPipelinePropertyARM*, VkResult>)vkGetDataGraphPipelineAvailablePropertiesARM_ptr.Value)(device, pipelineInfo, propertiesCount, properties);
	}

	public VkResult vkGetDataGraphPipelinePropertiesARM(VkDevice device, VkDataGraphPipelineInfoARM* pipelineInfo, uint propertiesCount, VkDataGraphPipelinePropertyQueryResultARM* properties)
	{
		return ((delegate* unmanaged<VkDevice, VkDataGraphPipelineInfoARM*, uint, VkDataGraphPipelinePropertyQueryResultARM*, VkResult>)vkGetDataGraphPipelinePropertiesARM_ptr.Value)(device, pipelineInfo, propertiesCount, properties);
	}

	public void vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask)
	{
		((delegate* unmanaged<VkCommandBuffer, VkImageAspectFlags, void>)vkCmdSetAttachmentFeedbackLoopEnableEXT_ptr.Value)(commandBuffer, aspectMask);
	}

	public void vkCmdBindTileMemoryQCOM(VkCommandBuffer commandBuffer, VkTileMemoryBindInfoQCOM* tileMemoryBindInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkTileMemoryBindInfoQCOM*, void>)vkCmdBindTileMemoryQCOM_ptr.Value)(commandBuffer, tileMemoryBindInfo);
	}

	public VkResult vkCreateExternalComputeQueueNV(VkDevice device, VkExternalComputeQueueCreateInfoNV* createInfo, VkExternalComputeQueueNV* externalQueue)
	{
		return ((delegate* unmanaged<VkDevice, VkExternalComputeQueueCreateInfoNV*, VkAllocationCallbacks*, VkExternalComputeQueueNV*, VkResult>)vkCreateExternalComputeQueueNV_ptr.Value)(device, createInfo, default, externalQueue);
	}

	public VkResult vkCreateExternalComputeQueueNV(VkDevice device, VkExternalComputeQueueCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, VkExternalComputeQueueNV* externalQueue)
	{
		return ((delegate* unmanaged<VkDevice, VkExternalComputeQueueCreateInfoNV*, VkAllocationCallbacks*, VkExternalComputeQueueNV*, VkResult>)vkCreateExternalComputeQueueNV_ptr.Value)(device, createInfo, allocator, externalQueue);
	}

	public VkResult vkCreateExternalComputeQueueNV(VkDevice device, in VkExternalComputeQueueCreateInfoNV createInfo, VkExternalComputeQueueNV* externalQueue)
	{
		fixed (VkExternalComputeQueueCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkExternalComputeQueueCreateInfoNV*, VkAllocationCallbacks*, VkExternalComputeQueueNV*, VkResult>)vkCreateExternalComputeQueueNV_ptr.Value)(device, createInfoPtr, default, externalQueue);
		}
	}

	public VkResult vkCreateExternalComputeQueueNV(VkDevice device, in VkExternalComputeQueueCreateInfoNV createInfo, VkAllocationCallbacks* allocator, VkExternalComputeQueueNV* externalQueue)
	{
		fixed (VkExternalComputeQueueCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkExternalComputeQueueCreateInfoNV*, VkAllocationCallbacks*, VkExternalComputeQueueNV*, VkResult>)vkCreateExternalComputeQueueNV_ptr.Value)(device, createInfoPtr, allocator, externalQueue);
		}
	}

	public void vkDestroyExternalComputeQueueNV(VkDevice device, VkExternalComputeQueueNV externalQueue)
	{
		((delegate* unmanaged<VkDevice, VkExternalComputeQueueNV, VkAllocationCallbacks*, void>)vkDestroyExternalComputeQueueNV_ptr.Value)(device, externalQueue, default);
	}

	public void vkDestroyExternalComputeQueueNV(VkDevice device, VkExternalComputeQueueNV externalQueue, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkExternalComputeQueueNV, VkAllocationCallbacks*, void>)vkDestroyExternalComputeQueueNV_ptr.Value)(device, externalQueue, allocator);
	}

	public void vkGetExternalComputeQueueDataNV(VkExternalComputeQueueNV externalQueue, VkExternalComputeQueueDataParamsNV* @params, void* data)
	{
		((delegate* unmanaged<VkExternalComputeQueueNV, VkExternalComputeQueueDataParamsNV*, void*, void>)vkGetExternalComputeQueueDataNV_ptr.Value)(externalQueue, @params, data);
	}

	public void vkGetClusterAccelerationStructureBuildSizesNV(VkDevice device, VkClusterAccelerationStructureInputInfoNV* info, VkAccelerationStructureBuildSizesInfoKHR* sizeInfo)
	{
		((delegate* unmanaged<VkDevice, VkClusterAccelerationStructureInputInfoNV*, VkAccelerationStructureBuildSizesInfoKHR*, void>)vkGetClusterAccelerationStructureBuildSizesNV_ptr.Value)(device, info, sizeInfo);
	}

	public void vkCmdBuildClusterAccelerationStructureIndirectNV(VkCommandBuffer commandBuffer, VkClusterAccelerationStructureCommandsInfoNV* commandInfos)
	{
		((delegate* unmanaged<VkCommandBuffer, VkClusterAccelerationStructureCommandsInfoNV*, void>)vkCmdBuildClusterAccelerationStructureIndirectNV_ptr.Value)(commandBuffer, commandInfos);
	}

	public void vkGetPartitionedAccelerationStructuresBuildSizesNV(VkDevice device, VkPartitionedAccelerationStructureInstancesInputNV* info, VkAccelerationStructureBuildSizesInfoKHR* sizeInfo)
	{
		((delegate* unmanaged<VkDevice, VkPartitionedAccelerationStructureInstancesInputNV*, VkAccelerationStructureBuildSizesInfoKHR*, void>)vkGetPartitionedAccelerationStructuresBuildSizesNV_ptr.Value)(device, info, sizeInfo);
	}

	public void vkCmdBuildPartitionedAccelerationStructuresNV(VkCommandBuffer commandBuffer, VkBuildPartitionedAccelerationStructureInfoNV* buildInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuildPartitionedAccelerationStructureInfoNV*, void>)vkCmdBuildPartitionedAccelerationStructuresNV_ptr.Value)(commandBuffer, buildInfo);
	}

	public void vkGetGeneratedCommandsMemoryRequirementsEXT(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoEXT* info, VkMemoryRequirements2* memoryRequirements)
	{
		((delegate* unmanaged<VkDevice, VkGeneratedCommandsMemoryRequirementsInfoEXT*, VkMemoryRequirements2*, void>)vkGetGeneratedCommandsMemoryRequirementsEXT_ptr.Value)(device, info, memoryRequirements);
	}

	public void vkCmdPreprocessGeneratedCommandsEXT(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoEXT* generatedCommandsInfo, VkCommandBuffer stateCommandBuffer)
	{
		((delegate* unmanaged<VkCommandBuffer, VkGeneratedCommandsInfoEXT*, VkCommandBuffer, void>)vkCmdPreprocessGeneratedCommandsEXT_ptr.Value)(commandBuffer, generatedCommandsInfo, stateCommandBuffer);
	}

	public void vkCmdExecuteGeneratedCommandsEXT(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoEXT* generatedCommandsInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoEXT*, void>)vkCmdExecuteGeneratedCommandsEXT_ptr.Value)(commandBuffer, isPreprocessed, generatedCommandsInfo);
	}

	public VkResult vkCreateIndirectCommandsLayoutEXT(VkDevice device, VkIndirectCommandsLayoutCreateInfoEXT* createInfo, VkIndirectCommandsLayoutEXT* indirectCommandsLayout)
	{
		return ((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectCommandsLayoutEXT*, VkResult>)vkCreateIndirectCommandsLayoutEXT_ptr.Value)(device, createInfo, default, indirectCommandsLayout);
	}

	public VkResult vkCreateIndirectCommandsLayoutEXT(VkDevice device, VkIndirectCommandsLayoutCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkIndirectCommandsLayoutEXT* indirectCommandsLayout)
	{
		return ((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectCommandsLayoutEXT*, VkResult>)vkCreateIndirectCommandsLayoutEXT_ptr.Value)(device, createInfo, allocator, indirectCommandsLayout);
	}

	public VkResult vkCreateIndirectCommandsLayoutEXT(VkDevice device, in VkIndirectCommandsLayoutCreateInfoEXT createInfo, VkIndirectCommandsLayoutEXT* indirectCommandsLayout)
	{
		fixed (VkIndirectCommandsLayoutCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectCommandsLayoutEXT*, VkResult>)vkCreateIndirectCommandsLayoutEXT_ptr.Value)(device, createInfoPtr, default, indirectCommandsLayout);
		}
	}

	public VkResult vkCreateIndirectCommandsLayoutEXT(VkDevice device, in VkIndirectCommandsLayoutCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, VkIndirectCommandsLayoutEXT* indirectCommandsLayout)
	{
		fixed (VkIndirectCommandsLayoutCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectCommandsLayoutEXT*, VkResult>)vkCreateIndirectCommandsLayoutEXT_ptr.Value)(device, createInfoPtr, allocator, indirectCommandsLayout);
		}
	}

	public void vkDestroyIndirectCommandsLayoutEXT(VkDevice device, VkIndirectCommandsLayoutEXT indirectCommandsLayout)
	{
		((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutEXT, VkAllocationCallbacks*, void>)vkDestroyIndirectCommandsLayoutEXT_ptr.Value)(device, indirectCommandsLayout, default);
	}

	public void vkDestroyIndirectCommandsLayoutEXT(VkDevice device, VkIndirectCommandsLayoutEXT indirectCommandsLayout, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutEXT, VkAllocationCallbacks*, void>)vkDestroyIndirectCommandsLayoutEXT_ptr.Value)(device, indirectCommandsLayout, allocator);
	}

	public VkResult vkCreateIndirectExecutionSetEXT(VkDevice device, VkIndirectExecutionSetCreateInfoEXT* createInfo, VkIndirectExecutionSetEXT* indirectExecutionSet)
	{
		return ((delegate* unmanaged<VkDevice, VkIndirectExecutionSetCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectExecutionSetEXT*, VkResult>)vkCreateIndirectExecutionSetEXT_ptr.Value)(device, createInfo, default, indirectExecutionSet);
	}

	public VkResult vkCreateIndirectExecutionSetEXT(VkDevice device, VkIndirectExecutionSetCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkIndirectExecutionSetEXT* indirectExecutionSet)
	{
		return ((delegate* unmanaged<VkDevice, VkIndirectExecutionSetCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectExecutionSetEXT*, VkResult>)vkCreateIndirectExecutionSetEXT_ptr.Value)(device, createInfo, allocator, indirectExecutionSet);
	}

	public VkResult vkCreateIndirectExecutionSetEXT(VkDevice device, in VkIndirectExecutionSetCreateInfoEXT createInfo, VkIndirectExecutionSetEXT* indirectExecutionSet)
	{
		fixed (VkIndirectExecutionSetCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkIndirectExecutionSetCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectExecutionSetEXT*, VkResult>)vkCreateIndirectExecutionSetEXT_ptr.Value)(device, createInfoPtr, default, indirectExecutionSet);
		}
	}

	public VkResult vkCreateIndirectExecutionSetEXT(VkDevice device, in VkIndirectExecutionSetCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, VkIndirectExecutionSetEXT* indirectExecutionSet)
	{
		fixed (VkIndirectExecutionSetCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkIndirectExecutionSetCreateInfoEXT*, VkAllocationCallbacks*, VkIndirectExecutionSetEXT*, VkResult>)vkCreateIndirectExecutionSetEXT_ptr.Value)(device, createInfoPtr, allocator, indirectExecutionSet);
		}
	}

	public void vkDestroyIndirectExecutionSetEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet)
	{
		((delegate* unmanaged<VkDevice, VkIndirectExecutionSetEXT, VkAllocationCallbacks*, void>)vkDestroyIndirectExecutionSetEXT_ptr.Value)(device, indirectExecutionSet, default);
	}

	public void vkDestroyIndirectExecutionSetEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkIndirectExecutionSetEXT, VkAllocationCallbacks*, void>)vkDestroyIndirectExecutionSetEXT_ptr.Value)(device, indirectExecutionSet, allocator);
	}

	public void vkUpdateIndirectExecutionSetPipelineEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint executionSetWriteCount, VkWriteIndirectExecutionSetPipelineEXT* executionSetWrites)
	{
		((delegate* unmanaged<VkDevice, VkIndirectExecutionSetEXT, uint, VkWriteIndirectExecutionSetPipelineEXT*, void>)vkUpdateIndirectExecutionSetPipelineEXT_ptr.Value)(device, indirectExecutionSet, executionSetWriteCount, executionSetWrites);
	}

	public void vkUpdateIndirectExecutionSetShaderEXT(VkDevice device, VkIndirectExecutionSetEXT indirectExecutionSet, uint executionSetWriteCount, VkWriteIndirectExecutionSetShaderEXT* executionSetWrites)
	{
		((delegate* unmanaged<VkDevice, VkIndirectExecutionSetEXT, uint, VkWriteIndirectExecutionSetShaderEXT*, void>)vkUpdateIndirectExecutionSetShaderEXT_ptr.Value)(device, indirectExecutionSet, executionSetWriteCount, executionSetWrites);
	}

	public void vkCmdEndRendering2EXT(VkCommandBuffer commandBuffer, VkRenderingEndInfoEXT* renderingEndInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkRenderingEndInfoEXT*, void>)vkCmdEndRendering2EXT_ptr.Value)(commandBuffer, renderingEndInfo);
	}

	public VkResult vkCreateAccelerationStructureKHR(VkDevice device, VkAccelerationStructureCreateInfoKHR* createInfo, VkAccelerationStructureKHR* accelerationStructure)
	{
		return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)vkCreateAccelerationStructureKHR_ptr.Value)(device, createInfo, default, accelerationStructure);
	}

	public VkResult vkCreateAccelerationStructureKHR(VkDevice device, VkAccelerationStructureCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkAccelerationStructureKHR* accelerationStructure)
	{
		return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)vkCreateAccelerationStructureKHR_ptr.Value)(device, createInfo, allocator, accelerationStructure);
	}

	public VkResult vkCreateAccelerationStructureKHR(VkDevice device, in VkAccelerationStructureCreateInfoKHR createInfo, VkAccelerationStructureKHR* accelerationStructure)
	{
		fixed (VkAccelerationStructureCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)vkCreateAccelerationStructureKHR_ptr.Value)(device, createInfoPtr, default, accelerationStructure);
		}
	}

	public VkResult vkCreateAccelerationStructureKHR(VkDevice device, in VkAccelerationStructureCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkAccelerationStructureKHR* accelerationStructure)
	{
		fixed (VkAccelerationStructureCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)vkCreateAccelerationStructureKHR_ptr.Value)(device, createInfoPtr, allocator, accelerationStructure);
		}
	}

	public void vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure)
	{
		((delegate* unmanaged<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void>)vkDestroyAccelerationStructureKHR_ptr.Value)(device, accelerationStructure, default);
	}

	public void vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void>)vkDestroyAccelerationStructureKHR_ptr.Value)(device, accelerationStructure, allocator);
	}

	public void vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* infos, VkAccelerationStructureBuildRangeInfoKHR** buildRangeInfos)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, void>)vkCmdBuildAccelerationStructuresKHR_ptr.Value)(commandBuffer, infoCount, infos, buildRangeInfos);
	}

	public void vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* infos, ulong* indirectDeviceAddresses, uint* indirectStrides, uint** maxPrimitiveCounts)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR*, ulong*, uint*, uint**, void>)vkCmdBuildAccelerationStructuresIndirectKHR_ptr.Value)(commandBuffer, infoCount, infos, indirectDeviceAddresses, indirectStrides, maxPrimitiveCounts);
	}

	public VkResult vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* infos, VkAccelerationStructureBuildRangeInfoKHR** buildRangeInfos)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, VkResult>)vkBuildAccelerationStructuresKHR_ptr.Value)(device, deferredOperation, infoCount, infos, buildRangeInfos);
	}

	public VkResult vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureInfoKHR* info)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureInfoKHR*, VkResult>)vkCopyAccelerationStructureKHR_ptr.Value)(device, deferredOperation, info);
	}

	public VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* info)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult>)vkCopyAccelerationStructureToMemoryKHR_ptr.Value)(device, deferredOperation, info);
	}

	public VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* info)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult>)vkCopyMemoryToAccelerationStructureKHR_ptr.Value)(device, deferredOperation, info);
	}

	public VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint accelerationStructureCount, VkAccelerationStructureKHR* accelerationStructures, VkQueryType queryType, ulong dataSize, void* data, ulong stride)
	{
		return ((delegate* unmanaged<VkDevice, uint, VkAccelerationStructureKHR*, VkQueryType, ulong, void*, ulong, VkResult>)vkWriteAccelerationStructuresPropertiesKHR_ptr.Value)(device, accelerationStructureCount, accelerationStructures, queryType, dataSize, data, stride);
	}

	public void vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureInfoKHR* info)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyAccelerationStructureInfoKHR*, void>)vkCmdCopyAccelerationStructureKHR_ptr.Value)(commandBuffer, info);
	}

	public void vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* info)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR*, void>)vkCmdCopyAccelerationStructureToMemoryKHR_ptr.Value)(commandBuffer, info);
	}

	public void vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* info)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR*, void>)vkCmdCopyMemoryToAccelerationStructureKHR_ptr.Value)(commandBuffer, info);
	}

	public ulong vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, VkAccelerationStructureDeviceAddressInfoKHR* info)
	{
		return ((delegate* unmanaged<VkDevice, VkAccelerationStructureDeviceAddressInfoKHR*, ulong>)vkGetAccelerationStructureDeviceAddressKHR_ptr.Value)(device, info);
	}

	public void vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructureKHR* accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureKHR*, VkQueryType, VkQueryPool, uint, void>)vkCmdWriteAccelerationStructuresPropertiesKHR_ptr.Value)(commandBuffer, accelerationStructureCount, accelerationStructures, queryType, queryPool, firstQuery);
	}

	public void vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, VkAccelerationStructureVersionInfoKHR* versionInfo, VkAccelerationStructureCompatibilityKHR* compatibility)
	{
		((delegate* unmanaged<VkDevice, VkAccelerationStructureVersionInfoKHR*, VkAccelerationStructureCompatibilityKHR*, void>)vkGetDeviceAccelerationStructureCompatibilityKHR_ptr.Value)(device, versionInfo, compatibility);
	}

	public void vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* buildInfo, uint* maxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* sizeInfo)
	{
		((delegate* unmanaged<VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, uint*, VkAccelerationStructureBuildSizesInfoKHR*, void>)vkGetAccelerationStructureBuildSizesKHR_ptr.Value)(device, buildType, buildInfo, maxPrimitiveCounts, sizeInfo);
	}

	public void vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth)
	{
		((delegate* unmanaged<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)vkCmdTraceRaysKHR_ptr.Value)(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, width, height, depth);
	}

	public VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoKHR* createInfos, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateRayTracingPipelinesKHR_ptr.Value)(device, deferredOperation, pipelineCache, createInfoCount, createInfos, default, pipelines);
	}

	public VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoKHR* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateRayTracingPipelinesKHR_ptr.Value)(device, deferredOperation, pipelineCache, createInfoCount, createInfos, allocator, pipelines);
	}

	public VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, in VkRayTracingPipelineCreateInfoKHR createInfos, VkPipeline* pipelines)
	{
		fixed (VkRayTracingPipelineCreateInfoKHR* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateRayTracingPipelinesKHR_ptr.Value)(device, deferredOperation, pipelineCache, createInfoCount, createInfoPtr, default, pipelines);
		}
	}

	public VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, in VkRayTracingPipelineCreateInfoKHR createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		fixed (VkRayTracingPipelineCreateInfoKHR* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateRayTracingPipelinesKHR_ptr.Value)(device, deferredOperation, pipelineCache, createInfoCount, createInfoPtr, allocator, pipelines);
		}
	}

	public VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* data)
	{
		return ((delegate* unmanaged<VkDevice, VkPipeline, uint, uint, ulong, void*, VkResult>)vkGetRayTracingCaptureReplayShaderGroupHandlesKHR_ptr.Value)(device, pipeline, firstGroup, groupCount, dataSize, data);
	}

	public void vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* raygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* missShaderBindingTable, VkStridedDeviceAddressRegionKHR* hitShaderBindingTable, VkStridedDeviceAddressRegionKHR* callableShaderBindingTable, ulong indirectDeviceAddress)
	{
		((delegate* unmanaged<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, ulong, void>)vkCmdTraceRaysIndirectKHR_ptr.Value)(commandBuffer, raygenShaderBindingTable, missShaderBindingTable, hitShaderBindingTable, callableShaderBindingTable, indirectDeviceAddress);
	}

	public ulong vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint group, VkShaderGroupShaderKHR groupShader)
	{
		return ((delegate* unmanaged<VkDevice, VkPipeline, uint, VkShaderGroupShaderKHR, ulong>)vkGetRayTracingShaderGroupStackSizeKHR_ptr.Value)(device, pipeline, group, groupShader);
	}

	public void vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint pipelineStackSize)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, void>)vkCmdSetRayTracingPipelineStackSizeKHR_ptr.Value)(commandBuffer, pipelineStackSize);
	}

	public void vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
	{
		((delegate* unmanaged<VkCommandBuffer, uint, uint, uint, void>)vkCmdDrawMeshTasksEXT_ptr.Value)(commandBuffer, groupCountX, groupCountY, groupCountZ);
	}

	public void vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, uint, uint, void>)vkCmdDrawMeshTasksIndirectEXT_ptr.Value)(commandBuffer, buffer, offset, drawCount, stride);
	}

	public void vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
	{
		((delegate* unmanaged<VkCommandBuffer, VkBuffer, ulong, VkBuffer, ulong, uint, uint, void>)vkCmdDrawMeshTasksIndirectCountEXT_ptr.Value)(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}

	public VkResult vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device, nint buffer, VkAndroidHardwareBufferPropertiesANDROID* properties)
	{
		return ((delegate* unmanaged<VkDevice, nint, VkAndroidHardwareBufferPropertiesANDROID*, VkResult>)vkGetAndroidHardwareBufferPropertiesANDROID_ptr.Value)(device, buffer, properties);
	}

	public VkResult vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device, VkMemoryGetAndroidHardwareBufferInfoANDROID* info, out nint buffer)
	{
		Unsafe.SkipInit(out buffer);

		fixed (nint* bufferPtr = &buffer)
		{
			return ((delegate* unmanaged<VkDevice, VkMemoryGetAndroidHardwareBufferInfoANDROID*, nint*, VkResult>)vkGetMemoryAndroidHardwareBufferANDROID_ptr.Value)(device, info, bufferPtr);
		}
	}

	public void vkExportMetalObjectsEXT(VkDevice device, VkExportMetalObjectsInfoEXT* metalObjectsInfo)
	{
		((delegate* unmanaged<VkDevice, VkExportMetalObjectsInfoEXT*, void>)vkExportMetalObjectsEXT_ptr.Value)(device, metalObjectsInfo);
	}

	public VkResult vkGetMemoryMetalHandleEXT(VkDevice device, VkMemoryGetMetalHandleInfoEXT* getMetalHandleInfo, void** handle)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryGetMetalHandleInfoEXT*, void**, VkResult>)vkGetMemoryMetalHandleEXT_ptr.Value)(device, getMetalHandleInfo, handle);
	}

	public VkResult vkGetMemoryMetalHandlePropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, void* handle, VkMemoryMetalHandlePropertiesEXT* memoryMetalHandleProperties)
	{
		return ((delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlags, void*, VkMemoryMetalHandlePropertiesEXT*, VkResult>)vkGetMemoryMetalHandlePropertiesEXT_ptr.Value)(device, handleType, handle, memoryMetalHandleProperties);
	}

	public VkResult vkGetMemoryWin32HandleKHR(VkDevice device, VkMemoryGetWin32HandleInfoKHR* getWin32HandleInfo, nint* handle)
	{
		return ((delegate* unmanaged<VkDevice, VkMemoryGetWin32HandleInfoKHR*, nint*, VkResult>)vkGetMemoryWin32HandleKHR_ptr.Value)(device, getWin32HandleInfo, handle);
	}

	public VkResult vkGetMemoryWin32HandleKHR(VkDevice device, VkMemoryGetWin32HandleInfoKHR* getWin32HandleInfo, out nint handle)
	{
		Unsafe.SkipInit(out handle);

		fixed (nint* handlePtr = &handle)
		{
			return ((delegate* unmanaged<VkDevice, VkMemoryGetWin32HandleInfoKHR*, nint*, VkResult>)vkGetMemoryWin32HandleKHR_ptr.Value)(device, getWin32HandleInfo, handlePtr);
		}
	}

	public VkResult vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, nint handle, VkMemoryWin32HandlePropertiesKHR* memoryWin32HandleProperties)
	{
		return ((delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlags, nint, VkMemoryWin32HandlePropertiesKHR*, VkResult>)vkGetMemoryWin32HandlePropertiesKHR_ptr.Value)(device, handleType, handle, memoryWin32HandleProperties);
	}

	public VkResult vkImportSemaphoreWin32HandleKHR(VkDevice device, VkImportSemaphoreWin32HandleInfoKHR* importSemaphoreWin32HandleInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkImportSemaphoreWin32HandleInfoKHR*, VkResult>)vkImportSemaphoreWin32HandleKHR_ptr.Value)(device, importSemaphoreWin32HandleInfo);
	}

	public VkResult vkGetSemaphoreWin32HandleKHR(VkDevice device, VkSemaphoreGetWin32HandleInfoKHR* getWin32HandleInfo, nint* handle)
	{
		return ((delegate* unmanaged<VkDevice, VkSemaphoreGetWin32HandleInfoKHR*, nint*, VkResult>)vkGetSemaphoreWin32HandleKHR_ptr.Value)(device, getWin32HandleInfo, handle);
	}

	public VkResult vkGetSemaphoreWin32HandleKHR(VkDevice device, VkSemaphoreGetWin32HandleInfoKHR* getWin32HandleInfo, out nint handle)
	{
		Unsafe.SkipInit(out handle);

		fixed (nint* handlePtr = &handle)
		{
			return ((delegate* unmanaged<VkDevice, VkSemaphoreGetWin32HandleInfoKHR*, nint*, VkResult>)vkGetSemaphoreWin32HandleKHR_ptr.Value)(device, getWin32HandleInfo, handlePtr);
		}
	}

	public VkResult vkImportFenceWin32HandleKHR(VkDevice device, VkImportFenceWin32HandleInfoKHR* importFenceWin32HandleInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkImportFenceWin32HandleInfoKHR*, VkResult>)vkImportFenceWin32HandleKHR_ptr.Value)(device, importFenceWin32HandleInfo);
	}

	public VkResult vkGetFenceWin32HandleKHR(VkDevice device, VkFenceGetWin32HandleInfoKHR* getWin32HandleInfo, nint* handle)
	{
		return ((delegate* unmanaged<VkDevice, VkFenceGetWin32HandleInfoKHR*, nint*, VkResult>)vkGetFenceWin32HandleKHR_ptr.Value)(device, getWin32HandleInfo, handle);
	}

	public VkResult vkGetFenceWin32HandleKHR(VkDevice device, VkFenceGetWin32HandleInfoKHR* getWin32HandleInfo, out nint handle)
	{
		Unsafe.SkipInit(out handle);

		fixed (nint* handlePtr = &handle)
		{
			return ((delegate* unmanaged<VkDevice, VkFenceGetWin32HandleInfoKHR*, nint*, VkResult>)vkGetFenceWin32HandleKHR_ptr.Value)(device, getWin32HandleInfo, handlePtr);
		}
	}

	public VkResult vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, nint* handle)
	{
		return ((delegate* unmanaged<VkDevice, VkDeviceMemory, VkExternalMemoryHandleTypeFlagsNV, nint*, VkResult>)vkGetMemoryWin32HandleNV_ptr.Value)(device, memory, handleType, handle);
	}

	public VkResult vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, out nint handle)
	{
		Unsafe.SkipInit(out handle);

		fixed (nint* handlePtr = &handle)
		{
			return ((delegate* unmanaged<VkDevice, VkDeviceMemory, VkExternalMemoryHandleTypeFlagsNV, nint*, VkResult>)vkGetMemoryWin32HandleNV_ptr.Value)(device, memory, handleType, handlePtr);
		}
	}

	public VkResult vkAcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkResult>)vkAcquireFullScreenExclusiveModeEXT_ptr.Value)(device, swapchain);
	}

	public VkResult vkReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain)
	{
		return ((delegate* unmanaged<VkDevice, VkSwapchainKHR, VkResult>)vkReleaseFullScreenExclusiveModeEXT_ptr.Value)(device, swapchain);
	}

	public VkResult vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, VkDeviceGroupPresentModeFlagsKHR* modes)
	{
		return ((delegate* unmanaged<VkDevice, VkPhysicalDeviceSurfaceInfo2KHR*, VkDeviceGroupPresentModeFlagsKHR*, VkResult>)vkGetDeviceGroupSurfacePresentModes2EXT_ptr.Value)(device, surfaceInfo, modes);
	}

	public VkResult vkCreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkExecutionGraphPipelineCreateInfoAMDX* createInfos, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkExecutionGraphPipelineCreateInfoAMDX*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateExecutionGraphPipelinesAMDX_ptr.Value)(device, pipelineCache, createInfoCount, createInfos, default, pipelines);
	}

	public VkResult vkCreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkExecutionGraphPipelineCreateInfoAMDX* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkExecutionGraphPipelineCreateInfoAMDX*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateExecutionGraphPipelinesAMDX_ptr.Value)(device, pipelineCache, createInfoCount, createInfos, allocator, pipelines);
	}

	public VkResult vkCreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, in VkExecutionGraphPipelineCreateInfoAMDX createInfos, VkPipeline* pipelines)
	{
		fixed (VkExecutionGraphPipelineCreateInfoAMDX* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkExecutionGraphPipelineCreateInfoAMDX*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateExecutionGraphPipelinesAMDX_ptr.Value)(device, pipelineCache, createInfoCount, createInfoPtr, default, pipelines);
		}
	}

	public VkResult vkCreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, in VkExecutionGraphPipelineCreateInfoAMDX createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
	{
		fixed (VkExecutionGraphPipelineCreateInfoAMDX* createInfoPtr = &createInfos)
		{
			return ((delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkExecutionGraphPipelineCreateInfoAMDX*, VkAllocationCallbacks*, VkPipeline*, VkResult>)vkCreateExecutionGraphPipelinesAMDX_ptr.Value)(device, pipelineCache, createInfoCount, createInfoPtr, allocator, pipelines);
		}
	}

	public VkResult vkGetExecutionGraphPipelineScratchSizeAMDX(VkDevice device, VkPipeline executionGraph, VkExecutionGraphPipelineScratchSizeAMDX* sizeInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkPipeline, VkExecutionGraphPipelineScratchSizeAMDX*, VkResult>)vkGetExecutionGraphPipelineScratchSizeAMDX_ptr.Value)(device, executionGraph, sizeInfo);
	}

	public VkResult vkGetExecutionGraphPipelineNodeIndexAMDX(VkDevice device, VkPipeline executionGraph, VkPipelineShaderStageNodeCreateInfoAMDX* nodeInfo, uint* nodeIndex)
	{
		return ((delegate* unmanaged<VkDevice, VkPipeline, VkPipelineShaderStageNodeCreateInfoAMDX*, uint*, VkResult>)vkGetExecutionGraphPipelineNodeIndexAMDX_ptr.Value)(device, executionGraph, nodeInfo, nodeIndex);
	}

	public void vkCmdInitializeGraphScratchMemoryAMDX(VkCommandBuffer commandBuffer, VkPipeline executionGraph, ulong scratch, ulong scratchSize)
	{
		((delegate* unmanaged<VkCommandBuffer, VkPipeline, ulong, ulong, void>)vkCmdInitializeGraphScratchMemoryAMDX_ptr.Value)(commandBuffer, executionGraph, scratch, scratchSize);
	}

	public void vkCmdDispatchGraphAMDX(VkCommandBuffer commandBuffer, ulong scratch, ulong scratchSize, VkDispatchGraphCountInfoAMDX* countInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, ulong, ulong, VkDispatchGraphCountInfoAMDX*, void>)vkCmdDispatchGraphAMDX_ptr.Value)(commandBuffer, scratch, scratchSize, countInfo);
	}

	public void vkCmdDispatchGraphIndirectAMDX(VkCommandBuffer commandBuffer, ulong scratch, ulong scratchSize, VkDispatchGraphCountInfoAMDX* countInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, ulong, ulong, VkDispatchGraphCountInfoAMDX*, void>)vkCmdDispatchGraphIndirectAMDX_ptr.Value)(commandBuffer, scratch, scratchSize, countInfo);
	}

	public void vkCmdDispatchGraphIndirectCountAMDX(VkCommandBuffer commandBuffer, ulong scratch, ulong scratchSize, ulong countInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, ulong, ulong, ulong, void>)vkCmdDispatchGraphIndirectCountAMDX_ptr.Value)(commandBuffer, scratch, scratchSize, countInfo);
	}

	public VkResult vkCreateCudaModuleNV(VkDevice device, VkCudaModuleCreateInfoNV* createInfo, VkCudaModuleNV* module)
	{
		return ((delegate* unmanaged<VkDevice, VkCudaModuleCreateInfoNV*, VkAllocationCallbacks*, VkCudaModuleNV*, VkResult>)vkCreateCudaModuleNV_ptr.Value)(device, createInfo, default, module);
	}

	public VkResult vkCreateCudaModuleNV(VkDevice device, VkCudaModuleCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, VkCudaModuleNV* module)
	{
		return ((delegate* unmanaged<VkDevice, VkCudaModuleCreateInfoNV*, VkAllocationCallbacks*, VkCudaModuleNV*, VkResult>)vkCreateCudaModuleNV_ptr.Value)(device, createInfo, allocator, module);
	}

	public VkResult vkCreateCudaModuleNV(VkDevice device, in VkCudaModuleCreateInfoNV createInfo, VkCudaModuleNV* module)
	{
		fixed (VkCudaModuleCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCudaModuleCreateInfoNV*, VkAllocationCallbacks*, VkCudaModuleNV*, VkResult>)vkCreateCudaModuleNV_ptr.Value)(device, createInfoPtr, default, module);
		}
	}

	public VkResult vkCreateCudaModuleNV(VkDevice device, in VkCudaModuleCreateInfoNV createInfo, VkAllocationCallbacks* allocator, VkCudaModuleNV* module)
	{
		fixed (VkCudaModuleCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCudaModuleCreateInfoNV*, VkAllocationCallbacks*, VkCudaModuleNV*, VkResult>)vkCreateCudaModuleNV_ptr.Value)(device, createInfoPtr, allocator, module);
		}
	}

	public VkResult vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, ulong* cacheSize, void* cacheData)
	{
		return ((delegate* unmanaged<VkDevice, VkCudaModuleNV, ulong*, void*, VkResult>)vkGetCudaModuleCacheNV_ptr.Value)(device, module, cacheSize, cacheData);
	}

	public VkResult vkCreateCudaFunctionNV(VkDevice device, VkCudaFunctionCreateInfoNV* createInfo, VkCudaFunctionNV* function)
	{
		return ((delegate* unmanaged<VkDevice, VkCudaFunctionCreateInfoNV*, VkAllocationCallbacks*, VkCudaFunctionNV*, VkResult>)vkCreateCudaFunctionNV_ptr.Value)(device, createInfo, default, function);
	}

	public VkResult vkCreateCudaFunctionNV(VkDevice device, VkCudaFunctionCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, VkCudaFunctionNV* function)
	{
		return ((delegate* unmanaged<VkDevice, VkCudaFunctionCreateInfoNV*, VkAllocationCallbacks*, VkCudaFunctionNV*, VkResult>)vkCreateCudaFunctionNV_ptr.Value)(device, createInfo, allocator, function);
	}

	public VkResult vkCreateCudaFunctionNV(VkDevice device, in VkCudaFunctionCreateInfoNV createInfo, VkCudaFunctionNV* function)
	{
		fixed (VkCudaFunctionCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCudaFunctionCreateInfoNV*, VkAllocationCallbacks*, VkCudaFunctionNV*, VkResult>)vkCreateCudaFunctionNV_ptr.Value)(device, createInfoPtr, default, function);
		}
	}

	public VkResult vkCreateCudaFunctionNV(VkDevice device, in VkCudaFunctionCreateInfoNV createInfo, VkAllocationCallbacks* allocator, VkCudaFunctionNV* function)
	{
		fixed (VkCudaFunctionCreateInfoNV* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkDevice, VkCudaFunctionCreateInfoNV*, VkAllocationCallbacks*, VkCudaFunctionNV*, VkResult>)vkCreateCudaFunctionNV_ptr.Value)(device, createInfoPtr, allocator, function);
		}
	}

	public void vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module)
	{
		((delegate* unmanaged<VkDevice, VkCudaModuleNV, VkAllocationCallbacks*, void>)vkDestroyCudaModuleNV_ptr.Value)(device, module, default);
	}

	public void vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkCudaModuleNV, VkAllocationCallbacks*, void>)vkDestroyCudaModuleNV_ptr.Value)(device, module, allocator);
	}

	public void vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function)
	{
		((delegate* unmanaged<VkDevice, VkCudaFunctionNV, VkAllocationCallbacks*, void>)vkDestroyCudaFunctionNV_ptr.Value)(device, function, default);
	}

	public void vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, VkAllocationCallbacks* allocator)
	{
		((delegate* unmanaged<VkDevice, VkCudaFunctionNV, VkAllocationCallbacks*, void>)vkDestroyCudaFunctionNV_ptr.Value)(device, function, allocator);
	}

	public void vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, VkCudaLaunchInfoNV* launchInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkCudaLaunchInfoNV*, void>)vkCmdCudaLaunchKernelNV_ptr.Value)(commandBuffer, launchInfo);
	}

}
