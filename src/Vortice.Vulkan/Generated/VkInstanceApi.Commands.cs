// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static Vortice.Vulkan.Vulkan;

namespace Vortice.Vulkan;

public unsafe partial class VkInstanceApi
{
	public VkInstance Instance { get; }

	// Instance functions
	public readonly PFN_vkVoidFunction vkDestroyInstance_ptr;
	public readonly PFN_vkVoidFunction vkEnumeratePhysicalDevices_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceFeatures_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceFormatProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceImageFormatProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceQueueFamilyProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceMemoryProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetDeviceProcAddr_ptr;
	public readonly PFN_vkVoidFunction vkCreateDevice_ptr;
	public readonly PFN_vkVoidFunction vkEnumerateDeviceExtensionProperties_ptr;
	public readonly PFN_vkVoidFunction vkEnumerateDeviceLayerProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSparseImageFormatProperties_ptr;
	public readonly PFN_vkVoidFunction vkEnumeratePhysicalDeviceGroups_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceFeatures2_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceProperties2_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceFormatProperties2_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceImageFormatProperties2_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceQueueFamilyProperties2_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceMemoryProperties2_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSparseImageFormatProperties2_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceExternalBufferProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceExternalFenceProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceExternalSemaphoreProperties_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceToolProperties_ptr;
	public readonly PFN_vkVoidFunction vkDestroySurfaceKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSurfaceSupportKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSurfaceCapabilitiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSurfaceFormatsKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSurfacePresentModesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDevicePresentRectanglesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceDisplayPropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceDisplayPlanePropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDisplayPlaneSupportedDisplaysKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDisplayModePropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateDisplayModeKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDisplayPlaneCapabilitiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateDisplayPlaneSurfaceKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceVideoCapabilitiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceVideoFormatPropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceFeatures2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceFormatProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceImageFormatProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceQueueFamilyProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceMemoryProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSparseImageFormatProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkEnumeratePhysicalDeviceGroupsKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceExternalBufferPropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceExternalFencePropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSurfaceCapabilities2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSurfaceFormats2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceDisplayProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceDisplayPlaneProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDisplayModeProperties2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetDisplayPlaneCapabilities2KHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceFragmentShadingRatesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceCalibrateableTimeDomainsKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateDebugReportCallbackEXT_ptr;
	public readonly PFN_vkVoidFunction vkDestroyDebugReportCallbackEXT_ptr;
	public readonly PFN_vkVoidFunction vkDebugReportMessageEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceExternalImageFormatPropertiesNV_ptr;
	public readonly PFN_vkVoidFunction vkReleaseDisplayEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSurfaceCapabilities2EXT_ptr;
	public readonly PFN_vkVoidFunction vkSetDebugUtilsObjectNameEXT_ptr;
	public readonly PFN_vkVoidFunction vkSetDebugUtilsObjectTagEXT_ptr;
	public readonly PFN_vkVoidFunction vkQueueBeginDebugUtilsLabelEXT_ptr;
	public readonly PFN_vkVoidFunction vkQueueEndDebugUtilsLabelEXT_ptr;
	public readonly PFN_vkVoidFunction vkQueueInsertDebugUtilsLabelEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdBeginDebugUtilsLabelEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdEndDebugUtilsLabelEXT_ptr;
	public readonly PFN_vkVoidFunction vkCmdInsertDebugUtilsLabelEXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateDebugUtilsMessengerEXT_ptr;
	public readonly PFN_vkVoidFunction vkDestroyDebugUtilsMessengerEXT_ptr;
	public readonly PFN_vkVoidFunction vkSubmitDebugUtilsMessageEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceMultisamplePropertiesEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceCalibrateableTimeDomainsEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceToolPropertiesEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceCooperativeMatrixPropertiesNV_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateHeadlessSurfaceEXT_ptr;
	public readonly PFN_vkVoidFunction vkAcquireDrmDisplayEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetDrmDisplayEXT_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceExternalTensorPropertiesARM_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceOpticalFlowImageFormatsNV_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceCooperativeVectorPropertiesNV_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateAndroidSurfaceKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateMetalSurfaceEXT_ptr;
	public readonly PFN_vkVoidFunction vkCreateViSurfaceNN_ptr;
	public readonly PFN_vkVoidFunction vkCreateWaylandSurfaceKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceWaylandPresentationSupportKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateWin32SurfaceKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceWin32PresentationSupportKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceSurfacePresentModes2EXT_ptr;
	public readonly PFN_vkVoidFunction vkAcquireWinrtDisplayNV_ptr;
	public readonly PFN_vkVoidFunction vkGetWinrtDisplayNV_ptr;
	public readonly PFN_vkVoidFunction vkCreateXcbSurfaceKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceXcbPresentationSupportKHR_ptr;
	public readonly PFN_vkVoidFunction vkCreateXlibSurfaceKHR_ptr;
	public readonly PFN_vkVoidFunction vkGetPhysicalDeviceXlibPresentationSupportKHR_ptr;

	public VkInstanceApi(in VkInstance instance)
	{
		Instance = instance;

		vkDestroyInstance_ptr = vkGetInstanceProcAddr(instance.Handle, "vkDestroyInstance"u8);
		vkEnumeratePhysicalDevices_ptr = vkGetInstanceProcAddr(instance.Handle, "vkEnumeratePhysicalDevices"u8);
		vkGetPhysicalDeviceFeatures_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceFeatures"u8);
		vkGetPhysicalDeviceFormatProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceFormatProperties"u8);
		vkGetPhysicalDeviceImageFormatProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceImageFormatProperties"u8);
		vkGetPhysicalDeviceProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceProperties"u8);
		vkGetPhysicalDeviceQueueFamilyProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceQueueFamilyProperties"u8);
		vkGetPhysicalDeviceMemoryProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceMemoryProperties"u8);
		vkGetDeviceProcAddr_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetDeviceProcAddr"u8);
		vkCreateDevice_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateDevice"u8);
		vkEnumerateDeviceExtensionProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkEnumerateDeviceExtensionProperties"u8);
		vkEnumerateDeviceLayerProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkEnumerateDeviceLayerProperties"u8);
		vkGetPhysicalDeviceSparseImageFormatProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSparseImageFormatProperties"u8);
		vkEnumeratePhysicalDeviceGroups_ptr = vkGetInstanceProcAddr(instance.Handle, "vkEnumeratePhysicalDeviceGroups"u8);
		vkGetPhysicalDeviceFeatures2_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceFeatures2"u8);
		vkGetPhysicalDeviceProperties2_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceProperties2"u8);
		vkGetPhysicalDeviceFormatProperties2_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceFormatProperties2"u8);
		vkGetPhysicalDeviceImageFormatProperties2_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceImageFormatProperties2"u8);
		vkGetPhysicalDeviceQueueFamilyProperties2_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceQueueFamilyProperties2"u8);
		vkGetPhysicalDeviceMemoryProperties2_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceMemoryProperties2"u8);
		vkGetPhysicalDeviceSparseImageFormatProperties2_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSparseImageFormatProperties2"u8);
		vkGetPhysicalDeviceExternalBufferProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceExternalBufferProperties"u8);
		vkGetPhysicalDeviceExternalFenceProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceExternalFenceProperties"u8);
		vkGetPhysicalDeviceExternalSemaphoreProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceExternalSemaphoreProperties"u8);
		vkGetPhysicalDeviceToolProperties_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceToolProperties"u8);
		vkDestroySurfaceKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkDestroySurfaceKHR"u8);
		vkGetPhysicalDeviceSurfaceSupportKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSurfaceSupportKHR"u8);
		vkGetPhysicalDeviceSurfaceCapabilitiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"u8);
		vkGetPhysicalDeviceSurfaceFormatsKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSurfaceFormatsKHR"u8);
		vkGetPhysicalDeviceSurfacePresentModesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSurfacePresentModesKHR"u8);
		vkGetPhysicalDevicePresentRectanglesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDevicePresentRectanglesKHR"u8);
		vkGetPhysicalDeviceDisplayPropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceDisplayPropertiesKHR"u8);
		vkGetPhysicalDeviceDisplayPlanePropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"u8);
		vkGetDisplayPlaneSupportedDisplaysKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetDisplayPlaneSupportedDisplaysKHR"u8);
		vkGetDisplayModePropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetDisplayModePropertiesKHR"u8);
		vkCreateDisplayModeKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateDisplayModeKHR"u8);
		vkGetDisplayPlaneCapabilitiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetDisplayPlaneCapabilitiesKHR"u8);
		vkCreateDisplayPlaneSurfaceKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateDisplayPlaneSurfaceKHR"u8);
		vkGetPhysicalDeviceVideoCapabilitiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceVideoCapabilitiesKHR"u8);
		vkGetPhysicalDeviceVideoFormatPropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceVideoFormatPropertiesKHR"u8);
		vkGetPhysicalDeviceFeatures2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceFeatures2KHR"u8);
		vkGetPhysicalDeviceProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceProperties2KHR"u8);
		vkGetPhysicalDeviceFormatProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceFormatProperties2KHR"u8);
		vkGetPhysicalDeviceImageFormatProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceImageFormatProperties2KHR"u8);
		vkGetPhysicalDeviceQueueFamilyProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceQueueFamilyProperties2KHR"u8);
		vkGetPhysicalDeviceMemoryProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceMemoryProperties2KHR"u8);
		vkGetPhysicalDeviceSparseImageFormatProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"u8);
		vkEnumeratePhysicalDeviceGroupsKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkEnumeratePhysicalDeviceGroupsKHR"u8);
		vkGetPhysicalDeviceExternalBufferPropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceExternalBufferPropertiesKHR"u8);
		vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"u8);
		vkGetPhysicalDeviceExternalFencePropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceExternalFencePropertiesKHR"u8);
		vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"u8);
		vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"u8);
		vkGetPhysicalDeviceSurfaceCapabilities2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSurfaceCapabilities2KHR"u8);
		vkGetPhysicalDeviceSurfaceFormats2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSurfaceFormats2KHR"u8);
		vkGetPhysicalDeviceDisplayProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceDisplayProperties2KHR"u8);
		vkGetPhysicalDeviceDisplayPlaneProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"u8);
		vkGetDisplayModeProperties2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetDisplayModeProperties2KHR"u8);
		vkGetDisplayPlaneCapabilities2KHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetDisplayPlaneCapabilities2KHR"u8);
		vkGetPhysicalDeviceFragmentShadingRatesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceFragmentShadingRatesKHR"u8);
		vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"u8);
		vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"u8);
		vkGetPhysicalDeviceCalibrateableTimeDomainsKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"u8);
		vkCreateDebugReportCallbackEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateDebugReportCallbackEXT"u8);
		vkDestroyDebugReportCallbackEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkDestroyDebugReportCallbackEXT"u8);
		vkDebugReportMessageEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkDebugReportMessageEXT"u8);
		vkGetPhysicalDeviceExternalImageFormatPropertiesNV_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"u8);
		vkReleaseDisplayEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkReleaseDisplayEXT"u8);
		vkGetPhysicalDeviceSurfaceCapabilities2EXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSurfaceCapabilities2EXT"u8);
		vkSetDebugUtilsObjectNameEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkSetDebugUtilsObjectNameEXT"u8);
		vkSetDebugUtilsObjectTagEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkSetDebugUtilsObjectTagEXT"u8);
		vkQueueBeginDebugUtilsLabelEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkQueueBeginDebugUtilsLabelEXT"u8);
		vkQueueEndDebugUtilsLabelEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkQueueEndDebugUtilsLabelEXT"u8);
		vkQueueInsertDebugUtilsLabelEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkQueueInsertDebugUtilsLabelEXT"u8);
		vkCmdBeginDebugUtilsLabelEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCmdBeginDebugUtilsLabelEXT"u8);
		vkCmdEndDebugUtilsLabelEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCmdEndDebugUtilsLabelEXT"u8);
		vkCmdInsertDebugUtilsLabelEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCmdInsertDebugUtilsLabelEXT"u8);
		vkCreateDebugUtilsMessengerEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateDebugUtilsMessengerEXT"u8);
		vkDestroyDebugUtilsMessengerEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkDestroyDebugUtilsMessengerEXT"u8);
		vkSubmitDebugUtilsMessageEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkSubmitDebugUtilsMessageEXT"u8);
		vkGetPhysicalDeviceMultisamplePropertiesEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceMultisamplePropertiesEXT"u8);
		vkGetPhysicalDeviceCalibrateableTimeDomainsEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"u8);
		vkGetPhysicalDeviceToolPropertiesEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceToolPropertiesEXT"u8);
		vkGetPhysicalDeviceCooperativeMatrixPropertiesNV_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"u8);
		vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"u8);
		vkCreateHeadlessSurfaceEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateHeadlessSurfaceEXT"u8);
		vkAcquireDrmDisplayEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkAcquireDrmDisplayEXT"u8);
		vkGetDrmDisplayEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetDrmDisplayEXT"u8);
		vkGetPhysicalDeviceExternalTensorPropertiesARM_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceExternalTensorPropertiesARM"u8);
		vkGetPhysicalDeviceOpticalFlowImageFormatsNV_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV"u8);
		vkGetPhysicalDeviceCooperativeVectorPropertiesNV_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceCooperativeVectorPropertiesNV"u8);
		vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM"u8);
		vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM"u8);
		vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV"u8);
		vkCreateAndroidSurfaceKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateAndroidSurfaceKHR"u8);
		vkCreateMetalSurfaceEXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateMetalSurfaceEXT"u8);
		vkCreateViSurfaceNN_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateViSurfaceNN"u8);
		vkCreateWaylandSurfaceKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateWaylandSurfaceKHR"u8);
		vkGetPhysicalDeviceWaylandPresentationSupportKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceWaylandPresentationSupportKHR"u8);
		vkCreateWin32SurfaceKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateWin32SurfaceKHR"u8);
		vkGetPhysicalDeviceWin32PresentationSupportKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceWin32PresentationSupportKHR"u8);
		vkGetPhysicalDeviceSurfacePresentModes2EXT_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceSurfacePresentModes2EXT"u8);
		vkAcquireWinrtDisplayNV_ptr = vkGetInstanceProcAddr(instance.Handle, "vkAcquireWinrtDisplayNV"u8);
		vkGetWinrtDisplayNV_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetWinrtDisplayNV"u8);
		vkCreateXcbSurfaceKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateXcbSurfaceKHR"u8);
		vkGetPhysicalDeviceXcbPresentationSupportKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceXcbPresentationSupportKHR"u8);
		vkCreateXlibSurfaceKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkCreateXlibSurfaceKHR"u8);
		vkGetPhysicalDeviceXlibPresentationSupportKHR_ptr = vkGetInstanceProcAddr(instance.Handle, "vkGetPhysicalDeviceXlibPresentationSupportKHR"u8);
	}
	public void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks* allocator = default)
	{
		((delegate* unmanaged<VkInstance, VkAllocationCallbacks*, void>)vkDestroyInstance_ptr.Value)(instance, allocator);
	}

	public VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint* physicalDeviceCount, VkPhysicalDevice* physicalDevices)
	{
		return ((delegate* unmanaged<VkInstance, uint*, VkPhysicalDevice*, VkResult>)vkEnumeratePhysicalDevices_ptr.Value)(instance, physicalDeviceCount, physicalDevices);
	}

	public void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* features)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures*, void>)vkGetPhysicalDeviceFeatures_ptr.Value)(physicalDevice, features);
	}

	public void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures features)
	{
		Unsafe.SkipInit(out features);

		fixed (VkPhysicalDeviceFeatures* featuresPtr = &features)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures*, void>)vkGetPhysicalDeviceFeatures_ptr.Value)(physicalDevice, featuresPtr);
		}
	}

	public void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* formatProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties*, void>)vkGetPhysicalDeviceFormatProperties_ptr.Value)(physicalDevice, format, formatProperties);
	}

	public void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties formatProperties)
	{
		Unsafe.SkipInit(out formatProperties);

		fixed (VkFormatProperties* formatPropertiesPtr = &formatProperties)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties*, void>)vkGetPhysicalDeviceFormatProperties_ptr.Value)(physicalDevice, format, formatPropertiesPtr);
		}
	}

	public VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* imageFormatProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult>)vkGetPhysicalDeviceImageFormatProperties_ptr.Value)(physicalDevice, format, type, tiling, usage, flags, imageFormatProperties);
	}

	public VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties imageFormatProperties)
	{
		Unsafe.SkipInit(out imageFormatProperties);

		fixed (VkImageFormatProperties* imageFormatPropertiesPtr = &imageFormatProperties)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult>)vkGetPhysicalDeviceImageFormatProperties_ptr.Value)(physicalDevice, format, type, tiling, usage, flags, imageFormatPropertiesPtr);
		}
	}

	public void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* properties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties*, void>)vkGetPhysicalDeviceProperties_ptr.Value)(physicalDevice, properties);
	}

	public void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties properties)
	{
		Unsafe.SkipInit(out properties);

		fixed (VkPhysicalDeviceProperties* propertiesPtr = &properties)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties*, void>)vkGetPhysicalDeviceProperties_ptr.Value)(physicalDevice, propertiesPtr);
		}
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties* queueFamilyProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties*, void>)vkGetPhysicalDeviceQueueFamilyProperties_ptr.Value)(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
	}

	public void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* memoryProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties*, void>)vkGetPhysicalDeviceMemoryProperties_ptr.Value)(physicalDevice, memoryProperties);
	}

	public void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties memoryProperties)
	{
		Unsafe.SkipInit(out memoryProperties);

		fixed (VkPhysicalDeviceMemoryProperties* memoryPropertiesPtr = &memoryProperties)
		{
			((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties*, void>)vkGetPhysicalDeviceMemoryProperties_ptr.Value)(physicalDevice, memoryPropertiesPtr);
		}
	}

	public PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, byte* name)
	{
		return ((delegate* unmanaged<VkDevice, byte*, PFN_vkVoidFunction>)vkGetDeviceProcAddr_ptr.Value)(device, name);
	}

	public VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDevice* device)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, VkDevice*, VkResult>)vkCreateDevice_ptr.Value)(physicalDevice, createInfo, allocator, device);
	}

	public VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, in VkDeviceCreateInfo createInfo, VkAllocationCallbacks* allocator, VkDevice* device)
	{
		fixed (VkDeviceCreateInfo* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, VkDevice*, VkResult>)vkCreateDevice_ptr.Value)(physicalDevice, createInfoPtr, allocator, device);
		}
	}

	public VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDevice device)
	{
		Unsafe.SkipInit(out device);

		fixed (VkDevice* devicePtr = &device)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, VkDevice*, VkResult>)vkCreateDevice_ptr.Value)(physicalDevice, createInfo, allocator, devicePtr);
		}
	}

	public VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, in VkDeviceCreateInfo createInfo, VkAllocationCallbacks* allocator, out VkDevice device)
	{
		fixed (VkDeviceCreateInfo* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out device);

			fixed (VkDevice* devicePtr = &device)
			{
				return ((delegate* unmanaged<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, VkDevice*, VkResult>)vkCreateDevice_ptr.Value)(physicalDevice, createInfoPtr, allocator, devicePtr);
			}
		}
	}

	public VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, byte* layerName, uint* propertyCount, VkExtensionProperties* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, byte*, uint*, VkExtensionProperties*, VkResult>)vkEnumerateDeviceExtensionProperties_ptr.Value)(physicalDevice, layerName, propertyCount, properties);
	}

	public VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint* propertyCount, VkLayerProperties* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkLayerProperties*, VkResult>)vkEnumerateDeviceLayerProperties_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* propertyCount, VkSparseImageFormatProperties* properties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlags, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void>)vkGetPhysicalDeviceSparseImageFormatProperties_ptr.Value)(physicalDevice, format, type, samples, usage, tiling, propertyCount, properties);
	}

	public VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint* physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* physicalDeviceGroupProperties)
	{
		return ((delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)vkEnumeratePhysicalDeviceGroups_ptr.Value)(instance, physicalDeviceGroupCount, physicalDeviceGroupProperties);
	}

	public void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* features)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures2*, void>)vkGetPhysicalDeviceFeatures2_ptr.Value)(physicalDevice, features);
	}

	public void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* properties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties2*, void>)vkGetPhysicalDeviceProperties2_ptr.Value)(physicalDevice, properties);
	}

	public void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* formatProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties2*, void>)vkGetPhysicalDeviceFormatProperties2_ptr.Value)(physicalDevice, format, formatProperties);
	}

	public VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* imageFormatInfo, VkImageFormatProperties2* imageFormatProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)vkGetPhysicalDeviceImageFormatProperties2_ptr.Value)(physicalDevice, imageFormatInfo, imageFormatProperties);
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties2* queueFamilyProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)vkGetPhysicalDeviceQueueFamilyProperties2_ptr.Value)(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
	}

	public void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* memoryProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*, void>)vkGetPhysicalDeviceMemoryProperties2_ptr.Value)(physicalDevice, memoryProperties);
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, uint* propertyCount, VkSparseImageFormatProperties2* properties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)vkGetPhysicalDeviceSparseImageFormatProperties2_ptr.Value)(physicalDevice, formatInfo, propertyCount, properties);
	}

	public void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* externalBufferInfo, VkExternalBufferProperties* externalBufferProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)vkGetPhysicalDeviceExternalBufferProperties_ptr.Value)(physicalDevice, externalBufferInfo, externalBufferProperties);
	}

	public void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* externalFenceInfo, VkExternalFenceProperties* externalFenceProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)vkGetPhysicalDeviceExternalFenceProperties_ptr.Value)(physicalDevice, externalFenceInfo, externalFenceProperties);
	}

	public void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* externalSemaphoreInfo, VkExternalSemaphoreProperties* externalSemaphoreProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)vkGetPhysicalDeviceExternalSemaphoreProperties_ptr.Value)(physicalDevice, externalSemaphoreInfo, externalSemaphoreProperties);
	}

	public VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint* toolCount, VkPhysicalDeviceToolProperties* toolProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties*, VkResult>)vkGetPhysicalDeviceToolProperties_ptr.Value)(physicalDevice, toolCount, toolProperties);
	}

	public void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* allocator = default)
	{
		((delegate* unmanaged<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void>)vkDestroySurfaceKHR_ptr.Value)(instance, surface, allocator);
	}

	public VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, VkBool32* supported)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, VkSurfaceKHR, VkBool32*, VkResult>)vkGetPhysicalDeviceSurfaceSupportKHR_ptr.Value)(physicalDevice, queueFamilyIndex, surface, supported);
	}

	public VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, out VkBool32 supported)
	{
		Unsafe.SkipInit(out supported);

		fixed (VkBool32* supportedPtr = &supported)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, uint, VkSurfaceKHR, VkBool32*, VkResult>)vkGetPhysicalDeviceSurfaceSupportKHR_ptr.Value)(physicalDevice, queueFamilyIndex, surface, supportedPtr);
		}
	}

	public VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* surfaceCapabilities)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilitiesKHR*, VkResult>)vkGetPhysicalDeviceSurfaceCapabilitiesKHR_ptr.Value)(physicalDevice, surface, surfaceCapabilities);
	}

	public VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out VkSurfaceCapabilitiesKHR surfaceCapabilities)
	{
		Unsafe.SkipInit(out surfaceCapabilities);

		fixed (VkSurfaceCapabilitiesKHR* surfaceCapabilitiesPtr = &surfaceCapabilities)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilitiesKHR*, VkResult>)vkGetPhysicalDeviceSurfaceCapabilitiesKHR_ptr.Value)(physicalDevice, surface, surfaceCapabilitiesPtr);
		}
	}

	public VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* surfaceFormatCount, VkSurfaceFormatKHR* surfaceFormats)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR*, VkResult>)vkGetPhysicalDeviceSurfaceFormatsKHR_ptr.Value)(physicalDevice, surface, surfaceFormatCount, surfaceFormats);
	}

	public VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* presentModeCount, VkPresentModeKHR* presentModes)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR*, VkResult>)vkGetPhysicalDeviceSurfacePresentModesKHR_ptr.Value)(physicalDevice, surface, presentModeCount, presentModes);
	}

	public VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* rectCount, VkRect2D* rects)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D*, VkResult>)vkGetPhysicalDevicePresentRectanglesKHR_ptr.Value)(physicalDevice, surface, rectCount, rects);
	}

	public VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkDisplayPropertiesKHR* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR*, VkResult>)vkGetPhysicalDeviceDisplayPropertiesKHR_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkDisplayPlanePropertiesKHR* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR*, VkResult>)vkGetPhysicalDeviceDisplayPlanePropertiesKHR_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, uint* displayCount, VkDisplayKHR* displays)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkDisplayKHR*, VkResult>)vkGetDisplayPlaneSupportedDisplaysKHR_ptr.Value)(physicalDevice, planeIndex, displayCount, displays);
	}

	public VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* propertyCount, VkDisplayModePropertiesKHR* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR*, VkResult>)vkGetDisplayModePropertiesKHR_ptr.Value)(physicalDevice, display, propertyCount, properties);
	}

	public VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkDisplayModeKHR* mode)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VkDisplayModeKHR*, VkResult>)vkCreateDisplayModeKHR_ptr.Value)(physicalDevice, display, createInfo, allocator, mode);
	}

	public VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, in VkDisplayModeCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkDisplayModeKHR* mode)
	{
		fixed (VkDisplayModeCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VkDisplayModeKHR*, VkResult>)vkCreateDisplayModeKHR_ptr.Value)(physicalDevice, display, createInfoPtr, allocator, mode);
		}
	}

	public VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkDisplayModeKHR mode)
	{
		Unsafe.SkipInit(out mode);

		fixed (VkDisplayModeKHR* modePtr = &mode)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VkDisplayModeKHR*, VkResult>)vkCreateDisplayModeKHR_ptr.Value)(physicalDevice, display, createInfo, allocator, modePtr);
		}
	}

	public VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, in VkDisplayModeCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkDisplayModeKHR mode)
	{
		fixed (VkDisplayModeCreateInfoKHR* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out mode);

			fixed (VkDisplayModeKHR* modePtr = &mode)
			{
				return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VkDisplayModeKHR*, VkResult>)vkCreateDisplayModeKHR_ptr.Value)(physicalDevice, display, createInfoPtr, allocator, modePtr);
			}
		}
	}

	public VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, VkDisplayPlaneCapabilitiesKHR* capabilities)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayModeKHR, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult>)vkGetDisplayPlaneCapabilitiesKHR_ptr.Value)(physicalDevice, mode, planeIndex, capabilities);
	}

	public VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, out VkDisplayPlaneCapabilitiesKHR capabilities)
	{
		Unsafe.SkipInit(out capabilities);

		fixed (VkDisplayPlaneCapabilitiesKHR* capabilitiesPtr = &capabilities)
		{
			return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayModeKHR, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult>)vkGetDisplayPlaneCapabilitiesKHR_ptr.Value)(physicalDevice, mode, planeIndex, capabilitiesPtr);
		}
	}

	public VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateDisplayPlaneSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, in VkDisplaySurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkDisplaySurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateDisplayPlaneSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		Unsafe.SkipInit(out surface);

		fixed (VkSurfaceKHR* surfacePtr = &surface)
		{
			return ((delegate* unmanaged<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateDisplayPlaneSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surfacePtr);
		}
	}

	public VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, in VkDisplaySurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		fixed (VkDisplaySurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out surface);

			fixed (VkSurfaceKHR* surfacePtr = &surface)
			{
				return ((delegate* unmanaged<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateDisplayPlaneSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surfacePtr);
			}
		}
	}

	public VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkVideoProfileInfoKHR* videoProfile, VkVideoCapabilitiesKHR* capabilities)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkVideoProfileInfoKHR*, VkVideoCapabilitiesKHR*, VkResult>)vkGetPhysicalDeviceVideoCapabilitiesKHR_ptr.Value)(physicalDevice, videoProfile, capabilities);
	}

	public VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoFormatInfoKHR* videoFormatInfo, uint* videoFormatPropertyCount, VkVideoFormatPropertiesKHR* videoFormatProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceVideoFormatInfoKHR*, uint*, VkVideoFormatPropertiesKHR*, VkResult>)vkGetPhysicalDeviceVideoFormatPropertiesKHR_ptr.Value)(physicalDevice, videoFormatInfo, videoFormatPropertyCount, videoFormatProperties);
	}

	public void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* features)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures2*, void>)vkGetPhysicalDeviceFeatures2KHR_ptr.Value)(physicalDevice, features);
	}

	public void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* properties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties2*, void>)vkGetPhysicalDeviceProperties2KHR_ptr.Value)(physicalDevice, properties);
	}

	public void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* formatProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties2*, void>)vkGetPhysicalDeviceFormatProperties2KHR_ptr.Value)(physicalDevice, format, formatProperties);
	}

	public VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* imageFormatInfo, VkImageFormatProperties2* imageFormatProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)vkGetPhysicalDeviceImageFormatProperties2KHR_ptr.Value)(physicalDevice, imageFormatInfo, imageFormatProperties);
	}

	public void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties2* queueFamilyProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)vkGetPhysicalDeviceQueueFamilyProperties2KHR_ptr.Value)(physicalDevice, queueFamilyPropertyCount, queueFamilyProperties);
	}

	public void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* memoryProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*, void>)vkGetPhysicalDeviceMemoryProperties2KHR_ptr.Value)(physicalDevice, memoryProperties);
	}

	public void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, uint* propertyCount, VkSparseImageFormatProperties2* properties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)vkGetPhysicalDeviceSparseImageFormatProperties2KHR_ptr.Value)(physicalDevice, formatInfo, propertyCount, properties);
	}

	public VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint* physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* physicalDeviceGroupProperties)
	{
		return ((delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)vkEnumeratePhysicalDeviceGroupsKHR_ptr.Value)(instance, physicalDeviceGroupCount, physicalDeviceGroupProperties);
	}

	public void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* externalBufferInfo, VkExternalBufferProperties* externalBufferProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)vkGetPhysicalDeviceExternalBufferPropertiesKHR_ptr.Value)(physicalDevice, externalBufferInfo, externalBufferProperties);
	}

	public void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* externalSemaphoreInfo, VkExternalSemaphoreProperties* externalSemaphoreProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_ptr.Value)(physicalDevice, externalSemaphoreInfo, externalSemaphoreProperties);
	}

	public void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* externalFenceInfo, VkExternalFenceProperties* externalFenceProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)vkGetPhysicalDeviceExternalFencePropertiesKHR_ptr.Value)(physicalDevice, externalFenceInfo, externalFenceProperties);
	}

	public VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint* counterCount, VkPerformanceCounterKHR* counters, VkPerformanceCounterDescriptionKHR* counterDescriptions)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult>)vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_ptr.Value)(physicalDevice, queueFamilyIndex, counterCount, counters, counterDescriptions);
	}

	public void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* performanceQueryCreateInfo, uint* numPasses)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void>)vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_ptr.Value)(physicalDevice, performanceQueryCreateInfo, numPasses);
	}

	public VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, VkSurfaceCapabilities2KHR* surfaceCapabilities)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult>)vkGetPhysicalDeviceSurfaceCapabilities2KHR_ptr.Value)(physicalDevice, surfaceInfo, surfaceCapabilities);
	}

	public VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, uint* surfaceFormatCount, VkSurfaceFormat2KHR* surfaceFormats)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult>)vkGetPhysicalDeviceSurfaceFormats2KHR_ptr.Value)(physicalDevice, surfaceInfo, surfaceFormatCount, surfaceFormats);
	}

	public VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkDisplayProperties2KHR* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayProperties2KHR*, VkResult>)vkGetPhysicalDeviceDisplayProperties2KHR_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkDisplayPlaneProperties2KHR* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlaneProperties2KHR*, VkResult>)vkGetPhysicalDeviceDisplayPlaneProperties2KHR_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* propertyCount, VkDisplayModeProperties2KHR* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModeProperties2KHR*, VkResult>)vkGetDisplayModeProperties2KHR_ptr.Value)(physicalDevice, display, propertyCount, properties);
	}

	public VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* displayPlaneInfo, VkDisplayPlaneCapabilities2KHR* capabilities)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult>)vkGetDisplayPlaneCapabilities2KHR_ptr.Value)(physicalDevice, displayPlaneInfo, capabilities);
	}

	public VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint* fragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* fragmentShadingRates)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult>)vkGetPhysicalDeviceFragmentShadingRatesKHR_ptr.Value)(physicalDevice, fragmentShadingRateCount, fragmentShadingRates);
	}

	public VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* qualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR* qualityLevelProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR*, VkVideoEncodeQualityLevelPropertiesKHR*, VkResult>)vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR_ptr.Value)(physicalDevice, qualityLevelInfo, qualityLevelProperties);
	}

	public VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkCooperativeMatrixPropertiesKHR* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkCooperativeMatrixPropertiesKHR*, VkResult>)vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint* timeDomainCount, VkTimeDomainKHR* timeDomains)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkTimeDomainKHR*, VkResult>)vkGetPhysicalDeviceCalibrateableTimeDomainsKHR_ptr.Value)(physicalDevice, timeDomainCount, timeDomains);
	}

	public VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkDebugReportCallbackEXT* callback)
	{
		return ((delegate* unmanaged<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VkDebugReportCallbackEXT*, VkResult>)vkCreateDebugReportCallbackEXT_ptr.Value)(instance, createInfo, allocator, callback);
	}

	public VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, in VkDebugReportCallbackCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, VkDebugReportCallbackEXT* callback)
	{
		fixed (VkDebugReportCallbackCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VkDebugReportCallbackEXT*, VkResult>)vkCreateDebugReportCallbackEXT_ptr.Value)(instance, createInfoPtr, allocator, callback);
		}
	}

	public void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* allocator = default)
	{
		((delegate* unmanaged<VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*, void>)vkDestroyDebugReportCallbackEXT_ptr.Value)(instance, callback, allocator);
	}

	public void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong @object, ulong location, int messageCode, byte* layerPrefix, byte* message)
	{
		((delegate* unmanaged<VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, ulong, int, byte*, byte*, void>)vkDebugReportMessageEXT_ptr.Value)(instance, flags, objectType, @object, location, messageCode, layerPrefix, message);
	}

	public VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* externalImageFormatProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult>)vkGetPhysicalDeviceExternalImageFormatPropertiesNV_ptr.Value)(physicalDevice, format, type, tiling, usage, flags, externalHandleType, externalImageFormatProperties);
	}

	public VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkResult>)vkReleaseDisplayEXT_ptr.Value)(physicalDevice, display);
	}

	public VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* surfaceCapabilities)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilities2EXT*, VkResult>)vkGetPhysicalDeviceSurfaceCapabilities2EXT_ptr.Value)(physicalDevice, surface, surfaceCapabilities);
	}

	public VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT* nameInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkDebugUtilsObjectNameInfoEXT*, VkResult>)vkSetDebugUtilsObjectNameEXT_ptr.Value)(device, nameInfo);
	}

	public VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, VkDebugUtilsObjectTagInfoEXT* tagInfo)
	{
		return ((delegate* unmanaged<VkDevice, VkDebugUtilsObjectTagInfoEXT*, VkResult>)vkSetDebugUtilsObjectTagEXT_ptr.Value)(device, tagInfo);
	}

	public void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* labelInfo)
	{
		((delegate* unmanaged<VkQueue, VkDebugUtilsLabelEXT*, void>)vkQueueBeginDebugUtilsLabelEXT_ptr.Value)(queue, labelInfo);
	}

	public void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)
	{
		((delegate* unmanaged<VkQueue, void>)vkQueueEndDebugUtilsLabelEXT_ptr.Value)(queue);
	}

	public void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* labelInfo)
	{
		((delegate* unmanaged<VkQueue, VkDebugUtilsLabelEXT*, void>)vkQueueInsertDebugUtilsLabelEXT_ptr.Value)(queue, labelInfo);
	}

	public void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* labelInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDebugUtilsLabelEXT*, void>)vkCmdBeginDebugUtilsLabelEXT_ptr.Value)(commandBuffer, labelInfo);
	}

	public void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
	{
		((delegate* unmanaged<VkCommandBuffer, void>)vkCmdEndDebugUtilsLabelEXT_ptr.Value)(commandBuffer);
	}

	public void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* labelInfo)
	{
		((delegate* unmanaged<VkCommandBuffer, VkDebugUtilsLabelEXT*, void>)vkCmdInsertDebugUtilsLabelEXT_ptr.Value)(commandBuffer, labelInfo);
	}

	public VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkDebugUtilsMessengerEXT* messenger)
	{
		return ((delegate* unmanaged<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*, VkResult>)vkCreateDebugUtilsMessengerEXT_ptr.Value)(instance, createInfo, allocator, messenger);
	}

	public VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, in VkDebugUtilsMessengerCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, VkDebugUtilsMessengerEXT* messenger)
	{
		fixed (VkDebugUtilsMessengerCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*, VkResult>)vkCreateDebugUtilsMessengerEXT_ptr.Value)(instance, createInfoPtr, allocator, messenger);
		}
	}

	public VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkDebugUtilsMessengerEXT messenger)
	{
		Unsafe.SkipInit(out messenger);

		fixed (VkDebugUtilsMessengerEXT* messengerPtr = &messenger)
		{
			return ((delegate* unmanaged<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*, VkResult>)vkCreateDebugUtilsMessengerEXT_ptr.Value)(instance, createInfo, allocator, messengerPtr);
		}
	}

	public VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, in VkDebugUtilsMessengerCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkDebugUtilsMessengerEXT messenger)
	{
		fixed (VkDebugUtilsMessengerCreateInfoEXT* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out messenger);

			fixed (VkDebugUtilsMessengerEXT* messengerPtr = &messenger)
			{
				return ((delegate* unmanaged<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*, VkResult>)vkCreateDebugUtilsMessengerEXT_ptr.Value)(instance, createInfoPtr, allocator, messengerPtr);
			}
		}
	}

	public void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks* allocator = default)
	{
		((delegate* unmanaged<VkInstance, VkDebugUtilsMessengerEXT, VkAllocationCallbacks*, void>)vkDestroyDebugUtilsMessengerEXT_ptr.Value)(instance, messenger, allocator);
	}

	public void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* callbackData)
	{
		((delegate* unmanaged<VkInstance, VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void>)vkSubmitDebugUtilsMessageEXT_ptr.Value)(instance, messageSeverity, messageTypes, callbackData);
	}

	public void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlags samples, VkMultisamplePropertiesEXT* multisampleProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkSampleCountFlags, VkMultisamplePropertiesEXT*, void>)vkGetPhysicalDeviceMultisamplePropertiesEXT_ptr.Value)(physicalDevice, samples, multisampleProperties);
	}

	public VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint* timeDomainCount, VkTimeDomainKHR* timeDomains)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkTimeDomainKHR*, VkResult>)vkGetPhysicalDeviceCalibrateableTimeDomainsEXT_ptr.Value)(physicalDevice, timeDomainCount, timeDomains);
	}

	public VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint* toolCount, VkPhysicalDeviceToolProperties* toolProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties*, VkResult>)vkGetPhysicalDeviceToolPropertiesEXT_ptr.Value)(physicalDevice, toolCount, toolProperties);
	}

	public VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint* propertyCount, VkCooperativeMatrixPropertiesNV* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkCooperativeMatrixPropertiesNV*, VkResult>)vkGetPhysicalDeviceCooperativeMatrixPropertiesNV_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint* combinationCount, VkFramebufferMixedSamplesCombinationNV* combinations)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult>)vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_ptr.Value)(physicalDevice, combinationCount, combinations);
	}

	public VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateHeadlessSurfaceEXT_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, in VkHeadlessSurfaceCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkHeadlessSurfaceCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateHeadlessSurfaceEXT_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int drmFd, VkDisplayKHR display)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, int, VkDisplayKHR, VkResult>)vkAcquireDrmDisplayEXT_ptr.Value)(physicalDevice, drmFd, display);
	}

	public VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int drmFd, uint connectorId, VkDisplayKHR* display)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, int, uint, VkDisplayKHR*, VkResult>)vkGetDrmDisplayEXT_ptr.Value)(physicalDevice, drmFd, connectorId, display);
	}

	public void vkGetPhysicalDeviceExternalTensorPropertiesARM(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalTensorInfoARM* externalTensorInfo, VkExternalTensorPropertiesARM* externalTensorProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalTensorInfoARM*, VkExternalTensorPropertiesARM*, void>)vkGetPhysicalDeviceExternalTensorPropertiesARM_ptr.Value)(physicalDevice, externalTensorInfo, externalTensorProperties);
	}

	public VkResult vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, VkOpticalFlowImageFormatInfoNV* opticalFlowImageFormatInfo, uint* formatCount, VkOpticalFlowImageFormatPropertiesNV* imageFormatProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkOpticalFlowImageFormatInfoNV*, uint*, VkOpticalFlowImageFormatPropertiesNV*, VkResult>)vkGetPhysicalDeviceOpticalFlowImageFormatsNV_ptr.Value)(physicalDevice, opticalFlowImageFormatInfo, formatCount, imageFormatProperties);
	}

	public VkResult vkGetPhysicalDeviceCooperativeVectorPropertiesNV(VkPhysicalDevice physicalDevice, uint* propertyCount, VkCooperativeVectorPropertiesNV* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkCooperativeVectorPropertiesNV*, VkResult>)vkGetPhysicalDeviceCooperativeVectorPropertiesNV_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public VkResult vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint* queueFamilyDataGraphPropertyCount, VkQueueFamilyDataGraphPropertiesARM* queueFamilyDataGraphProperties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkQueueFamilyDataGraphPropertiesARM*, VkResult>)vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM_ptr.Value)(physicalDevice, queueFamilyIndex, queueFamilyDataGraphPropertyCount, queueFamilyDataGraphProperties);
	}

	public void vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(VkPhysicalDevice physicalDevice, VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM* queueFamilyDataGraphProcessingEngineInfo, VkQueueFamilyDataGraphProcessingEnginePropertiesARM* queueFamilyDataGraphProcessingEngineProperties)
	{
		((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM*, VkQueueFamilyDataGraphProcessingEnginePropertiesARM*, void>)vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM_ptr.Value)(physicalDevice, queueFamilyDataGraphProcessingEngineInfo, queueFamilyDataGraphProcessingEngineProperties);
	}

	public VkResult vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(VkPhysicalDevice physicalDevice, uint* propertyCount, VkCooperativeMatrixFlexibleDimensionsPropertiesNV* properties)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint*, VkCooperativeMatrixFlexibleDimensionsPropertiesNV*, VkResult>)vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV_ptr.Value)(physicalDevice, propertyCount, properties);
	}

	public VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateAndroidSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, in VkAndroidSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkAndroidSurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateAndroidSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		Unsafe.SkipInit(out surface);

		fixed (VkSurfaceKHR* surfacePtr = &surface)
		{
			return ((delegate* unmanaged<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateAndroidSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surfacePtr);
		}
	}

	public VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, in VkAndroidSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		fixed (VkAndroidSurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out surface);

			fixed (VkSurfaceKHR* surfacePtr = &surface)
			{
				return ((delegate* unmanaged<VkInstance, VkAndroidSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateAndroidSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surfacePtr);
			}
		}
	}

	public VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateMetalSurfaceEXT_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateMetalSurfaceEXT(VkInstance instance, in VkMetalSurfaceCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkMetalSurfaceCreateInfoEXT* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateMetalSurfaceEXT_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		Unsafe.SkipInit(out surface);

		fixed (VkSurfaceKHR* surfacePtr = &surface)
		{
			return ((delegate* unmanaged<VkInstance, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateMetalSurfaceEXT_ptr.Value)(instance, createInfo, allocator, surfacePtr);
		}
	}

	public VkResult vkCreateMetalSurfaceEXT(VkInstance instance, in VkMetalSurfaceCreateInfoEXT createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		fixed (VkMetalSurfaceCreateInfoEXT* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out surface);

			fixed (VkSurfaceKHR* surfacePtr = &surface)
			{
				return ((delegate* unmanaged<VkInstance, VkMetalSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateMetalSurfaceEXT_ptr.Value)(instance, createInfoPtr, allocator, surfacePtr);
			}
		}
	}

	public VkResult vkCreateViSurfaceNN(VkInstance instance, VkViSurfaceCreateInfoNN* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateViSurfaceNN_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateViSurfaceNN(VkInstance instance, in VkViSurfaceCreateInfoNN createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkViSurfaceCreateInfoNN* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkViSurfaceCreateInfoNN*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateViSurfaceNN_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateWaylandSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, in VkWaylandSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkWaylandSurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateWaylandSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, VkWaylandSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		Unsafe.SkipInit(out surface);

		fixed (VkSurfaceKHR* surfacePtr = &surface)
		{
			return ((delegate* unmanaged<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateWaylandSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surfacePtr);
		}
	}

	public VkResult vkCreateWaylandSurfaceKHR(VkInstance instance, in VkWaylandSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		fixed (VkWaylandSurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out surface);

			fixed (VkSurfaceKHR* surfacePtr = &surface)
			{
				return ((delegate* unmanaged<VkInstance, VkWaylandSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateWaylandSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surfacePtr);
			}
		}
	}

	public VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, nint display)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, nint, VkBool32>)vkGetPhysicalDeviceWaylandPresentationSupportKHR_ptr.Value)(physicalDevice, queueFamilyIndex, display);
	}

	public VkResult vkCreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateWin32SurfaceKHR_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateWin32SurfaceKHR(VkInstance instance, in VkWin32SurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkWin32SurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateWin32SurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkResult vkCreateWin32SurfaceKHR(VkInstance instance, VkWin32SurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		Unsafe.SkipInit(out surface);

		fixed (VkSurfaceKHR* surfacePtr = &surface)
		{
			return ((delegate* unmanaged<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateWin32SurfaceKHR_ptr.Value)(instance, createInfo, allocator, surfacePtr);
		}
	}

	public VkResult vkCreateWin32SurfaceKHR(VkInstance instance, in VkWin32SurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		fixed (VkWin32SurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out surface);

			fixed (VkSurfaceKHR* surfacePtr = &surface)
			{
				return ((delegate* unmanaged<VkInstance, VkWin32SurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateWin32SurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surfacePtr);
			}
		}
	}

	public VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, VkBool32>)vkGetPhysicalDeviceWin32PresentationSupportKHR_ptr.Value)(physicalDevice, queueFamilyIndex);
	}

	public VkResult vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, uint* presentModeCount, VkPresentModeKHR* presentModes)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkPresentModeKHR*, VkResult>)vkGetPhysicalDeviceSurfacePresentModes2EXT_ptr.Value)(physicalDevice, surfaceInfo, presentModeCount, presentModes);
	}

	public VkResult vkAcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkResult>)vkAcquireWinrtDisplayNV_ptr.Value)(physicalDevice, display);
	}

	public VkResult vkGetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint deviceRelativeId, VkDisplayKHR* display)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, VkDisplayKHR*, VkResult>)vkGetWinrtDisplayNV_ptr.Value)(physicalDevice, deviceRelativeId, display);
	}

	public VkResult vkCreateXcbSurfaceKHR(VkInstance instance, VkXcbSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateXcbSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateXcbSurfaceKHR(VkInstance instance, in VkXcbSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkXcbSurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkXcbSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateXcbSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, nint connection, nint visual_id)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, nint, nint, VkBool32>)vkGetPhysicalDeviceXcbPresentationSupportKHR_ptr.Value)(physicalDevice, queueFamilyIndex, connection, visual_id);
	}

	public VkResult vkCreateXlibSurfaceKHR(VkInstance instance, VkXlibSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		return ((delegate* unmanaged<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateXlibSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surface);
	}

	public VkResult vkCreateXlibSurfaceKHR(VkInstance instance, in VkXlibSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
	{
		fixed (VkXlibSurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			return ((delegate* unmanaged<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateXlibSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surface);
		}
	}

	public VkResult vkCreateXlibSurfaceKHR(VkInstance instance, VkXlibSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		Unsafe.SkipInit(out surface);

		fixed (VkSurfaceKHR* surfacePtr = &surface)
		{
			return ((delegate* unmanaged<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateXlibSurfaceKHR_ptr.Value)(instance, createInfo, allocator, surfacePtr);
		}
	}

	public VkResult vkCreateXlibSurfaceKHR(VkInstance instance, in VkXlibSurfaceCreateInfoKHR createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
	{
		fixed (VkXlibSurfaceCreateInfoKHR* createInfoPtr = &createInfo)
		{
			Unsafe.SkipInit(out surface);

			fixed (VkSurfaceKHR* surfacePtr = &surface)
			{
				return ((delegate* unmanaged<VkInstance, VkXlibSurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)vkCreateXlibSurfaceKHR_ptr.Value)(instance, createInfoPtr, allocator, surfacePtr);
			}
		}
	}

	public VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, nint dpy, ulong visualID)
	{
		return ((delegate* unmanaged<VkPhysicalDevice, uint, nint, ulong, VkBool32>)vkGetPhysicalDeviceXlibPresentationSupportKHR_ptr.Value)(physicalDevice, queueFamilyIndex, dpy, visualID);
	}

}
