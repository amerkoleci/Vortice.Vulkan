// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;
using Vortice.SPIRV;

#pragma warning disable CS0649
namespace Vortice.SpirvCross;

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct spvc_reflected_resource
{
	public uint id;
	public uint base_type_id;
	public uint type_id;
	public sbyte* name;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_reflected_builtin_resource
{
	public SpvBuiltIn builtin;
	public uint value_type_id;
	public spvc_reflected_resource resource;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct spvc_entry_point
{
	public SpvExecutionModel execution_model;
	public sbyte* name;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_combined_image_sampler
{
	public uint combined_id;
	public uint image_id;
	public uint sampler_id;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_specialization_constant
{
	public uint id;
	public uint constant_id;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_buffer_range
{
	public uint index;
	public nuint offset;
	public nuint range;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_hlsl_root_constants
{
	public uint start;
	public uint end;
	public uint binding;
	public uint space;
}

[StructLayout(LayoutKind.Sequential)]
public unsafe partial struct spvc_hlsl_vertex_attribute_remap
{
	public uint location;
	public sbyte* semantic;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_msl_vertex_attribute
{
	public uint location;
	public uint msl_buffer;
	public uint msl_offset;
	public uint msl_stride;
	public SpvcBool per_instance;
	public spvc_msl_shader_variable_format format;
	public SpvBuiltIn builtin;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_msl_shader_interface_var
{
	public uint location;
	public spvc_msl_shader_variable_format format;
	public SpvBuiltIn builtin;
	public uint vecsize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_msl_shader_interface_var_2
{
	public uint location;
	public spvc_msl_shader_variable_format format;
	public SpvBuiltIn builtin;
	public uint vecsize;
	public spvc_msl_shader_variable_rate rate;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_msl_resource_binding
{
	public SpvExecutionModel stage;
	public uint desc_set;
	public uint binding;
	public uint msl_buffer;
	public uint msl_texture;
	public uint msl_sampler;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_msl_constexpr_sampler
{
	public spvc_msl_sampler_coord coord;
	public spvc_msl_sampler_filter min_filter;
	public spvc_msl_sampler_filter mag_filter;
	public spvc_msl_sampler_mip_filter mip_filter;
	public spvc_msl_sampler_address s_address;
	public spvc_msl_sampler_address t_address;
	public spvc_msl_sampler_address r_address;
	public spvc_msl_sampler_compare_func compare_func;
	public spvc_msl_sampler_border_color border_color;
	public float lod_clamp_min;
	public float lod_clamp_max;
	public int max_anisotropy;
	public SpvcBool compare_enable;
	public SpvcBool lod_clamp_enable;
	public SpvcBool anisotropy_enable;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_msl_sampler_ycbcr_conversion
{
	public uint planes;
	public spvc_msl_format_resolution resolution;
	public spvc_msl_sampler_filter chroma_filter;
	public spvc_msl_chroma_location x_chroma_offset;
	public spvc_msl_chroma_location y_chroma_offset;
	public swizzle__FixedBuffer swizzle;

	public unsafe struct swizzle__FixedBuffer
	{
		public spvc_msl_component_swizzle e0;
		public spvc_msl_component_swizzle e1;
		public spvc_msl_component_swizzle e2;
		public spvc_msl_component_swizzle e3;

		[UnscopedRef]
		public ref spvc_msl_component_swizzle this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<spvc_msl_component_swizzle> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 4);
		}
	}
	public spvc_msl_sampler_ycbcr_model_conversion ycbcr_model;
	public spvc_msl_sampler_ycbcr_range ycbcr_range;
	public uint bpc;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_hlsl_resource_binding_mapping
{
	public uint register_space;
	public uint register_binding;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct spvc_hlsl_resource_binding
{
	public SpvExecutionModel stage;
	public uint desc_set;
	public uint binding;
	public spvc_hlsl_resource_binding_mapping cbv;
	public spvc_hlsl_resource_binding_mapping uav;
	public spvc_hlsl_resource_binding_mapping srv;
	public spvc_hlsl_resource_binding_mapping sampler;
}

