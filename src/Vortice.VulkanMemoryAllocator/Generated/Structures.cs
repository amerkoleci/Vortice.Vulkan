// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable CS0649
namespace Vortice.Vulkan;

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaDeviceMemoryCallbacks
{
	public unsafe delegate* unmanaged<VmaAllocator, uint, VkDeviceMemory, ulong, void*, void> pfnAllocate;
	public unsafe delegate* unmanaged<VmaAllocator, uint, VkDeviceMemory, ulong, void*, void> pfnFree;
	public unsafe void* pUserData;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaVulkanFunctions
{
	public unsafe delegate* unmanaged<VkInstance, sbyte*, IntPtr> vkGetInstanceProcAddr;
	public unsafe delegate* unmanaged<VkDevice, sbyte*, IntPtr> vkGetDeviceProcAddr;
	public unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties*, void> vkGetPhysicalDeviceProperties;
	public unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties*, void> vkGetPhysicalDeviceMemoryProperties;
	public unsafe delegate* unmanaged<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult> vkAllocateMemory;
	public unsafe delegate* unmanaged<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void> vkFreeMemory;
	public unsafe delegate* unmanaged<VkDevice, VkDeviceMemory, ulong, ulong, VkMemoryMapFlags, void*, VkResult> vkMapMemory;
	public unsafe delegate* unmanaged<VkDevice, VkDeviceMemory, void> vkUnmapMemory;
	public unsafe delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult> vkFlushMappedMemoryRanges;
	public unsafe delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult> vkInvalidateMappedMemoryRanges;
	public unsafe delegate* unmanaged<VkDevice, VkBuffer, VkDeviceMemory, ulong, VkResult> vkBindBufferMemory;
	public unsafe delegate* unmanaged<VkDevice, VkImage, VkDeviceMemory, ulong, VkResult> vkBindImageMemory;
	public unsafe delegate* unmanaged<VkDevice, VkBuffer, VkMemoryRequirements*, void> vkGetBufferMemoryRequirements;
	public unsafe delegate* unmanaged<VkDevice, VkImage, VkMemoryRequirements*, void> vkGetImageMemoryRequirements;
	public unsafe delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult> vkCreateBuffer;
	public unsafe delegate* unmanaged<VkDevice, VkBuffer, VkAllocationCallbacks*, void> vkDestroyBuffer;
	public unsafe delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult> vkCreateImage;
	public unsafe delegate* unmanaged<VkDevice, VkImage, VkAllocationCallbacks*, void> vkDestroyImage;
	public unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy*, void> vkCmdCopyBuffer;
	public unsafe delegate* unmanaged<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> vkGetBufferMemoryRequirements2KHR;
	public unsafe delegate* unmanaged<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> vkGetImageMemoryRequirements2KHR;
	public unsafe delegate* unmanaged<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult> vkBindBufferMemory2KHR;
	public unsafe delegate* unmanaged<VkDevice, uint, VkBindImageMemoryInfo*, VkResult> vkBindImageMemory2KHR;
	public unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*, void> vkGetPhysicalDeviceMemoryProperties2KHR;
	public unsafe delegate* unmanaged<VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*, void> vkGetDeviceBufferMemoryRequirements;
	public unsafe delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*, void> vkGetDeviceImageMemoryRequirements;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaAllocatorCreateInfo
{
	public VmaAllocatorCreateFlags flags;
	public VkPhysicalDevice physicalDevice;
	public VkDevice device;
	public ulong preferredLargeHeapBlockSize;
	public unsafe VkAllocationCallbacks* pAllocationCallbacks;
	public unsafe VmaDeviceMemoryCallbacks* pDeviceMemoryCallbacks;
	public unsafe ulong* pHeapSizeLimit;
	internal unsafe VmaVulkanFunctions* pVulkanFunctions;
	public VkInstance instance;
	public VkVersion vulkanApiVersion;
	public unsafe VkExternalMemoryHandleTypeFlagsKHR* pTypeExternalMemoryHandleTypes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaAllocatorInfo
{
	public VkInstance instance;
	public VkPhysicalDevice physicalDevice;
	public VkDevice device;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaStatistics
{
	public uint blockCount;
	public uint allocationCount;
	public ulong blockBytes;
	public ulong allocationBytes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaDetailedStatistics
{
	public VmaStatistics statistics;
	public uint unusedRangeCount;
	public ulong allocationSizeMin;
	public ulong allocationSizeMax;
	public ulong unusedRangeSizeMin;
	public ulong unusedRangeSizeMax;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaTotalStatistics
{
	public memoryType__FixedBuffer memoryType;

	public unsafe struct memoryType__FixedBuffer
	{
		public VmaDetailedStatistics e0;
		public VmaDetailedStatistics e1;
		public VmaDetailedStatistics e2;
		public VmaDetailedStatistics e3;
		public VmaDetailedStatistics e4;
		public VmaDetailedStatistics e5;
		public VmaDetailedStatistics e6;
		public VmaDetailedStatistics e7;
		public VmaDetailedStatistics e8;
		public VmaDetailedStatistics e9;
		public VmaDetailedStatistics e10;
		public VmaDetailedStatistics e11;
		public VmaDetailedStatistics e12;
		public VmaDetailedStatistics e13;
		public VmaDetailedStatistics e14;
		public VmaDetailedStatistics e15;
		public VmaDetailedStatistics e16;
		public VmaDetailedStatistics e17;
		public VmaDetailedStatistics e18;
		public VmaDetailedStatistics e19;
		public VmaDetailedStatistics e20;
		public VmaDetailedStatistics e21;
		public VmaDetailedStatistics e22;
		public VmaDetailedStatistics e23;
		public VmaDetailedStatistics e24;
		public VmaDetailedStatistics e25;
		public VmaDetailedStatistics e26;
		public VmaDetailedStatistics e27;
		public VmaDetailedStatistics e28;
		public VmaDetailedStatistics e29;
		public VmaDetailedStatistics e30;
		public VmaDetailedStatistics e31;

		[UnscopedRef]
		public ref VmaDetailedStatistics this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VmaDetailedStatistics> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 32);
		}
	}
	public memoryHeap__FixedBuffer memoryHeap;

	public unsafe struct memoryHeap__FixedBuffer
	{
		public VmaDetailedStatistics e0;
		public VmaDetailedStatistics e1;
		public VmaDetailedStatistics e2;
		public VmaDetailedStatistics e3;
		public VmaDetailedStatistics e4;
		public VmaDetailedStatistics e5;
		public VmaDetailedStatistics e6;
		public VmaDetailedStatistics e7;
		public VmaDetailedStatistics e8;
		public VmaDetailedStatistics e9;
		public VmaDetailedStatistics e10;
		public VmaDetailedStatistics e11;
		public VmaDetailedStatistics e12;
		public VmaDetailedStatistics e13;
		public VmaDetailedStatistics e14;
		public VmaDetailedStatistics e15;

		[UnscopedRef]
		public ref VmaDetailedStatistics this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VmaDetailedStatistics> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 16);
		}
	}
	public VmaDetailedStatistics total;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaBudget
{
	public VmaStatistics statistics;
	public ulong usage;
	public ulong budget;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaAllocationCreateInfo
{
	public VmaAllocationCreateFlags flags;
	public VmaMemoryUsage usage;
	public VkMemoryPropertyFlags requiredFlags;
	public VkMemoryPropertyFlags preferredFlags;
	public uint memoryTypeBits;
	public VmaPool pool;
	public unsafe void* pUserData;
	public float priority;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaPoolCreateInfo
{
	public uint memoryTypeIndex;
	public VmaPoolCreateFlags flags;
	public ulong blockSize;
	public nuint minBlockCount;
	public nuint maxBlockCount;
	public float priority;
	public ulong minAllocationAlignment;
	public unsafe void* pMemoryAllocateNext;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaAllocationInfo
{
	public uint memoryType;
	public VkDeviceMemory deviceMemory;
	public ulong offset;
	public ulong size;
	public unsafe void* pMappedData;
	public unsafe void* pUserData;
	public unsafe sbyte* pName;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaDefragmentationInfo
{
	public VmaDefragmentationFlags flags;
	public VmaPool pool;
	public ulong maxBytesPerPass;
	public uint maxAllocationsPerPass;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaDefragmentationMove
{
	public VmaDefragmentationMoveOperation operation;
	public VmaAllocation srcAllocation;
	public VmaAllocation dstTmpAllocation;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaDefragmentationPassMoveInfo
{
	public uint moveCount;
	public unsafe VmaDefragmentationMove* pMoves;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaDefragmentationStats
{
	public ulong bytesMoved;
	public ulong bytesFreed;
	public uint allocationsMoved;
	public uint deviceMemoryBlocksFreed;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaVirtualBlockCreateInfo
{
	public ulong size;
	public VmaVirtualBlockCreateFlags flags;
	public unsafe VkAllocationCallbacks* pAllocationCallbacks;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaVirtualAllocationCreateInfo
{
	public ulong size;
	public ulong alignment;
	public VmaVirtualAllocationCreateFlags flags;
	public unsafe void* pUserData;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VmaVirtualAllocationInfo
{
	public ulong offset;
	public ulong size;
	public unsafe void* pUserData;
}

