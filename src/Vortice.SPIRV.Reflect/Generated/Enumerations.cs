// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;

namespace Vortice.SPIRV.Reflect;

public enum SpvReflectResult
{
	/// <unmanaged>SPV_REFLECT_RESULT_SUCCESS</unmanaged>
	Success = 0,
	/// <unmanaged>SPV_REFLECT_RESULT_NOT_READY</unmanaged>
	NotReady = 1,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_PARSE_FAILED</unmanaged>
	ErrorParseFailed = 2,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_ALLOC_FAILED</unmanaged>
	ErrorAllocFailed = 3,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_RANGE_EXCEEDED</unmanaged>
	ErrorRangeExceeded = 4,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_NULL_POINTER</unmanaged>
	ErrorNullPointer = 5,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_INTERNAL_ERROR</unmanaged>
	ErrorInternalError = 6,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_COUNT_MISMATCH</unmanaged>
	ErrorCountMismatch = 7,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_ELEMENT_NOT_FOUND</unmanaged>
	ErrorElementNotFound = 8,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_CODE_SIZE</unmanaged>
	ErrorSPIRVInvalidCodeSize = 9,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_MAGIC_NUMBER</unmanaged>
	ErrorSPIRVInvalidMagicNumber = 10,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_EOF</unmanaged>
	ErrorSPIRVUnexpectedEof = 11,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ID_REFERENCE</unmanaged>
	ErrorSPIRVInvalidIDReference = 12,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_SET_NUMBER_OVERFLOW</unmanaged>
	ErrorSPIRVSetNumberOverflow = 13,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_STORAGE_CLASS</unmanaged>
	ErrorSPIRVInvalidStorageClass = 14,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_RECURSION</unmanaged>
	ErrorSPIRVRecursion = 15,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_INSTRUCTION</unmanaged>
	ErrorSPIRVInvalidInstruction = 16,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_BLOCK_DATA</unmanaged>
	ErrorSPIRVUnexpectedBlockData = 17,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_BLOCK_MEMBER_REFERENCE</unmanaged>
	ErrorSPIRVInvalidBlockMemberReference = 18,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ENTRY_POINT</unmanaged>
	ErrorSPIRVInvalidEntryPoint = 19,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_EXECUTION_MODE</unmanaged>
	ErrorSPIRVInvalidExecutionMode = 20,
	/// <unmanaged>SPV_REFLECT_RESULT_ERROR_SPIRV_MAX_RECURSIVE_EXCEEDED</unmanaged>
	ErrorSPIRVMaxRecursiveExceeded = 21,
}

[Flags]
public enum SpvReflectModuleFlags
{
	None = 0,
	/// <unmanaged>SPV_REFLECT_MODULE_FLAG_NONE</unmanaged>
	FlagNone = 0x00000000,
	/// <unmanaged>SPV_REFLECT_MODULE_FLAG_NO_COPY</unmanaged>
	FlagNoCopy = 0x00000001,
}

[Flags]
public enum SpvReflectTypeFlags
{
	None = 0,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_UNDEFINED</unmanaged>
	FlagUndefined = 0x00000000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_VOID</unmanaged>
	FlagVoid = 0x00000001,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_BOOL</unmanaged>
	FlagBool = 0x00000002,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_INT</unmanaged>
	FlagInt = 0x00000004,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_FLOAT</unmanaged>
	FlagFloat = 0x00000008,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_VECTOR</unmanaged>
	FlagVector = 0x00000100,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_MATRIX</unmanaged>
	FlagMatrix = 0x00000200,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_EXTERNAL_IMAGE</unmanaged>
	FlagExternalImage = 0x00010000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_EXTERNAL_SAMPLER</unmanaged>
	FlagExternalSampler = 0x00020000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_EXTERNAL_SAMPLED_IMAGE</unmanaged>
	FlagExternalSampledImage = 0x00040000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_EXTERNAL_BLOCK</unmanaged>
	FlagExternalBlock = 0x00080000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_EXTERNAL_ACCELERATION_STRUCTURE</unmanaged>
	FlagExternalAccelerationStructure = 0x00100000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_EXTERNAL_MASK</unmanaged>
	FlagExternalMask = 0x00FF0000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_STRUCT</unmanaged>
	FlagStruct = 0x10000000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_ARRAY</unmanaged>
	FlagArray = 0x20000000,
	/// <unmanaged>SPV_REFLECT_TYPE_FLAG_REF</unmanaged>
	FlagRef = 0x40000000,
}

[Flags]
public enum SpvReflectDecorationFlags
{
	/// <unmanaged>SPV_REFLECT_DECORATION_NONE</unmanaged>
	None = 0x00000000,
	/// <unmanaged>SPV_REFLECT_DECORATION_BLOCK</unmanaged>
	Block = 0x00000001,
	/// <unmanaged>SPV_REFLECT_DECORATION_BUFFER_BLOCK</unmanaged>
	BufferBlock = 0x00000002,
	/// <unmanaged>SPV_REFLECT_DECORATION_ROW_MAJOR</unmanaged>
	RowMajor = 0x00000004,
	/// <unmanaged>SPV_REFLECT_DECORATION_COLUMN_MAJOR</unmanaged>
	ColumnMajor = 0x00000008,
	/// <unmanaged>SPV_REFLECT_DECORATION_BUILT_IN</unmanaged>
	BuiltIn = 0x00000010,
	/// <unmanaged>SPV_REFLECT_DECORATION_NOPERSPECTIVE</unmanaged>
	Noperspective = 0x00000020,
	/// <unmanaged>SPV_REFLECT_DECORATION_FLAT</unmanaged>
	Flat = 0x00000040,
	/// <unmanaged>SPV_REFLECT_DECORATION_NON_WRITABLE</unmanaged>
	NonWritable = 0x00000080,
	/// <unmanaged>SPV_REFLECT_DECORATION_RELAXED_PRECISION</unmanaged>
	RelaxedPrecision = 0x00000100,
	/// <unmanaged>SPV_REFLECT_DECORATION_NON_READABLE</unmanaged>
	NonReadable = 0x00000200,
	/// <unmanaged>SPV_REFLECT_DECORATION_PATCH</unmanaged>
	Patch = 0x00000400,
	/// <unmanaged>SPV_REFLECT_DECORATION_PER_VERTEX</unmanaged>
	PerVertex = 0x00000800,
	/// <unmanaged>SPV_REFLECT_DECORATION_PER_TASK</unmanaged>
	PerTask = 0x00001000,
	/// <unmanaged>SPV_REFLECT_DECORATION_WEIGHT_TEXTURE</unmanaged>
	WeightTexture = 0x00002000,
	/// <unmanaged>SPV_REFLECT_DECORATION_BLOCK_MATCH_TEXTURE</unmanaged>
	BlockMatchTexture = 0x00004000,
}

public enum SpvReflectUserType
{
	/// <unmanaged>SPV_REFLECT_USER_TYPE_INVALID</unmanaged>
	Invalid = 0,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_CBUFFER</unmanaged>
	Cbuffer = 1,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TBUFFER</unmanaged>
	Tbuffer = 2,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_APPEND_STRUCTURED_BUFFER</unmanaged>
	AppendStructuredBuffer = 3,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_BUFFER</unmanaged>
	Buffer = 4,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_BYTE_ADDRESS_BUFFER</unmanaged>
	ByteAddressBuffer = 5,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_CONSTANT_BUFFER</unmanaged>
	ConstantBuffer = 6,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_CONSUME_STRUCTURED_BUFFER</unmanaged>
	ConsumeStructuredBuffer = 7,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_INPUT_PATCH</unmanaged>
	InputPatch = 8,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_OUTPUT_PATCH</unmanaged>
	OutputPatch = 9,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RASTERIZER_ORDERED_BUFFER</unmanaged>
	RasterizerOrderedBuffer = 10,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RASTERIZER_ORDERED_BYTE_ADDRESS_BUFFER</unmanaged>
	RasterizerOrderedByteAddressBuffer = 11,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RASTERIZER_ORDERED_STRUCTURED_BUFFER</unmanaged>
	RasterizerOrderedStructuredBuffer = 12,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RASTERIZER_ORDERED_TEXTURE_1D</unmanaged>
	RasterizerOrderedTexture1d = 13,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RASTERIZER_ORDERED_TEXTURE_1D_ARRAY</unmanaged>
	RasterizerOrderedTexture1dArray = 14,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RASTERIZER_ORDERED_TEXTURE_2D</unmanaged>
	RasterizerOrderedTexture2D = 15,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RASTERIZER_ORDERED_TEXTURE_2D_ARRAY</unmanaged>
	RasterizerOrderedTexture2DArray = 16,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RASTERIZER_ORDERED_TEXTURE_3D</unmanaged>
	RasterizerOrderedTexture3D = 17,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RAYTRACING_ACCELERATION_STRUCTURE</unmanaged>
	RaytracingAccelerationStructure = 18,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RW_BUFFER</unmanaged>
	RwBuffer = 19,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RW_BYTE_ADDRESS_BUFFER</unmanaged>
	RwByteAddressBuffer = 20,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RW_STRUCTURED_BUFFER</unmanaged>
	RwStructuredBuffer = 21,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RW_TEXTURE_1D</unmanaged>
	RwTexture1d = 22,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RW_TEXTURE_1D_ARRAY</unmanaged>
	RwTexture1dArray = 23,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RW_TEXTURE_2D</unmanaged>
	RwTexture2D = 24,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RW_TEXTURE_2D_ARRAY</unmanaged>
	RwTexture2DArray = 25,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_RW_TEXTURE_3D</unmanaged>
	RwTexture3D = 26,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_STRUCTURED_BUFFER</unmanaged>
	StructuredBuffer = 27,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_SUBPASS_INPUT</unmanaged>
	SubpassInput = 28,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_SUBPASS_INPUT_MS</unmanaged>
	SubpassInputMs = 29,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_1D</unmanaged>
	Texture1d = 30,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_1D_ARRAY</unmanaged>
	Texture1dArray = 31,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_2D</unmanaged>
	Texture2D = 32,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_2D_ARRAY</unmanaged>
	Texture2DArray = 33,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_2DMS</unmanaged>
	Texture2dms = 34,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_2DMS_ARRAY</unmanaged>
	Texture2dmsArray = 35,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_3D</unmanaged>
	Texture3D = 36,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_BUFFER</unmanaged>
	TextureBuffer = 37,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_CUBE</unmanaged>
	TextureCube = 38,
	/// <unmanaged>SPV_REFLECT_USER_TYPE_TEXTURE_CUBE_ARRAY</unmanaged>
	TextureCubeArray = 39,
}

[Flags]
public enum SpvReflectResourceType
{
	None = 0,
	/// <unmanaged>SPV_REFLECT_RESOURCE_FLAG_UNDEFINED</unmanaged>
	Undefined = 0x00000000,
	/// <unmanaged>SPV_REFLECT_RESOURCE_FLAG_SAMPLER</unmanaged>
	Sampler = 0x00000001,
	/// <unmanaged>SPV_REFLECT_RESOURCE_FLAG_CBV</unmanaged>
	Cbv = 0x00000002,
	/// <unmanaged>SPV_REFLECT_RESOURCE_FLAG_SRV</unmanaged>
	Srv = 0x00000004,
	/// <unmanaged>SPV_REFLECT_RESOURCE_FLAG_UAV</unmanaged>
	Uav = 0x00000008,
}

public enum SpvReflectFormat
{
	/// <unmanaged>SPV_REFLECT_FORMAT_UNDEFINED</unmanaged>
	Undefined = 0,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16_UINT</unmanaged>
	R16Uint = 74,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16_SINT</unmanaged>
	R16Sint = 75,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16_SFLOAT</unmanaged>
	R16Sfloat = 76,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16_UINT</unmanaged>
	R16g16Uint = 81,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16_SINT</unmanaged>
	R16g16Sint = 82,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16_SFLOAT</unmanaged>
	R16g16Sfloat = 83,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16B16_UINT</unmanaged>
	R16g16b16Uint = 88,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16B16_SINT</unmanaged>
	R16g16b16Sint = 89,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16B16_SFLOAT</unmanaged>
	R16g16b16Sfloat = 90,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16B16A16_UINT</unmanaged>
	R16g16b16a16Uint = 95,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16B16A16_SINT</unmanaged>
	R16g16b16a16Sint = 96,
	/// <unmanaged>SPV_REFLECT_FORMAT_R16G16B16A16_SFLOAT</unmanaged>
	R16g16b16a16Sfloat = 97,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32_UINT</unmanaged>
	R32Uint = 98,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32_SINT</unmanaged>
	R32Sint = 99,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32_SFLOAT</unmanaged>
	R32Sfloat = 100,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32_UINT</unmanaged>
	R32g32Uint = 101,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32_SINT</unmanaged>
	R32g32Sint = 102,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32_SFLOAT</unmanaged>
	R32g32Sfloat = 103,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32B32_UINT</unmanaged>
	R32g32b32Uint = 104,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32B32_SINT</unmanaged>
	R32g32b32Sint = 105,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32B32_SFLOAT</unmanaged>
	R32g32b32Sfloat = 106,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32B32A32_UINT</unmanaged>
	R32g32b32a32Uint = 107,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32B32A32_SINT</unmanaged>
	R32g32b32a32Sint = 108,
	/// <unmanaged>SPV_REFLECT_FORMAT_R32G32B32A32_SFLOAT</unmanaged>
	R32g32b32a32Sfloat = 109,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64_UINT</unmanaged>
	R64Uint = 110,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64_SINT</unmanaged>
	R64Sint = 111,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64_SFLOAT</unmanaged>
	R64Sfloat = 112,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64_UINT</unmanaged>
	R64g64Uint = 113,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64_SINT</unmanaged>
	R64g64Sint = 114,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64_SFLOAT</unmanaged>
	R64g64Sfloat = 115,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64B64_UINT</unmanaged>
	R64g64b64Uint = 116,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64B64_SINT</unmanaged>
	R64g64b64Sint = 117,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64B64_SFLOAT</unmanaged>
	R64g64b64Sfloat = 118,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64B64A64_UINT</unmanaged>
	R64g64b64a64Uint = 119,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64B64A64_SINT</unmanaged>
	R64g64b64a64Sint = 120,
	/// <unmanaged>SPV_REFLECT_FORMAT_R64G64B64A64_SFLOAT</unmanaged>
	R64g64b64a64Sfloat = 121,
}

[Flags]
public enum SpvReflectVariableFlags
{
	None = 0,
	/// <unmanaged>SPV_REFLECT_VARIABLE_FLAGS_NONE</unmanaged>
	FlagsNone = 0x00000000,
	/// <unmanaged>SPV_REFLECT_VARIABLE_FLAGS_UNUSED</unmanaged>
	FlagsUnused = 0x00000001,
	/// <unmanaged>SPV_REFLECT_VARIABLE_FLAGS_PHYSICAL_POINTER_COPY</unmanaged>
	FlagsPhysicalPointerCopy = 0x00000002,
}

public enum SpvReflectDescriptorType
{
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLER</unmanaged>
	Sampler = 0,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER</unmanaged>
	CombinedImageSampler = 1,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLED_IMAGE</unmanaged>
	SampledImage = 2,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_IMAGE</unmanaged>
	StorageImage = 3,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER</unmanaged>
	UniformTexelBuffer = 4,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER</unmanaged>
	StorageTexelBuffer = 5,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER</unmanaged>
	UniformBuffer = 6,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER</unmanaged>
	StorageBuffer = 7,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC</unmanaged>
	UniformBufferDynamic = 8,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC</unmanaged>
	StorageBufferDynamic = 9,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_INPUT_ATTACHMENT</unmanaged>
	InputAttachment = 10,
	/// <unmanaged>SPV_REFLECT_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR</unmanaged>
	AccelerationStructureKHR = 1000150000,
}

[Flags]
public enum SpvReflectShaderStageFlags
{
	None = 0,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_VERTEX_BIT</unmanaged>
	Vertex = 0x00000001,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_TESSELLATION_CONTROL_BIT</unmanaged>
	TessellationControl = 0x00000002,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_TESSELLATION_EVALUATION_BIT</unmanaged>
	TessellationEvaluation = 0x00000004,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_GEOMETRY_BIT</unmanaged>
	Geometry = 0x00000008,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_FRAGMENT_BIT</unmanaged>
	Fragment = 0x00000010,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_COMPUTE_BIT</unmanaged>
	Compute = 0x00000020,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_TASK_BIT_NV</unmanaged>
	TaskNV = 0x00000040,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_TASK_BIT_EXT</unmanaged>
	TaskEXT = TaskNV,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_MESH_BIT_NV</unmanaged>
	MeshNV = 0x00000080,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_MESH_BIT_EXT</unmanaged>
	MeshEXT = MeshNV,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_RAYGEN_BIT_KHR</unmanaged>
	RaygenKHR = 0x00000100,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_ANY_HIT_BIT_KHR</unmanaged>
	AnyHitKHR = 0x00000200,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_CLOSEST_HIT_BIT_KHR</unmanaged>
	ClosestHitKHR = 0x00000400,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_MISS_BIT_KHR</unmanaged>
	MissKHR = 0x00000800,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_INTERSECTION_BIT_KHR</unmanaged>
	IntersectionKHR = 0x00001000,
	/// <unmanaged>SPV_REFLECT_SHADER_STAGE_CALLABLE_BIT_KHR</unmanaged>
	CallableKHR = 0x00002000,
}

public enum SpvReflectGenerator
{
	/// <unmanaged>SPV_REFLECT_GENERATOR_KHRONOS_LLVM_SPIRV_TRANSLATOR</unmanaged>
	KhronosLlvmSPIRVTranslator = 6,
	/// <unmanaged>SPV_REFLECT_GENERATOR_KHRONOS_SPIRV_TOOLS_ASSEMBLER</unmanaged>
	KhronosSPIRVToolsAssembler = 7,
	/// <unmanaged>SPV_REFLECT_GENERATOR_KHRONOS_GLSLANG_REFERENCE_FRONT_END</unmanaged>
	KhronosGlslangReferenceFrontEnd = 8,
	/// <unmanaged>SPV_REFLECT_GENERATOR_GOOGLE_SHADERC_OVER_GLSLANG</unmanaged>
	GOOGLEShadercOverGlslang = 13,
	/// <unmanaged>SPV_REFLECT_GENERATOR_GOOGLE_SPIREGG</unmanaged>
	GOOGLESpiregg = 14,
	/// <unmanaged>SPV_REFLECT_GENERATOR_GOOGLE_RSPIRV</unmanaged>
	GOOGLERspirv = 15,
	/// <unmanaged>SPV_REFLECT_GENERATOR_X_LEGEND_MESA_MESAIR_SPIRV_TRANSLATOR</unmanaged>
	XLegendMesaMesairSPIRVTranslator = 16,
	/// <unmanaged>SPV_REFLECT_GENERATOR_KHRONOS_SPIRV_TOOLS_LINKER</unmanaged>
	KhronosSPIRVToolsLinker = 17,
	/// <unmanaged>SPV_REFLECT_GENERATOR_WINE_VKD3D_SHADER_COMPILER</unmanaged>
	WineVkd3dShaderCompiler = 18,
	/// <unmanaged>SPV_REFLECT_GENERATOR_CLAY_CLAY_SHADER_COMPILER</unmanaged>
	ClayClayShaderCompiler = 19,
}

public enum SpvReflectArrayDimType
{
	/// <unmanaged>SPV_REFLECT_ARRAY_DIM_RUNTIME</unmanaged>
	Runtime = 0,
}

public enum SpvReflectExecutionModeValue : uint
{
	/// <unmanaged>SPV_REFLECT_EXECUTION_MODE_SPEC_CONSTANT</unmanaged>
	SpecConstant = 0xFFFFFFFF,
}

[Flags]
public enum SpvKernelEnqueueFlags
{
	None = 0,
}

